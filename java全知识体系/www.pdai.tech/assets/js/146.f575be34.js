(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{611:function(a,t,_){"use strict";_.r(t);var v=_(11),s=Object(v.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"分布式系统---分布式事务及实现方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统---分布式事务及实现方案"}},[a._v("¶")]),a._v(" 分布式系统 - 分布式事务及实现方案")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F---%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88"}},[a._v("分布式系统 - 分布式事务及实现方案")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BC%95%E5%85%A5%E4%BA%8B%E5%8A%A1"}},[a._v("为什么会引入事务")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80"}},[a._v("事务的理论基础")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#acid"}},[a._v("ACID")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#cap"}},[a._v("CAP")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#base"}},[a._v("BASE")])])])]),a._v(" "),_("li",[_("a",{attrs:{href:"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88"}},[a._v("分布式事务的解决方案")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#%E4%B8%A4%E6%AE%B5%E6%8F%90%E4%BA%A42pc"}},[a._v("两段提交（2PC）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#%E4%B8%89%E6%AE%B5%E6%8F%90%E4%BA%A43pc"}},[a._v("三段提交（3PC）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#%E8%A1%A5%E5%81%BF%E4%BA%8B%E5%8A%A1-tcc"}},[a._v("补偿事务 (TCC)")])])])]),a._v(" "),_("li",[_("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])])])])]),a._v(" "),_("h2",{attrs:{id:"为什么会引入事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么会引入事务"}},[a._v("¶")]),a._v(" 为什么会引入事务")]),a._v(" "),_("p",[a._v("拿下单减库存来说举例：当系统的业务量很小时，“一站式”的系统完全可以满足现有业务需求，所有的业务都共用一个数据库，整个下单流程或许只用在一个方法里同一个事务下操作数据库即可。此时所有操作都在一个事务里，要么全部提交，要么全部回滚。")]),a._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-z-trans-1.png",loading:"lazy"}})]),a._v(" "),_("p",[a._v("但随着业务量不断增长，“一站式”系统渐渐扛不住巨大的流量，就需要对数据库进行分库分表，将业务服务化拆分（SOA），就会分离出订单中心、用户中心、库存中心。而这样就造成业务间相互隔离，每个业务都维护着自己的数据库，数据的交换只能进行RPC调用。")]),a._v(" "),_("p",[a._v("用户再下单时，创建订单和扣减库存，需要同时对订单DB和库存DB进行操作。两步操作必须同时成功，否则就会造成业务混乱，可此时我们只能保证自己服务的数据一致性，无法保证调用其他服务的操作是否成功，所以为了保证整个下单流程的数据一致性，就需要分布式事务介入。")]),a._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-z-trans-2.png",loading:"lazy"}})]),a._v(" "),_("p",[a._v("在说分布式事务之前，先回忆一下事务的基本概念："),_("strong",[a._v("事务是一个程序执行单元，里面的所有操作要么全部执行成功，要么全部执行失败")]),a._v("。")]),a._v(" "),_("h2",{attrs:{id:"事务的理论基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的理论基础"}},[a._v("¶")]),a._v(" 事务的理论基础")]),a._v(" "),_("h3",{attrs:{id:"acid"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[a._v("¶")]),a._v(" ACID")]),a._v(" "),_("p",[a._v("一个事务有四个基本特性，也就是我们常说的（ACID）：")]),a._v(" "),_("ul",[_("li",[_("strong",[a._v("Atomicity（原子性）")]),a._v("：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。")]),a._v(" "),_("li",[_("strong",[a._v("Consistency（一致性）")]),a._v("：事务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。")]),a._v(" "),_("li",[_("strong",[a._v("Isolation（隔离性）")]),a._v("： 多个并发事务之间相互隔离，不能互相干扰。")]),a._v(" "),_("li",[_("strong",[a._v("Durablity（持久性）")]),a._v("：事务完成后，对数据库的更改是永久保存的，不能回滚。")])]),a._v(" "),_("h3",{attrs:{id:"cap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap"}},[a._v("¶")]),a._v(" CAP")]),a._v(" "),_("h3",{attrs:{id:"base"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[a._v("¶")]),a._v(" BASE")]),a._v(" "),_("h2",{attrs:{id:"分布式事务的解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务的解决方案"}},[a._v("¶")]),a._v(" 分布式事务的解决方案")]),a._v(" "),_("blockquote",[_("p",[a._v("XA协议是一个基于"),_("strong",[a._v("数据库")]),a._v("的"),_("strong",[a._v("分布式事务协议")]),a._v("，其分为两部分："),_("strong",[a._v("事务管理器")]),a._v("和"),_("strong",[a._v("本地资源管理器")]),a._v("。事务管理器作为一个全局的调度者，负责对各个本地资源管理器统一号令提交或者回滚。"),_("code",[a._v("二阶提交协议（2PC）")]),a._v("和"),_("code",[a._v("三阶提交协议（3PC）")]),a._v("就是根据此协议衍生出来而来。主流的诸如Oracle、MySQL等数据库均已实现了XA接口。")])]),a._v(" "),_("p",[a._v("XA接口是双向的系统接口，在事务管理器（Transaction Manager）以及一个或多个资源管理器（Resource Manager）之间形成通信桥梁。也就是说，在基于XA的一个事务中，我们可以针对多个资源进行事务管理，例如一个系统访问多个数据库，或即访问数据库、又访问像消息中间件这样的资源。这样我们就能够实现在多个数据库和消息中间件直接实现全部提交、或全部取消的事务。"),_("strong",[a._v("XA规范不是java的规范，而是一种通用的规范")]),a._v("。")]),a._v(" "),_("h3",{attrs:{id:"两段提交2pc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#两段提交2pc"}},[a._v("¶")]),a._v(" 两段提交（2PC）")]),a._v(" "),_("p",[a._v("两段提交顾名思义就是要进行两个阶段的提交：")]),a._v(" "),_("ul",[_("li",[a._v("第一阶段，准备阶段（投票阶段）；")]),a._v(" "),_("li",[a._v("第二阶段，提交阶段（执行阶段）。")])]),a._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-z-trans-3.png",loading:"lazy"}})]),a._v(" "),_("p",[a._v("下面还拿下单扣库存举例子，简单描述一下两段提交（2PC）的原理：")]),a._v(" "),_("p",[a._v("之前说过业务服务化（SOA）以后，一个下单流程就会用到多个服务，各个服务都无法保证调用的其他服务的成功与否，这个时候就需要一个全局的角色（"),_("strong",[a._v("协调者")]),a._v("）对各个服务（"),_("strong",[a._v("参与者")]),a._v("）进行协调。")]),a._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-z-trans-4.png",loading:"lazy"}})]),a._v(" "),_("p",[a._v("一个下单请求过来通过协调者，给每一个参与者发送Prepare消息，执行本地数据脚本但不提交事务。")]),a._v(" "),_("p",[a._v("如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交（Commit）消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中被占用的资源，显然2PC做到了所有操作要么全部成功、要么全部失败。")]),a._v(" "),_("p",[_("strong",[a._v("两段提交（2PC）的缺点")]),a._v("：")]),a._v(" "),_("p",[a._v("二阶段提交看似能够提供原子性的操作，但它存在着严重的缺陷：")]),a._v(" "),_("ul",[_("li",[_("strong",[a._v("网络抖动导致的数据不一致")]),a._v("：第二阶段中协调者向参与者发送commit命令之后，一旦此时发生网络抖动，导致一部分参与者接收到了commit请求并执行，可其他未接到commit请求的参与者无法执行事务提交。进而导致整个分布式系统出现了数据不一致。")]),a._v(" "),_("li",[_("strong",[a._v("超时导致的同步阻塞问题")]),a._v("：2PC中的所有的参与者节点都为事务阻塞型，当某一个参与者节点出现通信超时，其余参与者都会被动阻塞占用资源不能释放。")]),a._v(" "),_("li",[_("strong",[a._v("单点故障的风险")]),a._v("：由于严重的依赖协调者，一旦协调者发生故障，而此时参与者还都处于锁定资源的状态，无法完成事务commit操作。虽然协调者出现故障后，会重新选举一个协调者，可无法解决因前一个协调者宕机导致的参与者处于阻塞状态的问题。")])]),a._v(" "),_("h3",{attrs:{id:"三段提交3pc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三段提交3pc"}},[a._v("¶")]),a._v(" 三段提交（3PC）")]),a._v(" "),_("p",[a._v("三段提交（3PC）是对两段提交（2PC）的一种升级优化，"),_("strong",[a._v("3PC在2PC的第一阶段和第二阶段中插入一个准备阶段")]),a._v("。保证了在最后提交阶段之前，各参与者节点的状态都一致。同时在协调者和参与者中都引入超时机制，当参与者各种原因未收到协调者的commit请求后，会对本地事务进行commit，不会一直阻塞等待，解决了2PC的单点故障问题，但3PC还是没能从根本上解决数据一致性的问题。")]),a._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-z-trans-5.png",loading:"lazy"}})]),a._v(" "),_("p",[_("strong",[a._v("3PC的三个阶段分别是CanCommit、PreCommit、DoCommit")]),a._v("：")]),a._v(" "),_("ul",[_("li",[_("strong",[a._v("CanCommit")]),a._v("：协调者向所有参与者发送CanCommit命令，询问是否可以执行事务提交操作。如果全部响应YES则进入下一个阶段。")]),a._v(" "),_("li",[_("strong",[a._v("PreCommit")]),a._v("：协调者向所有参与者发送PreCommit命令，询问是否可以进行事务的预提交操作，参与者接收到PreCommit请求后，如参与者成功的执行了事务操作，则返回Yes响应，进入最终commit阶段。一旦参与者中有向协调者发送了No响应，或因网络造成超时，协调者没有接到参与者的响应，协调者向所有参与者发送abort请求，参与者接受abort命令执行事务的中断。")]),a._v(" "),_("li",[_("strong",[a._v("DoCommit")]),a._v("：在前两个阶段中所有参与者的响应反馈均是YES后，协调者向参与者发送DoCommit命令正式提交事务，如协调者没有接收到参与者发送的ACK响应，会向所有参与者发送abort请求命令，执行事务的中断。")])]),a._v(" "),_("h3",{attrs:{id:"补偿事务-tcc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#补偿事务-tcc"}},[a._v("¶")]),a._v(" 补偿事务 (TCC)")]),a._v(" "),_("p",[a._v("TCC（Try-Confirm-Cancel）又被称补偿事务，TCC与2PC的思想很相似，事务处理流程也很相似，但"),_("strong",[a._v("2PC是应用于在DB层面，TCC则可以理解为在应用层面的2PC，是需要我们编写业务逻辑来实现")]),a._v("。")]),a._v(" "),_("p",[a._v('TCC它的核心思想是："针对每个操作都要注册一个与其对应的确认（Try）和补偿（Cancel）"。')]),a._v(" "),_("p",[a._v("还拿下单扣库存解释下它的三个操作：")]),a._v(" "),_("ul",[_("li",[_("strong",[a._v("Try阶段")]),a._v("：下单时通过Try操作去扣除库存预留资源。")]),a._v(" "),_("li",[_("strong",[a._v("Confirm阶段")]),a._v("：确认执行业务操作，在只预留的资源基础上，发起购买请求。")]),a._v(" "),_("li",[_("strong",[a._v("Cancel阶段")]),a._v("：只要涉及到的相关业务中，有一个业务方预留资源未成功，则取消所有业务资源的预留请求。")])]),a._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-z-trans-6.png",loading:"lazy"}})]),a._v(" "),_("p",[_("strong",[a._v("TCC的缺点")]),a._v("：")]),a._v(" "),_("ul",[_("li",[a._v("应用侵入性强：TCC由于基于在业务层面，至使每个操作都需要有try、confirm、cancel三个接口。")]),a._v(" "),_("li",[a._v("开发难度大：代码开发量很大，要保证数据一致性confirm和cancel接口还必须实现幂等性。")])]),a._v(" "),_("h2",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("¶")]),a._v(" 参考文章")]),a._v(" "),_("ul",[_("li",[a._v("http://www.dockone.io/article/9903")]),a._v(" "),_("li",[a._v("https://juejin.im/post/6871435457893728263")]),a._v(" "),_("li",[a._v("https://juejin.im/post/6844903734753886216")])])])}),[],!1,null,null,null);t.default=s.exports}}]);