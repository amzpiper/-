(window.webpackJsonp=window.webpackJsonp||[]).push([[301],{762:function(a,t,s){"use strict";s.r(t);var r=s(11),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"工具-wireshark介绍及抓包分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工具-wireshark介绍及抓包分析"}},[a._v("¶")]),a._v(" 工具: Wireshark介绍及抓包分析")]),a._v(" "),s("blockquote",[s("p",[a._v("Wireshark（前称Ethereal）是一个网络封包分析软件.网络管理员使用Wireshark来检测网络问题，网络安全工程师使用Wireshark来检查资讯安全相关问题，开发者使用Wireshark来为新的通讯协定除错，普通使用者使用Wireshark来学习网络协定的相关知识。@pdai")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%B7%A5%E5%85%B7-wireshark%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90"}},[a._v("工具: Wireshark介绍及抓包分析")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#wireshark%E7%9A%84%E8%83%8C%E6%99%AF"}},[a._v("Wireshark的背景")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#wireshark%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E4%BD%BF%E7%94%A8"}},[a._v("Wireshark的功能和使用")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%95%8C%E9%9D%A2%E5%8A%9F%E8%83%BD"}},[a._v("界面功能")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E8%BF%87%E6%BB%A4%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[a._v("过滤器表达式")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%9F%BA%E6%9C%AC%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[a._v("基本过滤表达式")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%A4%8D%E5%90%88%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E7%A4%BA"}},[a._v("复合过滤表达示")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E7%94%A8%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4%E9%9C%80%E6%B1%82%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[a._v("常见用显示过滤需求及其对应表达式")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8A%93%E5%8F%96%E5%90%8E%E8%BF%87%E6%BB%A4%E5%AE%9E%E4%BE%8B"}},[a._v("抓取后过滤实例")])])])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%8A%93%E5%8C%85"}},[a._v("使用：基本抓包")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8wireshark%E5%88%86%E6%9E%90tcp%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"}},[a._v("使用：Wireshark分析TCP协议的三次握手和四次挥手")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#tcp%E6%8A%A5%E6%96%87%E9%A6%96%E9%83%A8%E5%9B%9E%E9%A1%BE"}},[a._v("TCP报文首部回顾")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9B%9E%E9%A1%BE%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"}},[a._v("回顾三次握手四次挥手")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"}},[a._v("TCP 三次握手")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"}},[a._v("TCP 四次挥手")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[a._v("参考文章")])])])])]),a._v(" "),s("h2",{attrs:{id:"wireshark的背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wireshark的背景"}},[a._v("¶")]),a._v(" Wireshark的背景")]),a._v(" "),s("p",[a._v("Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。")]),a._v(" "),s("p",[a._v("在过去，网络封包分析软件是非常昂贵的，或是专门属于盈利用的软件。Ethereal的出现改变了这一切。在GNUGPL通用许可证的保障范围底下，使用者可以以免费的代价取得软件与其源代码，并拥有针对其源代码修改及客制化的权利。Ethereal是全世界最广泛的网络封包分析软件之一。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("使用Wireshark目的")])])]),a._v(" "),s("p",[a._v("以下是一些使用Wireshark目的的例子：")]),a._v(" "),s("p",[a._v("网络管理员使用Wireshark来检测网络问题，网络安全工程师使用Wireshark来检查资讯安全相关问题，开发者使用Wireshark来为新的通讯协定除错，普通使用者使用Wireshark来学习网络协定的相关知识。当然，有的人也会“居心叵测”的用它来寻找一些敏感信息……")]),a._v(" "),s("p",[a._v("Wireshark不是入侵侦测系统（Intrusion Detection System,IDS）。对于网络上的异常流量行为，Wireshark不会产生警示或是任何提示。然而，仔细分析Wireshark撷取的封包能够帮助使用者对于网络行为有更清楚的了解。Wireshark不会对网络封包产生内容的修改，它只会反映出流通的封包资讯。 Wireshark本身也不会送出封包至网络上。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("参考网址")])])]),a._v(" "),s("p",[a._v("官网地址：https://www.wireshark.org/")]),a._v(" "),s("p",[a._v("官网下载地址：https://www.wireshark.org/#download")]),a._v(" "),s("h2",{attrs:{id:"wireshark的功能和使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wireshark的功能和使用"}},[a._v("¶")]),a._v(" Wireshark的功能和使用")]),a._v(" "),s("h3",{attrs:{id:"界面功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#界面功能"}},[a._v("¶")]),a._v(" 界面功能")]),a._v(" "),s("p",[a._v("WireShark 主要分为这几个界面")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Display Filter(显示过滤器)，  用于过滤")])]),a._v(" "),s("li",[s("p",[a._v("Packet List Pane(封包列表)， 显示捕获到的封包， 有源地址和目标地址，端口号。 颜色不同，代表")])]),a._v(" "),s("li",[s("p",[a._v("Packet Details Pane(封包详细信息), 显示封包中的字段")])]),a._v(" "),s("li",[s("p",[a._v("Dissector Pane(16进制数据)")])]),a._v(" "),s("li",[s("p",[a._v("Miscellanous(地址栏，杂项)")])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-5.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("封包列表")]),a._v("(Packet List Pane)")])]),a._v(" "),s("p",[a._v("封包列表的面板中显示，编号，时间戳，源地址，目标地址，协议，长度，以及封包信息。 你可以看到不同的协议用了不同的颜色显示。")]),a._v(" "),s("p",[a._v("你也可以修改这些显示颜色的规则，  View ->Coloring Rules.")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-6.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("封包详细信息")]),a._v(" (Packet Details Pane)")])]),a._v(" "),s("p",[a._v("这个面板是我们最重要的，用来查看协议中的每一个字段。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-7.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("各行信息分别为:")]),a._v(" "),s("p",[a._v("Frame:   物理层的数据帧概况")]),a._v(" "),s("p",[a._v("Ethernet II: 数据链路层以太网帧头部信息")]),a._v(" "),s("p",[a._v("Internet Protocol Version 4: 互联网层IP包头部信息")]),a._v(" "),s("p",[a._v("Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCP")]),a._v(" "),s("p",[a._v("Hypertext Transfer Protocol:  应用层的信息，此处是HTTP协议")]),a._v(" "),s("h3",{attrs:{id:"过滤器表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤器表达式"}},[a._v("¶")]),a._v(" 过滤器表达式")]),a._v(" "),s("p",[a._v("显示过滤器表达式作用在在wireshark捕获数据包之后，从已捕获的所有数据包中显示出符合条件的数据包，隐藏不符合条件的数据包。")]),a._v(" "),s("p",[a._v("显示过滤表达示在工具栏下方的“显示过滤器”输入框输入即可生效")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-2.png",loading:"lazy"}})]),a._v(" "),s("h4",{attrs:{id:"基本过滤表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本过滤表达式"}},[a._v("¶")]),a._v(" 基本过滤表达式")]),a._v(" "),s("p",[a._v("一条基本的表达式由过滤项、过滤关系、过滤值三项组成。")]),a._v(" "),s("p",[a._v("比如ip.addr == 192.168.1.1，这条表达式中ip.addr是过滤项、==是过滤关系，192.168.1.1是过滤值（整条表达示的意思是找出所有ip协议中源或目标ip、等于、192.168.1.1的数据包）")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("过滤项")])])]),a._v(" "),s("p",[a._v("初学者感觉的“过滤表达式复杂”，最主要就是在这个过滤项上：一是不知道有哪些过滤项，二是不知道过滤项该怎么写。")]),a._v(" "),s("p",[a._v("这两个问题有一个共同的答案-----wireshark的过滤项是“协议“+”.“+”协议字段”的模式。以端口为例，端口出现于tcp协议中所以有端口这个过滤项且其写法就是tcp.port。")]),a._v(" "),s("p",[a._v("推广到其他协议，如eth、ip、udp、http、telnet、ftp、icmp、snmp等等其他协议都是这么个书写思路。当然wireshark出于缩减长度的原因有些字段没有使用协议规定的名称而是使用简写（比如Destination Port在wireshark中写为dstport）又出于简使用增加了一些协议中没有的字段（比如tcp协议只有源端口和目标端口字段，为了简便使用wireshark增加了tcp.port字段来同时代表这两个），但思路总的算是不变的。而且在实际使用时我们输入“协议”+“.”wireshark就会有支持的字段提示（特别是过滤表达式字段的首字母和wireshark在上边2窗口显示的字段名称首字母通常是一样的），看下名称就大概知道要用哪个字段了。wireshark支持的全部协议及协议字段可查看官方说明。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("过滤关系")])])]),a._v(" "),s("p",[a._v("过滤关系就是大于、小于、等于等几种等式关系，我们可以直接看官方给出的表。注意其中有“English”和“C-like”两个字段，这个意思是说“English”和“C-like”这两种写法在wireshark中是等价的、都是可用的。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-3.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("过滤值")])])]),a._v(" "),s("p",[a._v("过滤值就是设定的过滤项应该满足过滤关系的标准，比如500、5000、50000等等。过滤值的写法一般已经被过滤项和过滤关系设定好了，只是填下自己的期望值就可以了。")]),a._v(" "),s("h4",{attrs:{id:"复合过滤表达示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复合过滤表达示"}},[a._v("¶")]),a._v(" 复合过滤表达示")]),a._v(" "),s("p",[a._v("所谓复合过滤表达示，就是指由多条基本过滤表达式组合而成的表达示。基本过滤表达式的写法还是不变的，复合过滤表达示多出来的东西就只是基本过滤表达示的“连接词”")]),a._v(" "),s("p",[a._v("我们依然直接参照官方给出的表，同样“English”和“C-like”这两个字段还是说明这两种写法在wireshark中是等价的、都是可用的。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-4.png",loading:"lazy"}})]),a._v(" "),s("h4",{attrs:{id:"常见用显示过滤需求及其对应表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见用显示过滤需求及其对应表达式"}},[a._v("¶")]),a._v(" 常见用显示过滤需求及其对应表达式")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("数据链路层")]),a._v("：")])]),a._v(" "),s("p",[a._v("筛选mac地址为04:f9:38:ad:13:26的数据包----eth.src == 04:f9:38:ad:13:26")]),a._v(" "),s("p",[a._v("筛选源mac地址为04:f9:38:ad:13:26的数据包----eth.src == 04:f9:38:ad:13:26")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("网络层")]),a._v("：")])]),a._v(" "),s("p",[a._v("筛选ip地址为192.168.1.1的数据包----ip.addr == 192.168.1.1")]),a._v(" "),s("p",[a._v('筛选192.168.1.0网段的数据---- ip contains "192.168.1"')]),a._v(" "),s("p",[a._v("筛选192.168.1.1和192.168.1.2之间的数据包----ip.addr == 192.168.1.1 && ip.addr == 192.168.1.2")]),a._v(" "),s("p",[a._v("筛选从192.168.1.1到192.168.1.2的数据包----ip.src == 192.168.1.1 && ip.dst == 192.168.1.2")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("传输层")]),a._v("：")])]),a._v(" "),s("p",[a._v("筛选tcp协议的数据包----tcp")]),a._v(" "),s("p",[a._v("筛选除tcp协议以外的数据包----!tcp")]),a._v(" "),s("p",[a._v("筛选端口为80的数据包----tcp.port == 80")]),a._v(" "),s("p",[a._v("筛选12345端口和80端口之间的数据包----tcp.port == 12345 && tcp.port == 80")]),a._v(" "),s("p",[a._v("筛选从12345端口到80端口的数据包----tcp.srcport == 12345 && tcp.dstport == 80")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("应用层")]),a._v("：")])]),a._v(" "),s("p",[a._v("特别说明----http中http.request表示请求头中的第一行（如GET index.jsp HTTP/1.1），http.response表示响应头中的第一行（如HTTP/1.1 200 OK），其他头部都用http.header_name形式。")]),a._v(" "),s("p",[a._v('筛选url中包含.php的http数据包----http.request.uri contains ".php"')]),a._v(" "),s("p",[a._v('筛选内容包含username的http数据包----http contains "username"')]),a._v(" "),s("h4",{attrs:{id:"抓取后过滤实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抓取后过滤实例"}},[a._v("¶")]),a._v(" 抓取后过滤实例")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("过滤地址\nip.addr"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".10.10  或  ip.addr eq "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".10.10  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#过滤地址")]),a._v("\nip.src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".10.10     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#过滤源地址")]),a._v("\nip.dst"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".10.10     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#过滤目的地址")]),a._v("\n \n过滤协议，直接输入协议名\nicmp \nhttp\n \n过滤协议和端口\ntcp.port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\ntcp.srcport"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\ntcp.dstport"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\n \n过滤http协议的请求方式\nhttp.request.method"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"GET"')]),a._v("\nhttp.request.method"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"POST"')]),a._v("\nhttp.request.uri contains admin   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#url中包含admin的")]),a._v("\nhttp.request.code"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("404")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#http请求状态码的")]),a._v("\n \n连接符\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v("\nand\nor\n \n通过连接符可以把上面的命令连接在一起，比如：\nip.src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".10.10 and http.request.method"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"POST"')]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br")])]),s("h2",{attrs:{id:"使用：基本抓包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用：基本抓包"}},[a._v("¶")]),a._v(" 使用：基本抓包")]),a._v(" "),s("p",[a._v("双击选择了网卡之后，就开始抓包了")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-8.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("停止抓包后，我们可以选择保存抓取到的数据包。文件——> 另存为——>选择一个存储路径，然后就保存为后缀为 .pcap 格式的文件了，可以双击直接用wireshark打开。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-9.png",loading:"lazy"}})]),a._v(" "),s("h2",{attrs:{id:"使用：wireshark分析tcp协议的三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用：wireshark分析tcp协议的三次握手和四次挥手"}},[a._v("¶")]),a._v(" 使用：Wireshark分析TCP协议的三次握手和四次挥手")]),a._v(" "),s("h3",{attrs:{id:"tcp报文首部回顾"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp报文首部回顾"}},[a._v("¶")]),a._v(" TCP报文首部回顾")]),a._v(" "),s("p",[a._v("首先看下TCP报文首部，和wireshark捕获到的TCP包中的每个字段如下图所示：")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-1.jpeg",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("源端口号：数据发起者的端口号，16bit")]),a._v(" "),s("li",[a._v("目的端口号：数据接收者的端口号，16bit")]),a._v(" "),s("li",[a._v("序号：32bit的序列号，由发送方使用")]),a._v(" "),s("li",[a._v("确认序号：32bit的确认号，是接收数据方期望收到发送方的下一个报文段的序号，因此确认序号应当是上次已成功收到数据字节序号加1。")]),a._v(" "),s("li",[a._v("首部长度：首部中32bit字的数目，可表示15*32bit=60字节的首部。一般首部长度为20字节。")]),a._v(" "),s("li",[a._v("保留：6bit, 均为0")]),a._v(" "),s("li",[a._v("紧急URG：当URG=1时，表示报文段中有紧急数据，应尽快传送。")]),a._v(" "),s("li",[a._v("确认比特ACK：ACK = 1时代表这是一个确认的TCP包，取值0则不是确认包。")]),a._v(" "),s("li",[a._v("推送比特PSH：当发送端PSH=1时，接收端尽快的交付给应用进程。")]),a._v(" "),s("li",[a._v("复位比特（RST）：当RST=1时，表明TCP连接中出现严重差错，必须释放连接，再重新建立连接。")]),a._v(" "),s("li",[a._v("同步比特SYN：在建立连接是用来同步序号。SYN=1， ACK=0表示一个连接请求报文段。SYN=1，ACK=1表示同意建立连接。")]),a._v(" "),s("li",[a._v("终止比特FIN：FIN=1时，表明此报文段的发送端的数据已经发送完毕，并要求释放传输连接。")]),a._v(" "),s("li",[a._v("窗口：用来控制对方发送的数据量，通知发放已确定的发送窗口上限。")]),a._v(" "),s("li",[a._v("检验和：该字段检验的范围包括首部和数据这两部分。由发端计算和存储，并由收端进行验证。")]),a._v(" "),s("li",[a._v("紧急指针：紧急指针在URG=1时才有效，它指出本报文段中的紧急数据的字节数。")]),a._v(" "),s("li",[a._v("选项：长度可变，最长可达40字节")])]),a._v(" "),s("h3",{attrs:{id:"回顾三次握手四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回顾三次握手四次挥手"}},[a._v("¶")]),a._v(" 回顾三次握手四次挥手")]),a._v(" "),s("p",[a._v("详解请"),s("a",{attrs:{href:"https://pdai.tech/md/develop/protocol/dev-protocol-tcpip.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考前文"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-tcpip-4.jpg",loading:"lazy"}})]),a._v(" "),s("blockquote",[s("p",[a._v("注：以下例子来源于：https://blog.csdn.net/shengjie87/article/details/106095866, 同时我还推荐你看下这篇 "),s("a",{attrs:{href:"https://sq.163yun.com/blog/article/193066493804396544?tag=M_tg_144_70",target:"_blank",rel:"noopener noreferrer"}},[a._v("wireshark抓包分析——TCP/IP协议"),s("OutboundLink")],1)])]),a._v(" "),s("h3",{attrs:{id:"tcp-三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手"}},[a._v("¶")]),a._v(" TCP 三次握手")]),a._v(" "),s("p",[a._v("因为建立了连接，所以wireshark抓到数据包了")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-11.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("当客户端向服务器发送请求连接的报文时：\n"),s("ul",[s("li",[a._v("Seq序列号=x（这时客户端的序列号为0）")]),a._v(" "),s("li",[a._v("SYN=1（表示发送连接请求）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-12.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("服务器端收到客户端发来的请求报文后，同意建立连接，则向客户端发送确认报文：\n"),s("ul",[s("li",[a._v("Seq序列号=y（这时服务器也会产生一个序列号y）")]),a._v(" "),s("li",[a._v("Ack确认号=1（Seq序列号x+1，表示确认收到了客户端的请求）")]),a._v(" "),s("li",[a._v("ACK=1（表示这是条确认请求）")]),a._v(" "),s("li",[a._v("SYN=1（同时也发送一个建立连接的请求）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-13.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("客户端进程收到服务端进程的确认后，还要向服务端给出确认，然后连接成功建立：\n"),s("ul",[s("li",[a._v("Seq序列号=x+1（这时客户端的序号为1）")]),a._v(" "),s("li",[a._v("Ack确认号=y+1（表示确认收到了服务器的连接请求）")]),a._v(" "),s("li",[a._v("ACK=1（表示这是确认报文）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-14.png",loading:"lazy"}})]),a._v(" "),s("h3",{attrs:{id:"tcp-四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-四次挥手"}},[a._v("¶")]),a._v(" TCP 四次挥手")]),a._v(" "),s("p",[a._v("（这时我们将服务器也就是虚拟机关机，使得服务器主动要求断开连接，这时服务器和客户端身份对调）")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-16.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("客户端进程发出连接释放报文，并停止发送数据：\n"),s("ul",[s("li",[a._v("Seq序列号=x（客户端序列号）")]),a._v(" "),s("li",[a._v("Ack确认号=673（产生一个初始确认号）")]),a._v(" "),s("li",[a._v("ACK=1（表示发出确认报文）")]),a._v(" "),s("li",[a._v("FIN=1（表示请求断开连接）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-17.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("服务器收到连接释放报文，发出确认报文：\n"),s("ul",[s("li",[a._v("Seq序列号=y（这时服务器的序列号）")]),a._v(" "),s("li",[a._v("Ack确认号=x+1（这时确认号为x+1=674，确认收到客户端的请求）")]),a._v(" "),s("li",[a._v("ACK=1（表示这是确认请求）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-18.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("服务器将最后的数据发送完毕后，就向客户端发送连接释放报文：\n"),s("ul",[s("li",[a._v("Seq序列号=z（服务器更新序列号为673）")]),a._v(" "),s("li",[a._v("Ack确认号=674（这时还是x+1=674）")]),a._v(" "),s("li",[a._v("ACK=1（表示这是确认请求）")]),a._v(" "),s("li",[a._v("FIN=1（表示请求断开连接）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-19.png",loading:"lazy"}})]),a._v(" "),s("ul",[s("li",[a._v("客户端收到服务器的连接释放报文后，必须发出确认才能成功断开连接：\n"),s("ul",[s("li",[a._v("Seq序列号=x+1（这时客户端序列号需要+1=674）")]),a._v(" "),s("li",[a._v("Ack确认号=z+1（服务器的序列号+1=674，确认收到服务器的请求）")]),a._v(" "),s("li",[a._v("ACK=1（表示这是确认请求）")])])])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/network/dev-network-wireshark-20.png",loading:"lazy"}})]),a._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("¶")]),a._v(" 参考文章")]),a._v(" "),s("ul",[s("li",[a._v("https://www.cnblogs.com/auguse/p/11749466.html")]),a._v(" "),s("li",[a._v("https://mlog.club/article/620963")]),a._v(" "),s("li",[a._v("https://sq.163yun.com/blog/article/193066493804396544?tag=M_tg_144_70")])])])}),[],!1,null,null,null);t.default=e.exports}}]);