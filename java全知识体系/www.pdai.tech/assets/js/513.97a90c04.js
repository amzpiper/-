(window.webpackJsonp=window.webpackJsonp||[]).push([[513],{983:function(t,a,v){"use strict";v.r(a);var e=v(11),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"bat大厂面试题与全栈知识体系结合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bat大厂面试题与全栈知识体系结合"}},[t._v("¶")]),t._v(" BAT大厂面试题与全栈知识体系结合 "),v("Badge",{attrs:{type:"error",text:"Hot"}}),v("Badge",{attrs:{text:"必读"}})],1),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("你好，我是pdai。你是否也曾对未来迷茫不知方向，也曾每天在碎片化的学习中焦虑，也曾钦羡他人步入高于你的层次?  那么跟随我，结合"),v("font",{staticStyle:{"font-weight":"bold"},attrs:{color:"red"}},[t._v("BAT大厂面试题")]),t._v("帮你构筑你自己的"),v("font",{staticStyle:{"font-weight":"bold"},attrs:{color:"red"}},[t._v("知识体系")]),t._v("，提升靠技术实现自我价值的"),v("font",{staticStyle:{"font-weight":"bold"},attrs:{color:"red"}},[t._v("概率和掌控力")]),t._v("；而往往当你将本文中知识点掌握时，你会发现那些平时高谈阔论的家伙其实都是纸老虎；但你依然要保持谦卑，闻道有先后，术业有专攻，如是而已。@pdai")],1)]),t._v(" "),v("h2",{attrs:{id:"全栈知识体系总览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全栈知识体系总览"}},[t._v("¶")]),t._v(" 全栈知识体系总览")]),t._v(" "),v("blockquote",[v("p",[t._v("为适配更多屏幕，切成两个图：")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch-overview-2-1.png",loading:"lazy"}})]),t._v(" "),v("p",{attrs:{align:"center"}},[t._v("（点击放大看）")]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch-overview-2-2.png",loading:"lazy"}})]),t._v(" "),v("p",{attrs:{align:"center"}},[t._v("（点击放大看）")]),t._v(" "),v("h2",{attrs:{id:"适合什么样的人群阅读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#适合什么样的人群阅读"}},[t._v("¶")]),t._v(" 适合什么样的人群阅读")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("面试官")]),t._v("：系统性的理解不仅能帮助你理解知识的基础体系，更能帮快速甄别候选人才")]),t._v(" "),v("li",[v("code",[t._v("开发入门者")]),t._v("：提前上船，赢在起跑线")]),t._v(" "),v("li",[v("code",[t._v("开发进阶者")]),t._v("：若干年的开发，尚还没有方向的")]),t._v(" "),v("li",[v("code",[t._v("是个想上进的")]),t._v("：关键是你觉得对你有意义，且做你认为正确的事就够了")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"java入门与进阶"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java入门与进阶"}},[t._v("¶")]),t._v(" Java入门与进阶")]),t._v(" "),v("h3",{attrs:{id:"面向对象与java基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象与java基础"}},[t._v("¶")]),t._v(" 面向对象与Java基础")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java_basic.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("Java入门")]),t._v("：你可能会注意到，"),v("code",[t._v("面向对象与Java基础")]),t._v(" 这个章节写的非常简单，为什么呢? 因为就语法本身而言，大多数人入门一门语言只需要两周左右，所以这里主要梳理下知识点和常见的Q/A。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-oop.html"}},[t._v("Java 基础 - 面向对象")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-lan-basic.html"}},[t._v("Java 基础 - 知识点")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-lan-sum.html"}},[t._v("Java 基础 - 图谱 & Q/A")])],1)]),t._v(" "),v("p",[t._v("基础知识点复习完了以后，我们需要深入的理解Java中的一些基础机制：")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-x-generic.html"}},[t._v("Java 基础 - 泛型机制详解")]),t._v(" "),v("ul",[v("li",[t._v("Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-x-annotation.html"}},[t._v("Java 基础 - 注解机制详解")]),t._v(" "),v("ul",[v("li",[t._v("注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-x-exception.html"}},[t._v("Java 基础 - 异常机制详解")]),t._v(" "),v("ul",[v("li",[t._v("Java异常是Java提供的一种识别及响应错误的一致性机制，ava异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/basic/java-basic-x-reflection.html"}},[t._v("Java 基础 - 反射机制详解")]),t._v(" "),v("ul",[v("li",[t._v("JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/advanced/java-advanced-spi.html"}},[t._v("Java常用机制 - SPI机制")]),t._v(" "),v("ul",[v("li",[t._v("SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java进阶---集合框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java进阶---集合框架"}},[t._v("¶")]),t._v(" Java进阶 - 集合框架")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java_collections_overview.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. Java进阶 - Java 集合框")]),t._v("：Java 集合框架应用是极其广泛的，对于其总体框架用法及源码都必要深刻理解。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-collection-all.html"}},[t._v("Collection 类关系图")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. Java进阶 - Java 集合框之 Collection源码解读")]),t._v("：对核心的Collection类进行源码解读。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-collection-ArrayList.html"}},[t._v("Collection - ArrayList 源码解析")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-collection-LinkedList.html"}},[t._v("Collection - LinkedList源码解析")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-collection-Queue&Stack.html"}},[t._v("Collection - Stack & Queue 源码解析")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-collection-PriorityQueue.html"}},[t._v("Collection - PriorityQueue源码解析")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. Java进阶 - Java 集合框之 Map & Set 源码解读")]),t._v("：对核心的Map & Set 类进行源码解读。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-map-HashMap&HashSet.html"}},[t._v("Map - HashSet & HashMap 源码解析")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-map-LinkedHashMap&LinkedHashSet.html"}},[t._v("Map - LinkedHashSet&Map源码解析")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-map-TreeMap&TreeSet.html"}},[t._v("Map - TreeSet & TreeMap 源码解析")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/collection/java-map-WeakHashMap.html"}},[t._v("Map - WeakHashMap源码解析")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java进阶---并发框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java进阶---并发框架"}},[t._v("¶")]),t._v(" Java进阶 - 并发框架")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-concurrent-overview-1.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. Java进阶 - Java 并发之基础")]),t._v("：首先全局的了解并发的知识体系，同时了解并发理论基础和线程基础，并发关键字等，这些是你理解Java并发框架的基础。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-overview.html"}},[t._v("Java 并发 - 知识体系")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-theorty.html"}},[t._v("Java 并发 - 理论基础")]),t._v(" "),v("ul",[v("li",[t._v("多线程的出现是要解决什么问题的?")]),t._v(" "),v("li",[t._v("线程不安全是指什么? 举例说明")]),t._v(" "),v("li",[t._v("并发出现线程不安全的本质什么? 可见性，原子性和有序性。")]),t._v(" "),v("li",[t._v("Java是怎么解决并发问题的? 3个关键字，JMM和8个Happens-Before")]),t._v(" "),v("li",[t._v("线程安全是不是非真即假? 不是")]),t._v(" "),v("li",[t._v("线程安全有哪些实现思路?")]),t._v(" "),v("li",[t._v("如何理解并发和并行的区别?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-thread-basic.html"}},[t._v("Java 并发 - 线程基础")]),t._v(" "),v("ul",[v("li",[t._v("线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?")]),t._v(" "),v("li",[t._v("通常线程有哪几种使用方式?")]),t._v(" "),v("li",[t._v("基础线程机制有哪些?")]),t._v(" "),v("li",[t._v("线程的中断方式有哪些?")]),t._v(" "),v("li",[t._v("线程的互斥同步方式有哪些? 如何比较和选择?")]),t._v(" "),v("li",[t._v("线程之间有哪些协作方式?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-key-synchronized.html"}},[t._v("关键字: synchronized详解")]),t._v(" "),v("ul",[v("li",[t._v("Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例。")]),t._v(" "),v("li",[t._v("Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理。")]),t._v(" "),v("li",[t._v("Synchronized由什么样的缺陷?  Java Lock是怎么弥补这些缺陷的。")]),t._v(" "),v("li",[t._v("Synchronized和Lock的对比，和选择?")]),t._v(" "),v("li",[t._v("Synchronized在使用时有何注意事项?")]),t._v(" "),v("li",[t._v("Synchronized修饰的方法在抛出异常时,会释放锁吗?")]),t._v(" "),v("li",[t._v("多个线程等待同一个snchronized锁的时候，JVM如何选择下一个获取锁的线程?")]),t._v(" "),v("li",[t._v("Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法?")]),t._v(" "),v("li",[t._v("我想更加灵活地控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办?")]),t._v(" "),v("li",[t._v("什么是锁的升级和降级? 什么是JVM里的偏斜锁、轻量级锁、重量级锁?")]),t._v(" "),v("li",[t._v("不同的JDK中对Synchronized有何优化?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-key-volatile.html"}},[t._v("关键字: volatile详解")]),t._v(" "),v("ul",[v("li",[t._v("volatile关键字的作用是什么?")]),t._v(" "),v("li",[t._v("volatile能保证原子性吗?")]),t._v(" "),v("li",[t._v("之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?")]),t._v(" "),v("li",[t._v("i++为什么不能保证原子性?")]),t._v(" "),v("li",[t._v("volatile是如何实现可见性的?  内存屏障。")]),t._v(" "),v("li",[t._v("volatile是如何实现有序性的?  happens-before等")]),t._v(" "),v("li",[t._v("说下volatile的应用场景?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-key-final.html"}},[t._v("关键字: final详解")]),t._v(" "),v("ul",[v("li",[t._v("所有的final修饰的字段都是编译期常量吗?")]),t._v(" "),v("li",[t._v("如何理解private所修饰的方法是隐式的final?")]),t._v(" "),v("li",[t._v("说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做?")]),t._v(" "),v("li",[t._v("final方法可以被重载吗? 可以")]),t._v(" "),v("li",[t._v("父类的final方法能不能够被子类重写? 不可以")]),t._v(" "),v("li",[t._v("说说final域重排序规则?")]),t._v(" "),v("li",[t._v("说说final的原理?")]),t._v(" "),v("li",[t._v("使用 final 的限制条件和局限性?")]),t._v(" "),v("li",[t._v("看本文最后的一个思考题")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. Java进阶 - Java 并发之J.U.C框架")]),t._v("：然后需要对J.U.C框架五大类详细解读，包括：Lock框架，并发集合, 原子类, 线程池和工具类。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-overview.html"}},[t._v("JUC - 类汇总和学习指南")]),t._v(" "),v("ul",[v("li",[t._v("JUC框架包含几个部分?")]),t._v(" "),v("li",[t._v("每个部分有哪些核心的类?")]),t._v(" "),v("li",[t._v("最最核心的类有哪些?")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B.1 Java进阶 - Java 并发之J.U.C框架【1/5】：CAS及原子类")]),t._v("：从最核心的CAS, Unsafe和原子类开始分析。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-AtomicInteger.html"}},[t._v("JUC原子类: CAS, Unsafe和原子类详解")]),t._v(" "),v("ul",[v("li",[t._v("线程安全的实现方法有哪些?")]),t._v(" "),v("li",[t._v("什么是CAS?")]),t._v(" "),v("li",[t._v("CAS使用示例，结合AtomicInteger给出示例?")]),t._v(" "),v("li",[t._v("CAS会有哪些问题?")]),t._v(" "),v("li",[t._v("针对这这些问题，Java提供了哪几个解决的?")]),t._v(" "),v("li",[t._v("AtomicInteger底层实现? CAS+volatile")]),t._v(" "),v("li",[t._v("请阐述你对Unsafe类的理解?")]),t._v(" "),v("li",[t._v("说说你对Java原子类的理解? 包含13个，4组分类，说说作用和使用场景。")]),t._v(" "),v("li",[t._v("AtomicStampedReference是什么?")]),t._v(" "),v("li",[t._v("AtomicStampedReference是怎么解决ABA的? 内部使用Pair来存储元素值及其版本号")]),t._v(" "),v("li",[t._v("java中还有哪些类可以解决ABA的问题? AtomicMarkableReference")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B.2 Java进阶 - Java 并发之J.U.C框架【2/5】：锁")]),t._v("：然后分析JUC中锁。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-lock-LockSupport.html"}},[t._v("JUC锁: LockSupport详解")]),t._v(" "),v("ul",[v("li",[t._v("为什么LockSupport也是核心基础类? AQS框架借助于两个类：Unsafe(提供CAS操作)和LockSupport(提供park/unpark操作)")]),t._v(" "),v("li",[t._v("写出分别通过wait/notify和LockSupport的park/unpark实现同步?")]),t._v(" "),v("li",[t._v("LockSupport.park()会释放锁资源吗? 那么Condition.await()呢?")]),t._v(" "),v("li",[t._v("Thread.sleep()、Object.wait()、Condition.await()、LockSupport.park()的区别? 重点")]),t._v(" "),v("li",[t._v("如果在wait()之前执行了notify()会怎样?")]),t._v(" "),v("li",[t._v("如果在park()之前执行了unpark()会怎样?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html"}},[t._v("JUC锁: 锁核心类AQS详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是AQS? 为什么它是核心?")]),t._v(" "),v("li",[t._v("AQS的核心思想是什么? 它是怎么实现的? 底层数据结构等")]),t._v(" "),v("li",[t._v("AQS有哪些核心的方法?")]),t._v(" "),v("li",[t._v("AQS定义什么样的资源获取方式? AQS定义了两种资源获取方式："),v("code",[t._v("独占")]),t._v("(只有一个线程能访问执行，又根据是否按队列的顺序分为"),v("code",[t._v("公平锁")]),t._v("和"),v("code",[t._v("非公平锁")]),t._v("，如"),v("code",[t._v("ReentrantLock")]),t._v(") 和"),v("code",[t._v("共享")]),t._v("(多个线程可同时访问执行，如"),v("code",[t._v("Semaphore")]),t._v("、"),v("code",[t._v("CountDownLatch")]),t._v("、 "),v("code",[t._v("CyclicBarrier")]),t._v(" )。"),v("code",[t._v("ReentrantReadWriteLock")]),t._v("可以看成是组合式，允许多个线程同时对某一资源进行读。")]),t._v(" "),v("li",[t._v("AQS底层使用了什么样的设计模式? 模板")]),t._v(" "),v("li",[t._v("AQS的应用示例?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-lock-ReentrantLock.html"}},[t._v("JUC锁: ReentrantLock详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是可重入，什么是可重入锁? 它用来解决什么问题?")]),t._v(" "),v("li",[t._v("ReentrantLock的核心是AQS，那么它怎么来实现的，继承吗? 说说其类内部结构关系。")]),t._v(" "),v("li",[t._v("ReentrantLock是如何实现公平锁的?")]),t._v(" "),v("li",[t._v("ReentrantLock是如何实现非公平锁的?")]),t._v(" "),v("li",[t._v("ReentrantLock默认实现的是公平还是非公平锁?")]),t._v(" "),v("li",[t._v("使用ReentrantLock实现公平和非公平锁的示例?")]),t._v(" "),v("li",[t._v("ReentrantLock和Synchronized的对比?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-lock-ReentrantReadWriteLock.html"}},[t._v("JUC锁: ReentrantReadWriteLock详解")]),t._v(" "),v("ul",[v("li",[t._v("为了有了ReentrantLock还需要ReentrantReadWriteLock?")]),t._v(" "),v("li",[t._v("ReentrantReadWriteLock底层实现原理?")]),t._v(" "),v("li",[t._v("ReentrantReadWriteLock底层读写状态如何设计的? 高16位为读锁，低16位为写锁")]),t._v(" "),v("li",[t._v("读锁和写锁的最大数量是多少?")]),t._v(" "),v("li",[t._v("本地线程计数器ThreadLocalHoldCounter是用来做什么的?")]),t._v(" "),v("li",[t._v("缓存计数器HoldCounter是用来做什么的?")]),t._v(" "),v("li",[t._v("写锁的获取与释放是怎么实现的?")]),t._v(" "),v("li",[t._v("读锁的获取与释放是怎么实现的?")]),t._v(" "),v("li",[t._v("RentrantReadWriteLock为什么不支持锁升级?")]),t._v(" "),v("li",[t._v("什么是锁的升降级? RentrantReadWriteLock为什么不支持锁升级?")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B.3 Java进阶 - Java 并发之J.U.C框架【3/5】：集合")]),t._v("：再理解JUC中重要的支持并发的集合。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-collection-ConcurrentHashMap.html"}},[t._v("JUC集合: ConcurrentHashMap详解")]),t._v(" "),v("ul",[v("li",[t._v("为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么?")]),t._v(" "),v("li",[t._v("ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容?")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.7说说其put的机制?")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry<K,V>[] 进行扩容)")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.8是如何扩容的? tryPresize")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8?")]),t._v(" "),v("li",[t._v("ConcurrentHashMap JDK1.8是如何进行数据迁移的? transfer")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-collection-CopyOnWriteArrayList.html"}},[t._v("JUC集合: CopyOnWriteArrayList详解")]),t._v(" "),v("ul",[v("li",[t._v("请先说说非并发集合中Fail-fast机制?")]),t._v(" "),v("li",[t._v("再为什么说ArrayList查询快而增删慢?")]),t._v(" "),v("li",[t._v("对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝")]),t._v(" "),v("li",[t._v("再说下弱一致性的迭代器原理是怎么样的? "),v("code",[t._v("COWIterator<E>")])]),t._v(" "),v("li",[t._v("CopyOnWriteArrayList为什么并发安全且性能比Vector好?")]),t._v(" "),v("li",[t._v("CopyOnWriteArrayList有何缺陷，说说其应用场景?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-collection-ConcurrentLinkedQueue.html"}},[t._v("JUC集合: ConcurrentLinkedQueue详解")]),t._v(" "),v("ul",[v("li",[t._v("要想用线程安全的队列有哪些选择? Vector，"),v("code",[t._v("Collections.synchronizedList( List<T> list)")]),t._v(", ConcurrentLinkedQueue等")]),t._v(" "),v("li",[t._v("ConcurrentLinkedQueue实现的数据结构?")]),t._v(" "),v("li",[t._v("ConcurrentLinkedQueue底层原理?  全程无锁(CAS)")]),t._v(" "),v("li",[t._v("ConcurrentLinkedQueue的核心方法有哪些? offer()，poll()，peek()，isEmpty()等队列常用方法")]),t._v(" "),v("li",[t._v("说说ConcurrentLinkedQueue的HOPS(延迟更新的策略)的设计?")]),t._v(" "),v("li",[t._v("ConcurrentLinkedQueue适合什么样的使用场景?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-collection-BlockingQueue.html"}},[t._v("JUC集合: BlockingQueue详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是BlockingDeque?")]),t._v(" "),v("li",[t._v("BlockingQueue大家族有哪些? ArrayBlockingQueue, DelayQueue, LinkedBlockingQueue, SynchronousQueue...")]),t._v(" "),v("li",[t._v("BlockingQueue适合用在什么样的场景?")]),t._v(" "),v("li",[t._v("BlockingQueue常用的方法?")]),t._v(" "),v("li",[t._v("BlockingQueue插入方法有哪些? 这些方法("),v("code",[t._v("add(o)")]),t._v(","),v("code",[t._v("offer(o)")]),t._v(","),v("code",[t._v("put(o)")]),t._v(","),v("code",[t._v("offer(o, timeout, timeunit)")]),t._v(")的区别是什么?")]),t._v(" "),v("li",[t._v("BlockingDeque 与BlockingQueue有何关系，请对比下它们的方法?")]),t._v(" "),v("li",[t._v("BlockingDeque适合用在什么样的场景?")]),t._v(" "),v("li",[t._v("BlockingDeque大家族有哪些?")]),t._v(" "),v("li",[t._v("BlockingDeque 与BlockingQueue实现例子?")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B.4 Java进阶 - Java 并发之J.U.C框架【4/5】：线程池")]),t._v("：再者分析JUC中非常常用的线程池等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-executor-FutureTask.html"}},[t._v("JUC线程池: FutureTask详解")]),t._v(" "),v("ul",[v("li",[t._v("FutureTask用来解决什么问题的? 为什么会出现?")]),t._v(" "),v("li",[t._v("FutureTask类结构关系怎么样的?")]),t._v(" "),v("li",[t._v("FutureTask的线程安全是由什么保证的?")]),t._v(" "),v("li",[t._v("FutureTask结果返回机制?")]),t._v(" "),v("li",[t._v("FutureTask内部运行状态的转变?")]),t._v(" "),v("li",[t._v("FutureTask通常会怎么用? 举例说明。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-executor-ThreadPoolExecutor.html"}},[t._v("JUC线程池: ThreadPoolExecutor详解")]),t._v(" "),v("ul",[v("li",[t._v("为什么要有线程池?")]),t._v(" "),v("li",[t._v("Java是实现和管理线程池有哪些方式?  请简单举例如何使用。")]),t._v(" "),v("li",[t._v("为什么很多公司不允许使用Executors去创建线程池? 那么推荐怎么使用呢?")]),t._v(" "),v("li",[t._v("ThreadPoolExecutor有哪些核心的配置参数? 请简要说明")]),t._v(" "),v("li",[t._v("ThreadPoolExecutor可以创建哪是哪三种线程池呢?")]),t._v(" "),v("li",[t._v("当队列满了并且worker的数量达到maxSize的时候，会怎么样?")]),t._v(" "),v("li",[t._v("说说ThreadPoolExecutor有哪些RejectedExecutionHandler策略? 默认是什么策略?")]),t._v(" "),v("li",[t._v("简要说下线程池的任务执行机制? execute –> addWorker –>runworker (getTask)")]),t._v(" "),v("li",[t._v("线程池中任务是如何提交的?")]),t._v(" "),v("li",[t._v("线程池中任务是如何关闭的?")]),t._v(" "),v("li",[t._v("在配置线程池的时候需要考虑哪些配置因素?")]),t._v(" "),v("li",[t._v("如何监控线程池的状态?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-executor-ScheduledThreadPoolExecutor.html"}},[t._v("JUC线程池: ScheduledThreadPool详解")]),t._v(" "),v("ul",[v("li",[t._v("ScheduledThreadPoolExecutor要解决什么样的问题?")]),t._v(" "),v("li",[t._v("ScheduledThreadPoolExecutor相比ThreadPoolExecutor有哪些特性?")]),t._v(" "),v("li",[t._v("ScheduledThreadPoolExecutor有什么样的数据结构，核心内部类和抽象类?")]),t._v(" "),v("li",[t._v("ScheduledThreadPoolExecutor有哪两个关闭策略? 区别是什么?")]),t._v(" "),v("li",[t._v("ScheduledThreadPoolExecutor中scheduleAtFixedRate 和 scheduleWithFixedDelay区别是什么?")]),t._v(" "),v("li",[t._v("为什么ThreadPoolExecutor 的调整策略却不适用于 ScheduledThreadPoolExecutor?")]),t._v(" "),v("li",[t._v("Executors 提供了几种方法来构造 ScheduledThreadPoolExecutor?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-executor-ForkJoinPool.html"}},[t._v("JUC线程池: Fork/Join框架详解")]),t._v(" "),v("ul",[v("li",[t._v("Fork/Join主要用来解决什么样的问题?")]),t._v(" "),v("li",[t._v("Fork/Join框架是在哪个JDK版本中引入的?")]),t._v(" "),v("li",[t._v("Fork/Join框架主要包含哪三个模块? 模块之间的关系是怎么样的?")]),t._v(" "),v("li",[t._v("ForkJoinPool类继承关系?")]),t._v(" "),v("li",[t._v("ForkJoinTask抽象类继承关系? 在实际运用中，我们一般都会继承 RecursiveTask 、RecursiveAction 或 CountedCompleter 来实现我们的业务需求，而不会直接继承 ForkJoinTask 类。")]),t._v(" "),v("li",[t._v("整个Fork/Join 框架的执行流程/运行机制是怎么样的?")]),t._v(" "),v("li",[t._v("具体阐述Fork/Join的分治思想和work-stealing 实现方式?")]),t._v(" "),v("li",[t._v("有哪些JDK源码中使用了Fork/Join思想?")]),t._v(" "),v("li",[t._v("如何使用Executors工具类创建ForkJoinPool?")]),t._v(" "),v("li",[t._v("写一个例子: 用ForkJoin方式实现1+2+3+...+100000?")]),t._v(" "),v("li",[t._v("Fork/Join在使用时有哪些注意事项? 结合JDK中的斐波那契数列实例具体说明。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B.5 Java进阶 - Java 并发之J.U.C框架【5/5】：工具类")]),t._v("：最后来看下JUC中有哪些工具类，以及线程隔离术ThreadLocal。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-tool-countdownlatch.html"}},[t._v("JUC工具类: CountDownLatch详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是CountDownLatch?")]),t._v(" "),v("li",[t._v("CountDownLatch底层实现原理?")]),t._v(" "),v("li",[t._v("CountDownLatch一次可以唤醒几个任务? 多个")]),t._v(" "),v("li",[t._v("CountDownLatch有哪些主要方法? await(),countDown()")]),t._v(" "),v("li",[t._v("CountDownLatch适用于什么场景?")]),t._v(" "),v("li",[t._v("写道题：实现一个容器，提供两个方法，add，size 写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束? 使用CountDownLatch 代替wait notify 好处。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-tool-cyclicbarrier.html"}},[t._v("JUC工具类: CyclicBarrier详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是CyclicBarrier?")]),t._v(" "),v("li",[t._v("CyclicBarrier底层实现原理?")]),t._v(" "),v("li",[t._v("CountDownLatch和CyclicBarrier对比?")]),t._v(" "),v("li",[t._v("CyclicBarrier的核心函数有哪些?")]),t._v(" "),v("li",[t._v("CyclicBarrier适用于什么场景?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-tool-semaphore.html"}},[t._v("JUC工具类: Semaphore详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是Semaphore?")]),t._v(" "),v("li",[t._v("Semaphore内部原理?")]),t._v(" "),v("li",[t._v("Semaphore常用方法有哪些? 如何实现线程同步和互斥的?")]),t._v(" "),v("li",[t._v("Semaphore适合用在什么场景?")]),t._v(" "),v("li",[t._v("单独使用Semaphore是不会使用到AQS的条件队列?")]),t._v(" "),v("li",[t._v("Semaphore中申请令牌(acquire)、释放令牌(release)的实现?")]),t._v(" "),v("li",[t._v("Semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?")]),t._v(" "),v("li",[t._v("Semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?")]),t._v(" "),v("li",[t._v("Semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?")]),t._v(" "),v("li",[t._v("Semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-tool-phaser.html"}},[t._v("JUC工具类: Phaser详解")]),t._v(" "),v("ul",[v("li",[t._v("Phaser主要用来解决什么问题?")]),t._v(" "),v("li",[t._v("Phaser与CyclicBarrier和CountDownLatch的区别是什么?")]),t._v(" "),v("li",[t._v("如果用CountDownLatch来实现Phaser的功能应该怎么实现?")]),t._v(" "),v("li",[t._v("Phaser运行机制是什么样的?")]),t._v(" "),v("li",[t._v("给一个Phaser使用的示例?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-tool-exchanger.html"}},[t._v("JUC工具类: Exchanger详解")]),t._v(" "),v("ul",[v("li",[t._v("Exchanger主要解决什么问题?")]),t._v(" "),v("li",[t._v("对比SynchronousQueue，为什么说Exchanger可被视为 SynchronousQueue 的双向形式?")]),t._v(" "),v("li",[t._v("Exchanger在不同的JDK版本中实现有什么差别?")]),t._v(" "),v("li",[t._v("Exchanger实现机制?")]),t._v(" "),v("li",[t._v("Exchanger已经有了slot单节点，为什么会加入arena node数组? 什么时候会用到数组?")]),t._v(" "),v("li",[t._v("arena可以确保不同的slot在arena中是不会相冲突的，那么是怎么保证的呢?")]),t._v(" "),v("li",[t._v("什么是伪共享，Exchanger中如何体现的?")]),t._v(" "),v("li",[t._v("Exchanger实现举例")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-threadlocal.html"}},[t._v("Java 并发 - ThreadLocal详解")]),t._v(" "),v("ul",[v("li",[t._v("什么是ThreadLocal? 用来解决什么问题的?")]),t._v(" "),v("li",[t._v("说说你对ThreadLocal的理解")]),t._v(" "),v("li",[t._v("ThreadLocal是如何实现线程隔离的?")]),t._v(" "),v("li",[t._v("为什么ThreadLocal会造成内存泄露? 如何解决")]),t._v(" "),v("li",[t._v("还有哪些使用ThreadLocal的应用场景?")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. Java进阶 - Java 并发之 本质与模式")]),t._v("：最后站在更高的角度看其本质(协作，分工和互斥)，同时总结上述知识点所使用的模式。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-essence.html"}},[t._v("TODO：Java 并发 - 并发的本质：协作,分工和互斥")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-pattern.html"}},[t._v("TODO：Java 并发 - 并发的模式梳理")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java进阶---io框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java进阶---io框架"}},[t._v("¶")]),t._v(" Java进阶 - IO框架")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/io/java-io-overview.jpg",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. Java进阶 - IO框架之知识体系")]),t._v("：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-overview.html"}},[t._v("Java IO/NIO/AIO - Overview")]),t._v(" "),v("ul",[v("li",[t._v("本文主要梳理Java IO/NIO/AIO的知识体系")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. Java进阶 - IO框架之基础IO")]),t._v("：其次对Java基础IO框架进行梳理，包括其分类，使用和源码详解。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-basic-category.html"}},[t._v("Java IO - 分类(传输，操作)")]),t._v(" "),v("ul",[v("li",[t._v("本文主要从"),v("code",[t._v("传输方式")]),t._v("和"),v("code",[t._v("数据操作")]),t._v("两个方面分析Java IO的分类")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-basic-design-pattern.html"}},[t._v("Java IO - 设计模式(装饰者模式)")]),t._v(" "),v("ul",[v("li",[t._v("Java I/O 使用了装饰者模式来实现")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-basic-code-inputstream.html"}},[t._v("Java IO - 源码: InputStream")]),t._v(" "),v("ul",[v("li",[t._v("本文主要从JDK源码角度分析InputStream")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-basic-code-outputstream.html"}},[t._v("Java IO - 源码: OutputStream")]),t._v(" "),v("ul",[v("li",[t._v("本文主要从JDK源码角度分析 OutputStream")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-basic-usage.html"}},[t._v("Java IO - 常见类使用")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. Java进阶 - IO框架之NIO/AIO等")]),t._v("：然后再对Unix IO模型学习，引入到Java BIO/NIO/AIO相关知识详解。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-model.html"}},[t._v("IO 模型 - Unix IO 模型")]),t._v(" "),v("ul",[v("li",[t._v("本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-bio.html"}},[t._v("Java IO - BIO 详解")]),t._v(" "),v("ul",[v("li",[t._v("BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-nio.html"}},[t._v("Java NIO - 基础详解")]),t._v(" "),v("ul",[v("li",[t._v("新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-nio-select-epoll.html"}},[t._v("Java NIO - IO多路复用详解")]),t._v(" "),v("ul",[v("li",[t._v("本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-aio.html"}},[t._v("Java AIO - 异步IO详解")]),t._v(" "),v("ul",[v("li",[t._v("本文主要对异步IO和Java中对AIO的支持详解。@pdai")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. Java进阶 - IO框架之开源框架")]),t._v("：最后再对常用的开源框架进行分析和详解。@pdai")])]),t._v(" "),v("ul",[v("li",[v("p",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-nio-zerocopy.html"}},[t._v("Java NIO - 零拷贝实现")]),t._v("这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。")],1)]),t._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/md/java/io/java-io-nio-netty.html"}},[t._v("Java N(A)IO - 框架: Netty")])],1),t._v(" "),v("ul",[v("li",[t._v("Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等")])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java-8-新特性解读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-8-新特性解读"}},[t._v("¶")]),t._v(" Java 8 新特性解读")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java8-overview.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. Java进阶 - Java 8 新特性知识点")]),t._v("：JDK1.6和JDK1.8是两个大的版本，目前主流使用的是JDK1.8, 所以有必要系统的学习下Java 8相关的知识点。@pdai")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8.html"}},[t._v("Java 8 - 新特性汇总")]),t._v(" "),v("ul",[v("li",[t._v("Java 新特性的增加都是来源于哪里?")]),t._v(" "),v("li",[t._v("简要说说Java8包含了哪些新的特性?")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. Java进阶 - Java 8 新特性解读之 常用核心特性")]),t._v("：主要包含：函数编程(lambda表达式)，Optional类，默认方法，类型注解，重复注解，LocalDateTime等等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-stream.html"}},[t._v("Java 8 - 函数编程(lambda表达式)")]),t._v(" "),v("ul",[v("li",[t._v("Lambda 表达式的特点?")]),t._v(" "),v("li",[t._v("Lambda 表达式使用和Stream下的接口?")]),t._v(" "),v("li",[t._v("函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.")]),t._v(" "),v("li",[t._v("Comparator排序为例贯穿所有知识点。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-optional.html"}},[t._v("Java 8 - Optional类深度解析")]),t._v(" "),v("ul",[v("li",[t._v("Optional类的意义?")]),t._v(" "),v("li",[t._v("Optional类有哪些常用的方法?")]),t._v(" "),v("li",[t._v("Optional举例贯穿所有知识点")]),t._v(" "),v("li",[t._v("如何解决多重类嵌套Null值判断?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-default.html"}},[t._v("Java 8 - 默认方法")]),t._v(" "),v("ul",[v("li",[t._v("为什么会出现默认方法?")]),t._v(" "),v("li",[t._v("接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?")]),t._v(" "),v("li",[t._v("多重实现的默认方法冲突怎么办?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-type-anno.html"}},[t._v("Java 8 - 类型注解")]),t._v(" "),v("ul",[v("li",[t._v("注解在JDK哪个版本中出现的，可以在哪些地方用注解?")]),t._v(" "),v("li",[t._v("什么是类型注解?")]),t._v(" "),v("li",[t._v("类型注解的作用是什么?")]),t._v(" "),v("li",[t._v("为什么会出现类型注解(JSR308)?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-anno-repeat.html"}},[t._v("Java 8 - 重复注解")]),t._v(" "),v("ul",[v("li",[t._v("Java8之前对重复注解是怎么做的?")]),t._v(" "),v("li",[t._v("Java8对重复注解添加了什么支持?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-type.html"}},[t._v("Java 8 - 类型推断优化")]),t._v(" "),v("ul",[v("li",[t._v("什么是泛型?")]),t._v(" "),v("li",[t._v("Java7对泛型推断做了哪些优化?")]),t._v(" "),v("li",[t._v("Java8对此有做了哪些优化?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-localdatetime.html"}},[t._v("Java 8 - LocalDate/LocalDateTime")]),t._v(" "),v("ul",[v("li",[t._v("Java8之前的Date有哪些槽点? (Calendar的所有属性都是可变的，SimpleDateFormat的线程不安全性等)")]),t._v(" "),v("li",[t._v("Java8之前使用哪些常用的第三方时间库?")]),t._v(" "),v("li",[t._v("Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?")]),t._v(" "),v("li",[t._v("其它语言时间库?")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. Java进阶 - Java 8 新特性解读之 其它知识点")]),t._v("：主要包含：JRE精简，Permgen删除及增加MetaSpace，StampedLock，JavaFx2.0等等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-jre.html"}},[t._v("Java 8 - JRE精简")]),t._v(" "),v("ul",[v("li",[t._v("为什么精简Java8 JRE，及好处是啥?")]),t._v(" "),v("li",[t._v("紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是?")]),t._v(" "),v("li",[t._v("在不同平台上如何编译等?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-permgen.html"}},[t._v("Java 8 - 移除Permgen")]),t._v(" "),v("ul",[v("li",[t._v("Java8之前 “java.lang.OutOfMemoryError: PermGen space”是怎么引起的，怎么解决的?")]),t._v(" "),v("li",[t._v("新增加的元空间(Metaspace)包含哪些东西，画出图?")]),t._v(" "),v("li",[t._v("元空间(Metaspace)和PermGen对比?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-stampedlock.html"}},[t._v("Java 8 - StampedLock")]),t._v(" "),v("ul",[v("li",[t._v("为什么会引入StampedLock?")]),t._v(" "),v("li",[t._v("用Lock写悲观锁和乐观锁举例?")]),t._v(" "),v("li",[t._v("用StampedLock写悲观锁和乐观锁举例?")]),t._v(" "),v("li",[t._v("性能对比?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-javafx.html"}},[t._v("Java 8 - JavaFx 2.0")]),t._v(" "),v("ul",[v("li",[t._v("JavaFX发展历程?")]),t._v(" "),v("li",[t._v("Java8对其增加了哪些特性?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/java8/java8-others.html"}},[t._v("Java 8 - 其它更新: 字符串，base64,...")]),t._v(" "),v("ul",[v("li",[t._v("Java8 还有哪些其它更新?")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java-9-新特性详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-9-新特性详解"}},[t._v("¶")]),t._v(" Java 9 新特性详解")]),t._v(" "),v("blockquote",[v("p",[t._v("Java 9 正式发布于 2017 年 9 月 21 日。作为 Java8 之后 3 年半才发布的新版本，Java 9 带来了很多重大的变化。其中最重要的改动是 Java 平台模块系统的引入。除此之外，还有一些新的特性。本文对 Java9 中包含的新特性做了概括性的介绍，可以帮助你快速了解 Java 9。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-9.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 9 新特性概述"),v("OutboundLink")],1),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#java-%E5%B9%B3%E5%8F%B0-%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 平台 模块系统"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#jshell",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jshell"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E9%9B%86%E5%90%88stream-%E5%92%8C-optional",target:"_blank",rel:"noopener noreferrer"}},[t._v("集合、Stream 和 Optional"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E8%BF%9B%E7%A8%8B-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程 API"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E5%B9%B3%E5%8F%B0%E6%97%A5%E5%BF%97-api-%E5%92%8C-%E6%9C%8D%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("平台日志 API 和 服务"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E5%8F%8D%E5%BA%94%E5%BC%8F%E6%B5%81--reactive-streams-",target:"_blank",rel:"noopener noreferrer"}},[t._v("反应式流 （ Reactive Streams ）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E5%8F%98%E9%87%8F%E5%8F%A5%E6%9F%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("变量句柄"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E5%B9%B6%E5%8F%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("并发"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#nashorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nashorn"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#io-%E6%B5%81%E6%96%B0%E7%89%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("I/O 流新特性"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E6%94%B9%E8%BF%9B%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%80%A7%E8%83%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("改进应用安全性能"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("用户界面"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E7%BB%9F%E4%B8%80-jvm-%E6%97%A5%E5%BF%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("统一 JVM 日志"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E5%85%B6%E4%BB%96%E6%94%B9%E5%8A%A8%E6%96%B9%E9%9D%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("其他改动方面"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E7%BB%93%E6%9D%9F%E8%AF%AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("结束语"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java9.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),v("OutboundLink")],1)])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java-10-新特性概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-10-新特性概述"}},[t._v("¶")]),t._v(" Java 10 新特性概述")]),t._v(" "),v("blockquote",[v("p",[t._v("作为当今使用最广泛的编程语言之一的 Java 在 2018 年 3 月 21 日发布了第十个大版本。为了更快地迭代、更好地跟进社区反馈，Java 语言版本发布周期调整为每隔 6 个月发布一次。Java 10 是这一新规则之后，采用新发布周期的第一个大版本。Java 10 版本带来了很多新特性，其中最备受广大开发者关注的莫过于局部变量类型推断。除此之外，还有其他包括垃圾收集器改善、GC 改进、性能提升、线程管控等一批新特性。本文主要针对 Java 10 中的新特性展开介绍，希望读者能从本文的介绍中快速了解 Java 10 带来的变化。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-10.jpg",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 10 新特性概述"),v("OutboundLink")],1),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("局部变量类型推断"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E6%95%B4%E5%90%88-jdk-%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("整合 JDK 代码仓库"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E7%BB%9F%E4%B8%80%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"}},[t._v("统一的垃圾回收接口"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%B9%B6%E8%A1%8C%E5%85%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-g1",target:"_blank",rel:"noopener noreferrer"}},[t._v("并行全垃圾回收器 G1"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("应用程序类数据共享"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E7%BA%BF%E7%A8%8B-%E5%B1%80%E9%83%A8%E7%AE%A1%E6%8E%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("线程-局部管控"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E7%A7%BB%E9%99%A4-native-header-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("移除 Native-Header 自动生成工具"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E9%A2%9D%E5%A4%96%E7%9A%84-unicode-%E8%AF%AD%E8%A8%80%E6%A0%87%E7%AD%BE%E6%89%A9%E5%B1%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("额外的 Unicode 语言标签扩展"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%A4%87%E7%94%A8%E5%AD%98%E5%82%A8%E8%A3%85%E7%BD%AE%E4%B8%8A%E7%9A%84%E5%A0%86%E5%88%86%E9%85%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("备用存储装置上的堆分配"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%9F%BA%E4%BA%8E-java-%E7%9A%84-%E5%AE%9E%E9%AA%8C%E6%80%A7-jit-%E7%BC%96%E8%AF%91%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于 Java 的 实验性 JIT 编译器"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E6%A0%B9%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("根证书认证"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于时间的版本发布模式"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E7%BB%93%E6%9D%9F%E8%AF%AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("结束语"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java10.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),v("OutboundLink")],1)])])])]),t._v(" "),v("h3",{attrs:{id:"java-11-新特性概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-11-新特性概述"}},[t._v("¶")]),t._v(" Java 11 新特性概述")]),t._v(" "),v("blockquote",[v("p",[t._v("Java 11 已于 2018 年 9 月 25 日正式发布，之前在 Java 10 新特性介绍 中介绍过，为了加快的版本迭代、跟进社区反馈，Java 的版本发布周期调整为每六个月一次——即每半年发布一个大版本，每个季度发布一个中间特性版本，并且做出不会跳票的承诺。通过这样的方式，Java 开发团队能够将一些重要特性尽早的合并到 Java Release 版本中，以便快速得到开发者的反馈，避免出现类似 Java 9 发布时的两次延期的情况。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-11.jpg",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 11 新特性概述"),v("OutboundLink")],1),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E5%9F%BA%E4%BA%8E%E5%B5%8C%E5%A5%97%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于嵌套的访问控制"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E6%A0%87%E5%87%86-http-client-%E5%8D%87%E7%BA%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("标准 HTTP Client 升级"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#epsilon%E4%BD%8E%E5%BC%80%E9%94%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epsilon：低开销垃圾回收器"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E7%AE%80%E5%8C%96%E5%90%AF%E5%8A%A8%E5%8D%95%E4%B8%AA%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("简化启动单个源代码文件的方法"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E7%94%A8%E4%BA%8E-lambda-%E5%8F%82%E6%95%B0%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%AF%AD%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("用于 Lambda 参数的局部变量语法"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E4%BD%8E%E5%BC%80%E9%94%80%E7%9A%84-heap-profiling",target:"_blank",rel:"noopener noreferrer"}},[t._v("低开销的 Heap Profiling"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E6%94%AF%E6%8C%81-tls-13-%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("支持 TLS 1.3 协议"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#zgc%E5%8F%AF%E4%BC%B8%E7%BC%A9%E4%BD%8E%E5%BB%B6%E8%BF%9F%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZGC：可伸缩低延迟垃圾收集器"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E9%A3%9E%E8%A1%8C%E8%AE%B0%E5%BD%95%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("飞行记录器"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E5%8A%A8%E6%80%81%E7%B1%BB%E6%96%87%E4%BB%B6%E5%B8%B8%E9%87%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("动态类文件常量"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E7%BB%93%E6%9D%9F%E8%AF%AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("结束语"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java11.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),v("OutboundLink")],1)])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java-13-新特性概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-13-新特性概述"}},[t._v("¶")]),t._v(" Java 13 新特性概述")]),t._v(" "),v("blockquote",[v("p",[t._v("Java 13 已如期于 9 月 17 日正式发布，此次更新是继半年前 Java 12 这大版本发布之后的一次常规版本更新，在这一版中，主要带来了 ZGC 增强、更新 Socket 实现、Switch 表达式更新等方面的改动、增强。本文主要针对 Java 13 中主要的新特性展开介绍，带你快速了解 Java 13 带来的不同体验。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-13.jpg",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#java-13-%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 13 新特性概述"),v("OutboundLink")],1),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#%E5%8A%A8%E6%80%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("动态应用程序类-数据共享"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#%E5%A2%9E%E5%BC%BA-zgc-%E9%87%8A%E6%94%BE%E6%9C%AA%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("增强 ZGC 释放未使用内存"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#socket-api-%E9%87%8D%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("Socket API 重构"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#switch-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%A9%E5%B1%95%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("Switch 表达式扩展（预览功能）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#%E6%96%87%E6%9C%AC%E5%9D%97%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("文本块（预览功能）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#%E7%BB%93%E6%9D%9F%E8%AF%AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("结束语"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java13.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),v("OutboundLink")],1)])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java-14-新特性概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-14-新特性概述"}},[t._v("¶")]),t._v(" Java 14 新特性概述")]),t._v(" "),v("blockquote",[v("p",[t._v("Java 14 已如期于 2020 年 3 月 17 日正式发布，此次更新是继半年前 Java 13 这大版本发布之后的又一次常规版本更新，即便在全球疫情如此严峻形势下，依然保持每六个月的版本更新频率，为大家及时带来改进和增强，这一点值得点赞。在这一版中，主要带来了 ZGC 增强、instanceof 增强、Switch 表达式更新为标准版等方面的改动、增强和新功能。本文主要介绍 Java 14 中的主要新特性，带您快速了解 Java 14 带来了哪些不一样的体验和便利。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-14.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#java-14-%E6%96%B0%E7%89%B9%E6%80%A7%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 14 新特性概述"),v("OutboundLink")],1),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#instanceof-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E9%A2%84%E8%A7%88%E9%98%B6%E6%AE%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("instanceof 模式匹配（预览阶段）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#g1-%E7%9A%84-numa-%E5%8F%AF%E8%AF%86%E5%88%AB%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("G1 的 NUMA 可识别内存分配"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#record-%E7%B1%BB%E5%9E%8B%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("Record 类型（预览功能）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#switch-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%AD%A3%E5%BC%8F%E7%89%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("Switch 表达式（正式版）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#%E5%88%A0%E9%99%A4-cms-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("删除 CMS 垃圾回收器"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#zgc-%E6%94%AF%E6%8C%81-macos-%E5%92%8C-windows-%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E9%98%B6%E6%AE%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZGC 支持 MacOS 和 Windows 系统（实验阶段）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#%E5%BC%83%E7%94%A8-parallelscavenge-%E5%92%8C-serialold-gc-%E7%9A%84%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("弃用 ParallelScavenge 和 SerialOld GC 的组合使用"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#%E6%96%87%E6%9C%AC%E5%9D%97%E7%AC%AC%E4%BA%8C%E9%A2%84%E8%A7%88%E7%89%88%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("文本块（第二预览版本）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#%E7%BB%93%E6%9D%9F%E8%AF%AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("结束语"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java14.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),v("OutboundLink")],1)])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java-15-新特性概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-15-新特性概述"}},[t._v("¶")]),t._v(" Java 15 新特性概述")]),t._v(" "),v("blockquote",[v("p",[t._v("JDK 15 在 2020 年 9 月 15 号正式发布了！根据发布的规划，这次发布的 JDK 15 将是一个短期的过度版，只会被 Oracle 支持（维护）6 个月，直到明年 3 月的 JDK 16 发布此版本将停止维护。而 Oracle 下一个长期支持版（LTS 版）会在明年的 9 月份候发布（Java 17），LTS 版每 3 年发布一个，上一次长期支持版是 18 年 9 月发布的 JDK 11。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/java/java-15.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 15 新特性概述"),v("OutboundLink")],1),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#edwards-curve-%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95-eddsa",target:"_blank",rel:"noopener noreferrer"}},[t._v("Edwards-Curve 数字签名算法 (EdDSA)"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E5%AF%86%E5%B0%81%E7%9A%84%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E9%A2%84%E8%A7%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("密封的类和接口（预览）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E9%9A%90%E8%97%8F%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[t._v("隐藏类"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E7%A7%BB%E9%99%A4nashorn-javascript%E5%BC%95%E6%93%8E",target:"_blank",rel:"noopener noreferrer"}},[t._v("移除Nashorn JavaScript引擎"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0-datagramsocket-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("重新实现 DatagramSocket API"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E7%A6%81%E7%94%A8%E5%81%8F%E5%90%91%E9%94%81%E5%AE%9A",target:"_blank",rel:"noopener noreferrer"}},[t._v("禁用偏向锁定"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#instanceof-%E8%87%AA%E5%8A%A8%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("instanceof 自动匹配模式"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8zgc-%E5%8F%AF%E4%BC%B8%E7%BC%A9%E4%BD%8E%E5%BB%B6%E8%BF%9F%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("垃圾回收器ZGC: 可伸缩低延迟垃圾收集器"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E6%96%87%E6%9C%AC%E5%9D%97text-blocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("文本块(Text Blocks)"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E4%BD%8E%E6%9A%82%E5%81%9C%E6%97%B6%E9%97%B4%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8-%E8%BD%AC%E6%AD%A3",target:"_blank",rel:"noopener noreferrer"}},[t._v("低暂停时间垃圾收集器 转正"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E7%A7%BB%E9%99%A4%E4%BA%86-solaris-%E5%92%8C-sparc-%E7%AB%AF%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"}},[t._v("移除了 Solaris 和 SPARC 端口。"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8%E8%AE%BF%E9%97%AE-api%E5%AD%B5%E5%8C%96%E5%99%A8%E7%89%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("外部存储器访问 API（孵化器版）"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#records-%E4%BA%8C%E6%AC%A1%E9%A2%84%E8%A7%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("Records (二次预览)"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E5%BA%9F%E9%99%A4-rmi-%E6%BF%80%E6%B4%BB",target:"_blank",rel:"noopener noreferrer"}},[t._v("废除 RMI 激活"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://pdai.tech/md/java/java8up/java15.html#%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("总结"),v("OutboundLink")],1)])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"java进阶---jvm相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java进阶---jvm相关"}},[t._v("¶")]),t._v(" Java进阶 - JVM相关")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/jvm/jvm-overview.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("学习思路")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/jvm/java-jvm-overview.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. Java进阶 - JVM相关 知识体系")]),t._v("： 首先按照上述"),v("code",[t._v("学习思路")]),t._v("，理解总体知识点在全局上与知识体系之间的对应关系。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-x-overview.html"}},[t._v("JVM 相关知识体系")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. Java进阶 - JVM相关 类加载")]),t._v("： 然后理解类字节码和类的加载机制。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-class.html"}},[t._v("JVM基础 - 类字节码详解")]),t._v(" "),v("ul",[v("li",[t._v("源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-classload.html"}},[t._v("JVM基础 - Java 类加载机制")]),t._v(" "),v("ul",[v("li",[t._v("这篇文章将带你深入理解Java 类加载机制")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. Java进阶 - JVM相关 内存结构")]),t._v("： 因为类字节码是加载到JVM内存结构中的，所以紧接着理解JVM内存结构。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-struct.html"}},[t._v("JVM基础 - JVM内存结构")]),t._v(" "),v("ul",[v("li",[t._v("本文主要对JVM 内存结构进行讲解，注意不要和Java内存模型混淆了")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. Java进阶 - JVM相关 JMM")]),t._v("： 然后通过理解JVM与硬件之间的联系，理解Java 通过其内存模型保证数据线程安全等，这是JVM在并发上底层的支持。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-x-introduce.html"}},[t._v("JVM基础 - Java 内存模型引入")]),t._v(" "),v("ul",[v("li",[t._v("很多人都Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面"),v("code",[t._v("JMM详解")]),t._v(", "),v("code",[t._v("JVM 内存结构详解")]),t._v(", "),v("code",[t._v("Java 对象模型详解")]),t._v("等铺垫。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-jmm.html"}},[t._v("JVM基础 - Java 内存模型详解")]),t._v(" "),v("ul",[v("li",[t._v("本文主要转载自 Info 上"),v("a",{attrs:{href:"https://www.infoq.cn/article/java_memory_model/",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解Java内存模型"),v("OutboundLink")],1),t._v(", 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("E. Java进阶 - JVM相关 GC")]),t._v("： 再者理解下Java GC机制，如何回收内存等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-gc.html"}},[t._v("JVM基础 - Java 垃圾收集")]),t._v(" "),v("ul",[v("li",[t._v("垃圾收集主要是针对堆和方法区进行")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("F. Java进阶 - JVM相关 排错调优")]),t._v("： 最后围绕着调试和排错，分析理解JVM调优参数，动态字节码技术及动态在线调试的原理；学会使用常用的调工具和在线动态调试工具等。")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/jvm/java-jvm-debug.png",loading:"lazy"}})]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-param.html"}},[t._v("调试排错 - JVM 调优参数")]),t._v(" "),v("ul",[v("li",[t._v("本文对JVM涉及的常见的调优参数和垃圾回收参数进行阐述")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-oom.html"}},[t._v("调试排错 - Java OOM 分析")]),t._v(" "),v("ul",[v("li",[t._v("本文以两个简单的例子("),v("code",[t._v("堆内存溢出")]),t._v("和"),v("code",[t._v("MetaSpace (元数据) 内存溢出")]),t._v("）解释Java 内存溢出的分析过程")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-debug-tools-linux.html"}},[t._v("调试排错 - Java问题排查：Linux命令")]),t._v(" "),v("ul",[v("li",[t._v("Java 在线问题排查主要分两篇：本文是第一篇，通过linux常用命令排查")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-debug-tools-list.html"}},[t._v("调试排错 - Java问题排查：工具单")]),t._v(" "),v("ul",[v("li",[t._v("Java 在线问题排查主要分两篇：本文是第二篇，通过java调试/排查工具进行问题定位")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-cms-gc.html"}},[t._v("调试排错 - 9种常见的CMS GC问题分析与解决")]),t._v(" "),v("ul",[v("li",[t._v("本文整理自"),v("a",{attrs:{href:"https://tech.meituan.com/2020/11/12/java-9-cms-gc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("美团技术团队"),v("OutboundLink")],1),t._v(", 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-agent-usage.html"}},[t._v("调试排错 - Java动态调试技术原理")]),t._v(" "),v("ul",[v("li",[t._v("本文转载自 美团技术团队胡健的"),v("a",{attrs:{href:"https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 动态调试技术原理及实践"),v("OutboundLink")],1),t._v(", 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-agent-arthas.html"}},[t._v("调试排错 - Java应用在线调试Arthas")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经1.7万个点赞了，深受开发者喜爱。具体解决在线问题，比如：")]),t._v(" "),v("li",[t._v("这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?")]),t._v(" "),v("li",[t._v("我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?")]),t._v(" "),v("li",[t._v("遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?")]),t._v(" "),v("li",[t._v("线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！")]),t._v(" "),v("li",[t._v("是否有一个全局视角来查看系统的运行状况?")]),t._v(" "),v("li",[t._v("有什么办法可以监控到JVM的实时运行状态?")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/java/jvm/java-jvm-debug-idea.html"}},[t._v("调试排错 - 使用IDEA本地调试和远程调试")]),t._v(" "),v("ul",[v("li",[t._v("Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化；并且在实际的排错过程中，还会用到Remote Debug。IDEA 相比 Eclipse/STS效率更高，本文主要介绍基于IDEA的Debug和Remote Debug的技巧。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"数据结构与算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[t._v("¶")]),t._v(" 数据结构与算法")]),t._v(" "),v("h3",{attrs:{id:"数据结构基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构基础"}},[t._v("¶")]),t._v(" 数据结构基础")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/alg/alg-overview-x.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("学习思路")])]),t._v(" "),v("blockquote",[v("p",[t._v("避免孤立的学习知识点，要关联学习。比如实际应用当中，我们经常使用的是"),v("code",[t._v("查找")]),t._v("和"),v("code",[t._v("排序")]),t._v("操作，这在我们的各种管理系统、数据库系统、操作系统等当中，十分常用，我们通过这个线索将知识点串联起来：")])]),t._v(" "),v("p",[v("code",[t._v("数组")]),t._v("的下标寻址十分迅速，但计算机的内存是有限的，故数组的长度也是有限的，实际应用当中的数据往往十分庞大；而且无序数组的查找最坏情况需要遍历整个数组；后来人们提出了二分查找，二分查找要求数组的构造一定有序，二分法查找解决了普通数组查找复杂度过高的问题。任何一种数组无法解决的问题就是插入、删除操作比较复杂，因此，在一个增删查改比较频繁的数据结构中，数组不会被优先考虑")]),t._v(" "),v("p",[v("code",[t._v("普通链表")]),t._v("由于它的结构特点被证明根本不适合进行查找")]),t._v(" "),v("p",[v("code",[t._v("哈希表")]),t._v("是数组和链表的折中，同时它的设计依赖散列函数的设计，数组不能无限长、链表也不适合查找，所以也适合大规模的查找")]),t._v(" "),v("p",[v("code",[t._v("二叉查找树")]),t._v("因为可能退化成链表，同样不适合进行查找")]),t._v(" "),v("p",[v("code",[t._v("AVL树")]),t._v("是为了解决可能退化成链表问题，但是AVL树的旋转过程非常麻烦，因此插入和删除很慢，也就是构建AVL树比较麻烦")]),t._v(" "),v("p",[v("code",[t._v("红黑树")]),t._v("是平衡二叉树和AVL树的折中，因此是比较合适的。集合类中的Map、关联数组具有较高的查询效率，它们的底层实现就是红黑树。")]),t._v(" "),v("p",[v("code",[t._v("多路查找树")]),t._v(" 是大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的(如果元素数量非常多的话，查找就退化成节点内部的线性查找了)，这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下。")]),t._v(" "),v("p",[v("code",[t._v("B树")]),t._v("与自平衡二叉查找树不同，B树适用于读写相对大的数据块的存储系统，例如磁盘。它的应用是文件系统及部分非关系型数据库索引。")]),t._v(" "),v("p",[v("code",[t._v("B+树")]),t._v("在B树基础上，为叶子结点增加链表指针(B树+叶子有序链表)，所有关键字都在叶子结点 中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中。通常用于关系型数据库(如Mysql)和操作系统的文件系统中。")]),t._v(" "),v("p",[v("code",[t._v("B*树")]),t._v("是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针, 在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3。")]),t._v(" "),v("p",[v("code",[t._v("R树")]),t._v("是用来做空间数据存储的树状数据结构。例如给地理位置，矩形和多边形这类多维数据建立索引。")]),t._v(" "),v("p",[v("code",[t._v("Trie树")]),t._v("是自然语言处理中最常用的数据结构，很多字符串处理任务都会用到。Trie树本身是一种有限状态自动机，还有很多变体。什么模式匹配、正则表达式，都与这有关。")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 数据结构 知识点")]),t._v("：数据结构是基础中的基础，任何进阶都逃不开这些知识点。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-overview.html"}},[t._v("数据结构 - Overview")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. 数据结构之 线性结构")]),t._v("：首先理解数据结构中线性结构及其延伸：数组和矩阵，链表，栈和队列等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-array.html"}},[t._v("线性表 - 数组和矩阵")]),t._v(" "),v("ul",[v("li",[t._v("数组是一种连续存储线性结构，元素类型相同，大小相等，数组是多维的，通过使用整型索引值来访问他们的元素，数组尺寸不能改变")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-linklist.html"}},[t._v("线性表 - 链表")]),t._v(" "),v("ul",[v("li",[t._v("n个节点离散分配，彼此通过指针相连，每个节点只有一个前驱节点，每个节点只有一个后续节点，首节点没有前驱节点，尾节点没有后续节点。确定一个链表我们只需要头指针，通过头指针就可以把整个链表都能推出来")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-hashtable.html"}},[t._v("线性表(散列) - 哈希表")]),t._v(" "),v("ul",[v("li",[t._v("散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。@pdai")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-stack_queue.html"}},[t._v("线性表 - 栈和队列")]),t._v(" "),v("ul",[v("li",[t._v("数组和链表都是线性存储结构的基础，栈和队列都是线性存储结构的应用")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. 数据结构之 逻辑结构：树")]),t._v("：然后理解数据结构中逻辑结构之树：二叉搜索树(BST)，平衡二叉树(AVL)，红黑树(R-B Tree)，哈夫曼树，前缀树(Trie)等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-tree.html"}},[t._v("树 - 基础和Overview")]),t._v(" "),v("ul",[v("li",[t._v("树在数据结构中至关重要，这里展示树的整体知识体系结构和几种常见树类型")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-tree-search.html"}},[t._v("树 - 二叉搜索树(BST)")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍 二叉树中最基本的二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-tree-balance.html"}},[t._v("树 - 平衡二叉树(AVL)")]),t._v(" "),v("ul",[v("li",[t._v("平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-tree-redblack.html"}},[t._v("树 - 红黑树(R-B Tree)")]),t._v(" "),v("ul",[v("li",[t._v("红黑树（Red Black Tree） 是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组，是平衡二叉树和AVL树的折中。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-tree-hafman.html"}},[t._v("树 - 哈夫曼树")]),t._v(" "),v("ul",[v("li",[t._v("哈夫曼又称最优二叉树, 是一种带权路径长度最短的二叉树。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-tree-trie.html"}},[t._v("树 - 前缀树(Trie)")]),t._v(" "),v("ul",[v("li",[t._v("Trie，又称字典树、单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. 数据结构之 逻辑结构：图")]),t._v("：最后理解数据结构中逻辑结构之图：图基础，图的遍历，最小生成树(Prim & Kruskal)，最短路径(Dijkstra & Frolyd)，拓扑排序(Topological sort)，AOE & 关键路径等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-graph.html"}},[t._v("图 - 基础和Overview")]),t._v(" "),v("ul",[v("li",[t._v("图(Graph)是由顶点和连接顶点的边构成的离散结构。在计算机科学中，图是最灵活的数据结构之一，很多问题都可以使用图模型进行建模求解。例如: 生态环境中不同物种的相互竞争、人与人之间的社交与关系网络、化学上用图区分结构不同但分子式相同的同分异构体、分析计算机网络的拓扑结构确定两台计算机是否可以通信、找到两个城市之间的最短路径等等。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-graph-bfs-dfs.html"}},[t._v("图 - 遍历(BFS & DFS)")]),t._v(" "),v("ul",[v("li",[t._v('图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似; 广度优先搜索算法(Breadth First Search)，又称为"宽度优先搜索"或"横向优先搜索"')])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-graph-min-tree.html"}},[t._v("图 - 最小生成树(Prim & Kruskal)")]),t._v(" "),v("ul",[v("li",[t._v("Kruskal算法是从最小权重边着手，将森林里的树逐渐合并；prim算法是从顶点出发，在根结点的基础上建起一棵树")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-graph-min-distance.html"}},[t._v("图 - 最短路径(Dijkstra & Frolyd)")]),t._v(" "),v("ul",[v("li",[t._v("最短路径有着广泛的应用，比如地图两点间距离计算，公交查询系统，路由选择等")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-graph-topo-sort.html"}},[t._v("图 - 拓扑排序(Topological sort)")]),t._v(" "),v("ul",[v("li",[t._v("拓扑排序主要用来解决有向图中的依赖解析(dependency resolution)问题")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-basic-graph-aoe.html"}},[t._v("图 - AOE & 关键路径")]),t._v(" "),v("ul",[v("li",[t._v("关键路径在项目管理计算工期等方面有广泛等应用，提升工期就是所见缩减所有关键路径上的工期，并且在实现时需要应用到之前拓扑排序的算法(前提: 有向无环图，有依赖关系)")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"排序算法详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排序算法详解"}},[t._v("¶")]),t._v(" 排序算法详解")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/alg/alg-sort-overview-1.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 常见排序概要")]),t._v("：重点理解几个排序之间的对比，时间和空间复杂度，以及应用。PS：越简单越要提高认知效率，做到战略上藐视战术上重视。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-overview.html"}},[t._v("排序 - Overview")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. 常见排序详解")]),t._v("：具体分析各种排序及其复杂度，查漏补缺；在综合复杂度及稳定性情况下，通常"),v("code",[t._v("希尔")]),t._v(", "),v("code",[t._v("快排")]),t._v("和 "),v("code",[t._v("归并")]),t._v("需要重点掌握。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-bubble.html"}},[t._v("排序 - 冒泡排序(Bubble Sort)")]),t._v(" "),v("ul",[v("li",[t._v("它是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复此操作，直到整个数列都有序为止")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-fast.html"}},[t._v("排序 - 快速排序(Quick Sort)")]),t._v(" "),v("ul",[v("li",[t._v("它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-insert.html"}},[t._v("排序 - 插入排序(Insertion Sort)")]),t._v(" "),v("ul",[v("li",[t._v("直接插入排序(Straight Insertion Sort)的基本思想是: 把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-shell.html"}},[t._v("排序 - Shell排序(Shell Sort)")]),t._v(" "),v("ul",[v("li",[t._v("希尔排序实质上是一种分组插入方法。它的基本思想是: 对于n个待排序的数列，取一个小于n的整数gap(gap被称为步长)将待排序元素分成若干个组子序列，所有距离为gap的倍数的记录放在同一个组中；然后，对各组内的元素进行直接插入排序。 这一趟排序完成之后，每一个组的元素都是有序的。然后减小gap的值，并重复执行上述的分组和排序。重复这样的操作，当gap=1时，整个数列就是有序的。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-select.html"}},[t._v("排序 - 选择排序(Selection sort)")]),t._v(" "),v("ul",[v("li",[t._v("它的基本思想是: 首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-heap.html"}},[t._v("排序 - 堆排序(Heap Sort)")]),t._v(" "),v("ul",[v("li",[t._v("堆排序是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-merge.html"}},[t._v("排序 - 归并排序(Merge Sort)")]),t._v(" "),v("ul",[v("li",[t._v('将两个的有序数列合并成一个有序数列，我们称之为"归并"。归并排序(Merge Sort)就是利用归并思想对数列进行排序。')])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-bucket.html"}},[t._v("排序 - 桶排序(Bucket Sort)")]),t._v(" "),v("ul",[v("li",[t._v("桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-sort-x-radix.html"}},[t._v("排序 - 基数排序(Radix Sort)")]),t._v(" "),v("ul",[v("li",[t._v("它的基本思想是: 将整数按位数切割成不同的数字，然后按每个位数分别比较。具体做法是: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"算法思想详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法思想详解"}},[t._v("¶")]),t._v(" 算法思想详解")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 算法思想 详解")]),t._v("：紧接着我们通过理解算法背后常用的算法思想，进行归纳总结，并通过leetcode练习来辅助理解和提升。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-core-divide-and-conquer.html"}},[t._v("算法思想 - 分治算法")]),t._v(" "),v("ul",[v("li",[t._v("分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-core-dynamic.html"}},[t._v("算法思想 - 动态规划算法")]),t._v(" "),v("ul",[v("li",[t._v("动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-core-greedy.html"}},[t._v("算法思想 - 贪心算法")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-core-devide-two.html"}},[t._v("算法思想 - 二分法")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-core-search.html"}},[t._v("算法思想 - 搜索算法")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍算法中搜索算法的思想，主要包含BFS，DFS")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-core-backtracking.html"}},[t._v("算法思想 - 回溯算法")]),t._v(" "),v("ul",[v("li",[t._v("Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"领域算法详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#领域算法详解"}},[t._v("¶")]),t._v(" 领域算法详解")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/alg/alg-domain-2.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 领域算法 梳理知识点")]),t._v("：在了解基础算法之后，我们还要学习和了解在不同专业领域有哪些特有的算法。这里不一定要求复杂度，而是要有知识面以及解决问题的思路。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-overview.html"}},[t._v("一些领域算法 - Overview")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. 领域算法之 安全算法")]),t._v("：主要包括摘要算法和加密算法两大类。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-security-degist.html"}},[t._v("安全算法 - 摘要算法")]),t._v(" "),v("ul",[v("li",[t._v("消息摘要算法的主要特征是加密过程不需要密钥，并且经过加密的数据无法被解密，目前可以解密逆向的只有CRC32算法，只有输入相同的明文数据经过相同的消息摘要算法才能得到相同的密文。消息摘要算法不存在密钥的管理与分发问题，适合于分布式网络上使用。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-security-secure.html"}},[t._v("安全算法 - 加密算法")]),t._v(" "),v("ul",[v("li",[t._v("数据加密的基本过程就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码为“密文”，使其只能在输入相应的密钥之后才能显示出原容，通过这样的途径来达到保护数据不被非法人窃取、阅读的目的。 该过程的逆过程为解密，即将该编码信息转化为其原来数据的过程")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-security-sm.html"}},[t._v("安全算法 - 国密算法")]),t._v(" "),v("ul",[v("li",[t._v("国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4，SM7, SM9。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. 领域算法之 字符串匹配算法")]),t._v("：字符串匹配(String Matchiing)也称字符串搜索(String Searching)是字符串算法中重要的一种，是指从一个大字符串或文本中找到模式串出现的位置。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-char-match-bf.html"}},[t._v("朴素的字符串匹配算法（Naive String Matching Algorithm)")]),t._v(" "),v("ul",[v("li",[t._v("朴素的字符串匹配算法又称为"),v("strong",[t._v("暴力匹配算法")]),t._v("（Brute Force Algorithm），最为简单的字符串匹配算法")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-char-match-kmp.html"}},[t._v("Knuth-Morris-Pratt 字符串匹配算法（即 KMP 算法）")]),t._v(" "),v("ul",[v("li",[t._v("Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-char-match-bm.html"}},[t._v("Boyer-Moore 字符串匹配算法")]),t._v(" "),v("ul",[v("li",[t._v('各种文本编辑器的"查找"功能（Ctrl+F），大多采用Boyer-Moore算法，效率非常高')])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-char-match-st.html"}},[t._v("字符串匹配 - 文本预处理：后缀树（Suffix Tree）")]),t._v(" "),v("ul",[v("li",[t._v("上述字符串匹配算法(朴素的字符串匹配算法, KMP 算法, Boyer-Moore算法)均是通过对"),v("strong",[t._v("模式（Pattern）字符串进行预处理")]),t._v("的方式来加快搜索速度。对 Pattern 进行预处理的最优复杂度为 O(m)，其中 m 为 Pattern 字符串的长度。那么，有没有对文本（Text）进行预处理的算法呢？本文即将介绍一种"),v("strong",[t._v("对 Text 进行预处理")]),t._v("的字符串匹配算法：后缀树（Suffix Tree）")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. 领域算法之 大数据处理")]),t._v("：这里其实想让大家理解的是大数据处理的常用思路，而不是算法本身。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-overview.html"}},[t._v("大数据处理 - Overview")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍大数据处理的一些思路")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-devide-and-hash.html"}},[t._v("大数据处理 - 分治/hash/排序")]),t._v(" "),v("ul",[v("li",[t._v("就是先映射，而后统计，最后排序:")]),t._v(" "),v("li",[v("code",[t._v("分而治之/hash映射")]),t._v(": 针对数据太大，内存受限，只能是: 把大文件化成(取模映射)小文件，即16字方针: 大而化小，各个击破，缩小规模，逐个解决")]),t._v(" "),v("li",[v("code",[t._v("hash_map统计")]),t._v(": 当大文件转化了小文件，那么我们便可以采用常规的hash_map(ip，value)来进行频率统计。")]),t._v(" "),v("li",[v("code",[t._v("堆/快速排序")]),t._v(": 统计完了之后，便进行排序(可采取堆排序)，得到次数最多的IP。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-bloom-filter.html"}},[t._v("大数据处理 - Bitmap & Bloom Filter")]),t._v(" "),v("ul",[v("li",[t._v("布隆过滤器有着广泛的应用，对于大量数据的“存不存在”的问题在空间上有明显优势，但是在判断存不存在是有一定的错误率(false positive)，也就是说，有可能把不属于这个集合的元素误认为属于这个集合(False Positive)，但不会把属于这个集合的元素误认为不属于这个集合(False Negative)")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-bucket.html"}},[t._v("大数据处理 - 双层桶划分")]),t._v(" "),v("ul",[v("li",[t._v("其实本质上还是分而治之的思想，重在“分”的技巧上！"),v("code",[t._v("适用范围")]),t._v(": 第k大，中位数，不重复或重复的数字；"),v("code",[t._v("基本原理及要点")]),t._v(": 因为元素范围很大，不能利用直接寻址表，所以通过多次划分，逐步确定范围，然后最后在一个可以接受的范围内进行。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-db-index.html"}},[t._v("大数据处理 - Trie树/数据库/倒排索引")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("适用范围")]),t._v(": 数据量大，重复多，但是数据种类小可以放入内存；"),v("code",[t._v("基本原理及要点")]),t._v(": 实现方式，节点孩子的表示方式；"),v("code",[t._v("扩展")]),t._v(": 压缩实现")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-outsort.html"}},[t._v("大数据处理 - 外排序")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("适用范围")]),t._v(": 大数据的排序，去重；"),v("code",[t._v("基本原理及要点")]),t._v(": 外排序的归并方法，置换选择败者树原理，最优归并树")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-bigdata-map-reduce.html"}},[t._v("大数据处理 - Map & Reduce")]),t._v(" "),v("ul",[v("li",[t._v("MapReduce是一种计算模型，简单的说就是将大批量的工作(数据)分解(MAP)执行，然后再将结果合并成最终结果(REDUCE)。这样做的好处是可以在任务被分解后，可以通过大量机器进行并行计算，减少整个操作的时间。但如果你要我再通俗点介绍，那么，说白了，Mapreduce的原理就是一个归并排序")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("E. 领域算法之 分布式算法")]),t._v("：接着向大家介绍分布式算法，包括一致性Hash算法，经典的Paxos算法，Raft算法，ZAB算法等；顺便也介绍了经典用于全局ID生成的Snowflake算法。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-distribute-overview.html"}},[t._v("分布式算法 - Overview")]),t._v(" "),v("ul",[v("li",[t._v("本文总结下常见的分布式算法")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-distribute-x-consistency-hash.html"}},[t._v("分布式算法 - 一致性Hash算法")]),t._v(" "),v("ul",[v("li",[t._v("一致性Hash算法是个经典算法，Hash环的引入是为解决"),v("code",[t._v("单调性(Monotonicity)")]),t._v("的问题；虚拟节点的引入是为了解决"),v("code",[t._v("平衡性(Balance)")]),t._v("问题")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-distribute-x-paxos.html"}},[t._v("分布式算法 - Paxos算法")]),t._v(" "),v("ul",[v("li",[t._v("Paxos算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法，使其获得2013年图灵奖。自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性, 很多分布式一致性算法都由Paxos演变而来")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-distribute-x-raft.html"}},[t._v("分布式算法 - Raft算法")]),t._v(" "),v("ul",[v("li",[t._v("Paxos是出了名的难懂，而Raft正是为了探索一种更易于理解的一致性算法而产生的。它的首要设计目的就是易于理解，所以在选主的冲突处理等方式上它都选择了非常简单明了的解决方案")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-distribute-x-zab.html"}},[t._v("分布式算法 - ZAB算法")]),t._v(" "),v("ul",[v("li",[t._v("ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）, 它应该是所有一致性协议中生产环境中应用最多的了。为什么呢？因为他是为 Zookeeper 设计的分布式一致性协议！")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-id-snowflake.html"}},[t._v("分布式算法 - Snowflake算法")]),t._v(" "),v("ul",[v("li",[t._v("Snowflake，雪花算法是由Twitter开源的分布式ID生成算法，以划分命名空间的方式将 64-bit位分割成多个部分，每个部分代表不同的含义。这种就是将64位划分为不同的段，每段代表不同的涵义，基本就是时间戳、机器ID和序列数。为什么如此重要？因为它提供了一种ID生成及生成的思路，当然这种方案就是需要考虑时钟回拨的问题以及做一些 buffer的缓冲设计提高性能。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("F. 领域算法之 其它算法汇总")]),t._v("：最后概要性的了解常见的其它算法：负载均衡算法，推荐算法，数据挖掘或机器学习算法。因为有其专业性，一般总体上了解就够了。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-load-balance.html"}},[t._v("负载均衡算法 - 汇总")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍常用的负载均衡算法和Nginx中支持的负载均衡算法：轮询法(Round Robin)，加权轮询法(Weight Round Robin)，平滑加权轮询法(Smooth Weight Round Robin)，随机法(Random)，加权随机法(Weight Random)，源地址哈希法(Hash)，最小连接数法(Least Connections)")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-suggest.html"}},[t._v("推荐算法 - 汇总")]),t._v(" "),v("ul",[v("li",[t._v("本文主要对推荐算法整体知识点做汇总，做到总体的理解；深入理解需要再看专业的材料")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/algorithm/alg-domain-machine.html"}},[t._v("数据挖掘 - 10大算法汇总")]),t._v(" "),v("ul",[v("li",[t._v("国际权威的学术组织the IEEE International Conference on Data Mining (ICDM) 2006年12月评选出了数据挖掘领域的十大经典算法: C4.5, k-Means, SVM, Apriori, EM, PageRank, AdaBoost, kNN, Naive Bayes, and CART")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"数据库理论与实践"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库理论与实践"}},[t._v("¶")]),t._v(" 数据库理论与实践")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/db/db.png",loading:"lazy"}})]),t._v(" "),v("h3",{attrs:{id:"数据库基础与理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库基础与理论"}},[t._v("¶")]),t._v(" 数据库基础与理论")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 了解数据库基础和理论知识")]),t._v("：在学习数据库之前，不要一上来就是SQL语句；这里建议从数据结构开始切入到数据库，然后再理解数据库是如何工作的，紧接着理解数据库系统的原理知识点和相关知识体系。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/sql/sql-db.html"}},[t._v("SQL DB - 资料汇总")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql/sql-db-howitworks.html"}},[t._v("SQL DB - 关系型数据库是如何工作的")]),t._v(" "),v("ul",[v("li",[t._v("很多人在学习数据时都是孤立的学习知识点，这样是很难将所有知识点串起来深入理解；强烈推荐你学习两篇文章："),v("a",{attrs:{href:"https://dsf.berkeley.edu/papers/fntdb07-architecture.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Architecture of a Database System"),v("OutboundLink")],1),t._v("以及"),v("a",{attrs:{href:"http://coding-geek.com/how-databases-work",target:"_blank",rel:"noopener noreferrer"}},[t._v("How does a relational database work"),v("OutboundLink")],1),t._v("；本文主要在第二篇基础上翻译并梳理，如果你英文不好的话，你可以通过本文帮助你构筑数据库体系的基础")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql/sql-db-theory-concept.html"}},[t._v("SQL DB - 关系型数据库设计理论")]),t._v(" "),v("ul",[v("li",[t._v("在上文了解数据库如何工作后，本节介绍如何将一个"),v("strong",[t._v("关系模型")]),t._v("（基于表的数据模型）合理的转化为"),v("strong",[t._v("数据表")]),t._v("和"),v("strong",[t._v("关系表")]),t._v("，以及确定"),v("strong",[t._v("主外健")]),t._v("的。这便是数据库设计理论基础，包括术语，函数依赖，范式等理论基础")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql/sql-db-theory-design.html"}},[t._v("SQL DB - 关系型数据库设计流程")]),t._v(" "),v("ul",[v("li",[t._v("在上文知道如何设计表和健后，让我们再看看整个的"),v("strong",[t._v("数据库设计的标准流程")]),t._v("吧，主要包括"),v("code",[t._v("需求分析")]),t._v(", "),v("code",[t._v("概念结构设计")]),t._v(", "),v("code",[t._v("逻辑结构设计")]),t._v(" , "),v("code",[t._v("物理设计")]),t._v(", "),v("code",[t._v("实施阶段")]),t._v("和"),v("code",[t._v("运行和维护阶段")]),t._v("这6个阶段")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql/sql-db-theory.html"}},[t._v("SQL DB - 数据库系统核心知识点")]),t._v(" "),v("ul",[v("li",[t._v("基于上篇数据库如何工作的基础之上，我们再来梳理下数据库系统中有哪些重要的知识点，包括：事务，并发一致性，封锁，隔离级别，多版本并发控制等")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"sql语言基础和进阶"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql语言基础和进阶"}},[t._v("¶")]),t._v(" SQL语言基础和进阶")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. 完全掌握SQL语言")]),t._v("：在了解数据库基础之后，如下章节将重点阐述SQL语言相关的知识；主要顺序是：SQL语法->SQL语句练习->SQL题目进阶->SQL语句优化建议等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-lan/sql-lan.html"}},[t._v("SQL语言 - SQL语法基础")]),t._v(" "),v("ul",[v("li",[t._v("本文包含了所有SQL语言的基础语法，并用例子的方式向你展示")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-lan/sql-lan-pratice.html"}},[t._v("SQL语言 - SQL语句练习")]),t._v(" "),v("ul",[v("li",[t._v("在上文学习了SQL的基本语法以后，本文将通过最经典的“教师-学生-成绩”表来帮助你练习SQL。@pdai")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-lan/sql-lan-leetcode.html"}},[t._v("SQL语言 - SQL题目进阶")]),t._v(" "),v("ul",[v("li",[t._v("接下来，通过Leetcode上的SQL题目进行进阶吧")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-lan/sql-lan-optimize.html"}},[t._v("SQL语言 - SQL语句优化")]),t._v(" "),v("ul",[v("li",[t._v("最后，再总结一些SQL语句的优化建议")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"sql-db---mysql数据库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql-db---mysql数据库"}},[t._v("¶")]),t._v(" SQL DB - MySQL数据库")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. 掌握MySQL数据库")]),t._v("：在理解了SQL语言后，开始进阶MySQL相关的知识点吧（在开始前，建议你完整看一本MySQl相关的书，作为你的知识体系基础）；这里不会讲如何安装MySQL或者如何使用，因为这是容易的，而是会关注一些有助于我们构建MySQL相关知识体系的知识点等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-theory.html"}},[t._v("MySQL - 数据类型")]),t._v(" "),v("ul",[v("li",[t._v("本文主要整理MySQL中数据字段类型。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-engine.html"}},[t._v("MySQL - 存储引擎")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍MySQL中的存储引擎。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-b-tree.html"}},[t._v("MySQL - 索引(B+树)")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-performance.html"}},[t._v("MySQL - 性能优化")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-devide.html"}},[t._v("MySQL - 分表分库")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-slave.html"}},[t._v("MySQL - 主从复制与读写分离")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/sql-mysql/sql-mysql-execute.html"}},[t._v("MySQL - 一条 SQL 的执行过程详解")]),t._v(" "),v("ul",[v("li",[t._v("一条 SQL 的执行过程详解。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"nosql-db---redis详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nosql-db---redis详解"}},[t._v("¶")]),t._v(" NoSQL DB - Redis详解")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. 掌握Redis数据库")]),t._v("：在理解了关系型数据库后，开始进阶最为常用的KV库Redis，一些大厂都在使用，面试也必问。")])]),t._v(" "),v("p",[v("em",[t._v("知识体系")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/db/redis/db-redis-overview.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[t._v("首先，我们通过学习Redis的概念基础，了解它适用的场景。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-introduce.html"}},[t._v("Redis入门 - Redis概念和基础")]),t._v(" "),v("ul",[v("li",[t._v("Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。")])])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("其次，这些适用场景都是基于Redis支持的数据类型的，所以我们需要学习它支持的数据类型；同时在redis优化中还需要对底层数据结构了解，所以也需要了解一些底层数据结构的设计和实现。")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/db/redis/db-redis-object-2-2.png",loading:"lazy"}})]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-data-types.html"}},[t._v("Redis入门 - 数据类型：5种基础数据类型详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis所有的key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的5种数据类型，分别是：String、List、Set、Zset、Hash")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-data-type-special.html"}},[t._v("Redis入门 - 数据类型：3种特殊类型详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis除了上文中5种基础数据类型，还有三种特殊的数据类型，分别是 HyperLogLogs（基数统计）， Bitmaps (位图) 和 geospatial （地理位置）")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-data-type-stream.html"}},[t._v("Redis入门 - 数据类型：Stream详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis5.0 中还增加了一个数据结构Stream，它借鉴了Kafka的设计，是一个新的强大的支持多播的可持久化的消息队列。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-redis-object.html"}},[t._v("Redis进阶 - 底层数据结构：对象机制详解")]),t._v(" "),v("ul",[v("li",[t._v("我们在前文已经阐述了"),v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-data-types.html"}},[t._v("Redis 5种基础数据类型详解")]),t._v("，分别是字符串(string)、列表(list)、哈希(hash)、集合(set)、有序集合(zset)，以及5.0版本中"),v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-data-type-stream.html"}},[t._v("Redis Stream结构详解")]),t._v("；那么这些基础类型的底层是如何实现的呢？Redis的每种对象其实都由"),v("strong",[t._v("对象结构(redisObject)")]),t._v(" 与 "),v("strong",[t._v("对应编码的数据结构")]),t._v("组合而成, 本文主要介绍"),v("strong",[t._v("对象结构(redisObject)")]),t._v(" 部分。。")],1)])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-redis-ds.html"}},[t._v("Redis进阶 - 底层数据结构：底层数据结构详解")]),t._v(" "),v("ul",[v("li",[t._v("前文是第一部分底层设计：对象机制详解, 本文主要介绍底层数据结构 部分。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-data-type-enc.html"}},[t._v("Redis进阶 - 底层数据结构：redis对象与编码(底层结构)对应关系详解")]),t._v(" "),v("ul",[v("li",[t._v("在学习完"),v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-redis-ds.html"}},[t._v("底层数据结构")]),t._v("之后，我们终于可以结合前文内容阐述redis对象及编码之间的关系了。")],1)])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("再者，需要学习Redis支持的核心功能，包括持久化，消息，事务，高可用；高可用方面包括，主从，哨兵等；高可拓展方面，比如 分片机制等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-rdb-aof.html"}},[t._v("Redis进阶 - 持久化：RDB和AOF机制详解")]),t._v(" "),v("ul",[v("li",[t._v("为了防止数据丢失以及服务重启时能够恢复数据，Redis支持数据的持久化，主要分为两种方式，分别是RDB和AOF; 当然实际场景下还会使用这两种的混合模式。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-pub-sub.html"}},[t._v("Redis进阶 - 消息传递：发布订阅模式详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-event.html"}},[t._v("Redis进阶 - 事件：Redis事件机制详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis 采用事件驱动机制来处理大量的网络IO。它并没有使用 libevent 或者 libev 这样的成熟开源方案，而是自己实现一个非常简洁的事件驱动库 ae_event。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-trans.html"}},[t._v("Redis进阶 - 事务：Redis事务详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-copy.html"}},[t._v("Redis进阶 - 高可用：主从复制详解")]),t._v(" "),v("ul",[v("li",[t._v("我们知道要避免单点故障，即保证高可用，便需要冗余（副本）方式提供集群服务。而Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分离的方式。本文主要阐述Redis的主从复制。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-sentinel.html"}},[t._v("Redis进阶 - 高可用：哨兵机制（Redis Sentinel）详解")]),t._v(" "),v("ul",[v("li",[t._v("在上文主从复制的基础上，如果注节点出现故障该怎么办呢？ 在 Redis 主从集群中，哨兵机制是实现主从库自动切换的关键机制，它有效地解决了主从复制模式下故障转移的问题。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-cluster.html"}},[t._v("Redis进阶 - 高可拓展：分片技术（Redis Cluster）详解")]),t._v(" "),v("ul",[v("li",[t._v("前面两篇文章，主从复制和哨兵机制保障了高可用，就读写分离而言虽然slave节点来扩展主从的读并发能力，但是写能力和存储能力是无法进行扩展的，就只能是master节点能够承载的上限。如果面对海量数据那么必然需要构建master（主节点分片)之间的集群，同时必然需要吸收高可用（主从复制和哨兵机制）能力，即每个master分片节点还需要有slave节点，这是分布式系统中典型的纵向扩展（集群的分片技术）的体现；所以在Redis 3.0版本中对应的设计就是Redis Cluster。")])])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("最后，就是具体的实践以及实践中遇到的问题和解决方法了：在不同版本中有不同特性，所以还需要了解版本；以及性能优化，大厂实践等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-cache.html"}},[t._v("Redis进阶 - 缓存问题：一致性, 穿击, 穿透, 雪崩, 污染等")]),t._v(" "),v("ul",[v("li",[t._v("Redis最常用的一个场景就是作为缓存，本文主要探讨作为缓存，在实践中可能会有哪些问题？比如一致性, 穿击, 穿透, 雪崩, 污染等")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-version-lastest.html"}},[t._v("Redis进阶 - 版本特性: Redis4.0、5.0、6.0特性整理")]),t._v(" "),v("ul",[v("li",[t._v("在学习Redis知识体系时，我们难免会需要查看版本实现之间的差异，本文主要整理Redis较为新的版本的特性。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-y-monitor.html"}},[t._v("Redis进阶 - 运维监控：Redis的监控详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis实战中包含开发，集群 和 运维，Redis用的好不好，如何让它更好，这是运维要做的；本文主要在 "),v("strong",[t._v("Redis自身状态及命令")]),t._v("，"),v("strong",[t._v("可视化监控工具")]),t._v("，以及"),v("strong",[t._v("Redis监控体系")]),t._v("等方面帮助你构建对redis运维/监控体系的认知，它是性能优化的前提。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-x-performance.html"}},[t._v("Redis进阶 - 性能调优：Redis性能调优详解")]),t._v(" "),v("ul",[v("li",[t._v("Redis 的性能问题，涉及到的知识点非常广，几乎涵盖了 CPU、内存、网络、甚至磁盘的方方面面；同时还需要对上文中一些基础或底层有详细的了解。针对Redis的性能调优，这里整理分享一篇水滴与银弹（公众号）的文章，这篇文章可以帮助你构筑Redis性能调优的知识体系。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-redis/db-redis-y-weibo.html"}},[t._v("Redis大厂经验 - 微博：万亿级日访问量下，Redis在微博的9年优化历程")]),t._v(" "),v("ul",[v("li",[t._v("再分享一篇微博使用redis的经验的文章，因为Redis在微博内部分布在各个应用场景，比如像现在春晚必争的“红包飞”活动，还有像粉丝数、用户数、阅读数、转评赞、评论盖楼、广告推荐、负反馈、音乐榜单等等都有用到Redis；我们可以通过大厂使用redis的经验来强化对redis使用上的认知。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"nosql-db---mongodb详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nosql-db---mongodb详解"}},[t._v("¶")]),t._v(" NoSQL DB - MongoDB详解")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("E. 掌握MongoDB数据库")]),t._v("：在理解了Redis后，让我们认识NoSQL数据库中最为常用的MongoDB；它在后期版本中更换了证书，使用时需要注意下；但是不妨碍我们学习。")])]),t._v(" "),v("p",[v("em",[t._v("MongoDB学习引入")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/db/mongo/mongo-x-basic-0.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("MongoDB生态")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/db/mongo/mongo-y-echo-11.png",loading:"lazy"}})]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("1. MongoDB引入和生态介绍")]),t._v("： 首先了解NoSQL基本的概念以及MongoDB基础概念，进而引入MongoDB的生态。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-basic.html"}},[t._v("Mongo入门 - MongoDB基础概念")]),t._v(" "),v("ul",[v("li",[t._v("在学习MongoDB之前先简单了解相关概念。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-ecosystem.html"}},[t._v("Mongo入门 - MongoDB整体生态")]),t._v(" "),v("ul",[v("li",[t._v("很多人在学习Mongo时仅仅围绕着数据库功能，围绕着CRUD和聚合操作，但是MongoDB其实已经基本形成了它自身的生态了。我们在学习一项技能时一定要跳出使用的本身，要从高一点的格局上了解整个生态，这样会对你构筑知识体系有很大的帮助。。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("2. MongoDB入门 - 基本使用")]),t._v("： 开始学习MongoDB安装，使用等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-usage-1.html"}},[t._v("Mongo入门 - 基本使用：安装和CRUD")]),t._v(" "),v("ul",[v("li",[t._v("在理解MongoDB基础概念后，本文将介绍MongoDB的安装和最基本的CURD操作。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-usage-2.html"}},[t._v("Mongo入门 - 基本使用：索引和聚合")]),t._v(" "),v("ul",[v("li",[t._v("在了解MongoDB的基本CRUD操作后，常用的其它操作还有对字段的索引以及对字段的聚合操作。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-usage-3.html"}},[t._v("Mongo入门 - 基本使用：效率工具")]),t._v(" "),v("ul",[v("li",[t._v("本文将主要介绍常用的MongoDB的工具，这些工具可以极大程度的提升你的效率。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-usage-4.html"}},[t._v("Mongo入门 - 基本使用：Java 低阶API")]),t._v(" "),v("ul",[v("li",[t._v("本文为低优先级，只是向你介绍下MongoDB提供的原生的JavaAPI；而大多数公司使用Spring框架，会使用Spring Data对MongoDB原生API的封装，比如JPA，MongoTemplate等。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-x-usage-5.html"}},[t._v("Mongo入门 - 基本使用：Spring Data + Mongo")]),t._v(" "),v("ul",[v("li",[t._v("本文为主要介绍Spring Data对MongoDB原生API的封装，比如JPA，MongoTemplate等。以及原生API和Spring data系列之间的关系。")])])],1)]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/db/mongo/mongo-x-usage-spring-5.png",loading:"lazy"}})]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("3. MongoDB进阶 - 原理和WiredTigger存储引擎")]),t._v("： 在学习完常用的基础之后，我们再看下MongoDB的原理和WiredTigger存储引擎。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-y-arch.html"}},[t._v("Mongo进阶 - MongoDB体系结构")]),t._v(" "),v("ul",[v("li",[t._v("上面章节已经对MongoDB生态中工具以及使用有了基础，后续文章我们将开始理解MongoDB是如何支撑这些功能的。我们将从最基本的MongoDB的体系结构开始介绍，主要包括"),v("code",[t._v("MongoDB的包结构")]),t._v("，"),v("code",[t._v("MongoDB的数据逻辑结构")]),t._v("，"),v("code",[t._v("MongoDB的数据文件结构")]),t._v("。其中围绕着MongoDB的数据文件结构，将为我们后续介绍MongoDB的存储引擎详解打下基础。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-y-introduce.html"}},[t._v("Mongo进阶 - 原理和WiredTiger引擎")]),t._v(" "),v("ul",[v("li",[t._v("开始初步了解MongoDB实现原理和WiredTiger引擎。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-y-ds.html"}},[t._v("Mongo进阶 - WT引擎：数据结构")]),t._v(" "),v("ul",[v("li",[t._v("MongoDB的WiredTiger存储引擎背后采用了什么样的数据结构呢？本文将从"),v("code",[t._v("常见引擎数据结构")]),t._v("，"),v("code",[t._v("典型B-Tree数据结构")]),t._v("，"),v("code",[t._v("磁盘数据结构")]),t._v(", "),v("code",[t._v("内存数据结构")]),t._v(", "),v("code",[t._v("Page数据结构")]),t._v("等方面详解介绍。。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-y-page.html"}},[t._v("Mongo进阶 - WT引擎：Page生命周期")]),t._v(" "),v("ul",[v("li",[t._v("通过前文我们了解到数据以page为单位加载到cache; 有必要系统的分析一页page的生命周期、状态以及相关参数的配置，这对后续MongoDB的性能调优和故障问题的定位和解决有帮助。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-y-checkpoint.html"}},[t._v("Mongo进阶 - WT引擎：checkpoint原理")]),t._v(" "),v("ul",[v("li",[t._v("Checkpoint主要有两个目的: 一是将内存里面发生修改的数据写到数据文件进行持久化保存，确保数据一致性；二是实现数据库在某个时刻意外发生故障，再次启动时，缩短数据库的恢复时间，WiredTiger存储引擎中的Checkpoint模块就是来实现这个功能的。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("4. MongoDB进阶 - 数据库核心知识点")]),t._v("： 再者我们还学要进一步学习MongoDB的核心知识点。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-z-index.html"}},[t._v("Mongo进阶 - DB核心：索引实现")]),t._v(" "),v("ul",[v("li",[t._v("数据库核心知识点之索引")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-z-rep.html"}},[t._v("Mongo进阶 - DB核心：复制集")]),t._v(" "),v("ul",[v("li",[t._v("数据库核心知识点之复制集")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-z-sharding.html"}},[t._v("Mongo进阶 - DB核心：分片Sharding")]),t._v(" "),v("ul",[v("li",[t._v("数据库核心知识点之复分片Sharding")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-z-backup.html"}},[t._v("Mongo进阶 - DB核心：备份恢复")]),t._v(" "),v("ul",[v("li",[t._v("数据库核心知识点之备份恢复")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("5. MongoDB进阶 - 数据模型设计")]),t._v("： 在真正使用中，需要知道如何设计数据模型。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-performance-model.html"}},[t._v("Mongo进阶 - 系统设计：数据模型")]),t._v(" "),v("ul",[v("li",[t._v("MongoDB使用文档数据模型。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-y-doc.html"}},[t._v("Mongo进阶 - 系统设计：模式构建")]),t._v(" "),v("ul",[v("li",[t._v("MongoDB使用文档数据模型具有内在的灵活性，允许数据模型支持你的应用程序需求, 灵活性也可能导致模式比它们应有样子的更复杂。这涉及到如何在MongoDB中设计数据库模式（schema），有一个严峻的现实，大多数性能问题都可以追溯到糟糕的模式设计。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("6. MongoDB进阶 - 性能优化")]),t._v("： 最后基于上述知识点，我们再了解下常见的性能优化的方式。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-mongo/mongo-performance-improve.html"}},[t._v("Mongo进阶 - 性能：查询聚合优化")]),t._v(" "),v("ul",[v("li",[t._v("在MongoDB中通过查询聚合语句分析定位慢查询/聚合分析")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"nosql-db---elasticsearch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nosql-db---elasticsearch"}},[t._v("¶")]),t._v(" NoSQL DB - ElasticSearch")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("E. 掌握ElasticSearch数据库")]),t._v("：在理解了MongoDB后，让我们再学习下搜索的索引库；日志收集ELK栈是非常常见的，同时在一些离线大数据分析中也经常使用。")])]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[t._v("首先，我们通过学习ElasticSearch的概念基础，了解Elastic Stack生态和场景方案。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-introduce-1.html"}},[t._v("ES详解 - 认知：ElasticSearch基础概念")]),t._v(" "),v("ul",[v("li",[t._v("在学习ElasticSearch之前，先简单了解下ES流行度，使用背景，以及相关概念等")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-introduce-2.html"}},[t._v("ES详解 - 认知：Elastic Stack生态和场景方案")]),t._v(" "),v("ul",[v("li",[t._v("在了解ElaticSearch之后，我们还要了解Elastic背后的生态即我们常说的ELK；与此同时，还会给你展示ElasticSearch的案例场景，让你在学习ES前对它有个全局的印象。")])])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("然后，搭建ElasticSearch和Kibana，进而从查询和聚合的角度入门学习。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-install.html"}},[t._v("ES详解 - 安装：ElasticSearch和Kibana安装")]),t._v(" "),v("ul",[v("li",[t._v("了解完ElasticSearch基础和Elastic Stack生态后，我们便可以开始学习使用ElastiSearch了。所以本文主要介绍ElasticSearch和Kibana的安装。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-usage.html"}},[t._v("ES详解 - 入门：查询和聚合的基础使用")]),t._v(" "),v("ul",[v("li",[t._v("安装完ElasticSearch 和 Kibana后，为了快速上手，我们通过官网GitHub提供的一个数据进行入门学习，主要包括"),v("strong",[t._v("查询数据")]),t._v("和"),v("strong",[t._v("聚合数据")]),t._v("。")])])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("入门后，需要从两大方面深入ElasticSearch常用功能：第一方面是"),v("strong",[t._v("索引")]),t._v("管理；第二方面是"),v("strong",[t._v("查询")]),t._v("和"),v("strong",[t._v("聚合")]),t._v("。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-index-mapping.html"}},[t._v("ES详解 - 索引：索引管理详解")]),t._v(" "),v("ul",[v("li",[t._v("了解基本使用后，我们从索引操作的角度看看如何对索引进行管理。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-index-template.html"}},[t._v("ES详解 - 索引：索引模板(Index Template)详解")]),t._v(" "),v("ul",[v("li",[t._v("前文介绍了索引的一些操作，特别是手动创建索引，但是批量和脚本化必然需要提供一种模板方式快速构建和管理索引，这就是本文要介绍的索引模板(Index Template)，它是一种告诉Elasticsearch在创建索引时如何配置索引的方法。为了更好的复用性，在7.8中还引入了组件模板。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-dsl-com.html"}},[t._v("ES详解 - 查询：DSL查询之复合查询详解")]),t._v(" "),v("ul",[v("li",[t._v("在查询中会有多种条件组合的查询，在ElasticSearch中叫复合查询。它提供了5种复合查询方式："),v("strong",[t._v("bool query(布尔查询)")]),t._v("、"),v("strong",[t._v("boosting query(提高查询)")]),t._v("、"),v("strong",[t._v("constant_score（固定分数查询）")]),t._v("、"),v("strong",[t._v("dis_max(最佳匹配查询）")]),t._v("、"),v("strong",[t._v("function_score(函数查询）")]),t._v("。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-dsl-full-text.html"}},[t._v("ES详解 - 查询：DSL查询之全文搜索详解")]),t._v(" "),v("ul",[v("li",[t._v("DSL查询极为常用的是对文本进行搜索，我们叫全文搜索，本文主要对全文搜索进行详解。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-dsl-term.html"}},[t._v("ES详解 - 查询：DSL查询之Term详解")]),t._v(" "),v("ul",[v("li",[t._v("DSL查询另一种极为常用的是对词项进行搜索，官方文档中叫”term level“查询，本文主要对term level搜索进行详解。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-agg-bucket.html"}},[t._v("ES详解 - 聚合：聚合查询之Bucket聚合详解")]),t._v(" "),v("ul",[v("li",[t._v("除了查询之外，最常用的聚合了，ElasticSearch提供了三种聚合方式： "),v("strong",[t._v("桶聚合（Bucket Aggregation)")]),t._v("，"),v("strong",[t._v("指标聚合（Metric Aggregation)")]),t._v(" 和 "),v("strong",[t._v("管道聚合（Pipline Aggregation)")]),t._v("，本文主要介绍桶聚合（Bucket Aggregation)。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-agg-metric.html"}},[t._v("ES详解 - 聚合：聚合查询之Metric聚合详解")]),t._v(" "),v("ul",[v("li",[t._v("前文主要讲了 ElasticSearch提供的三种聚合方式之桶聚合（Bucket Aggregation)，本文主要讲讲指标聚合（Metric Aggregation)。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-x-agg-pipeline.html"}},[t._v("ES详解 - 聚合：聚合查询之Pipline聚合详解")]),t._v(" "),v("ul",[v("li",[t._v("前文主要讲了 ElasticSearch提供的三种聚合方式之指标聚合（Metric Aggregation)，本文主要讲讲管道聚合（Pipeline Aggregation)。")])])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("进一步进阶，了解并深入ElasticSearch底层的原理等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-y-th-1.html"}},[t._v("ES详解 - 原理：从图解构筑对ES原理的初步认知")]),t._v(" "),v("ul",[v("li",[t._v("在学习ElasticSearch原理时，我推荐你先通过官方博客中的一篇图解文章(虽然是基于2.x版本）来构筑对ES的初步认知（这种认识是体系上的快速认知）。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-y-th-2.html"}},[t._v("ES详解 - 原理：ES原理知识点补充和整体结构")]),t._v(" "),v("ul",[v("li",[t._v("通过上文图解了解了ES整体的原理后，我们便可以基于此知识体系下梳理下ES的整体结构以及相关的知识点， 这将帮助你更好的ElasticSearch索引文档和搜索文档的原理。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-y-th-3.html"}},[t._v("ES详解 - 原理：ES原理之索引文档流程详解")]),t._v(" "),v("ul",[v("li",[t._v("ElasticSearch中最重要原理是文档的索引和文档的读取，本文带你理解ES文档的索引过程。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-y-th-4.html"}},[t._v("ES详解 - 原理：ES原理之读取文档流程详解")]),t._v(" "),v("ul",[v("li",[t._v("ElasticSearch中最重要原理是文档的索引和文档的读取，前文介绍了索引文档流程，本文带你理解ES文档的读取过程。")])])],1)]),t._v(" "),v("blockquote",[v("p",[t._v("最后，学习ElasticSearch实践，大厂经验，运维，资料等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-y-peformance.html"}},[t._v("ES详解 - 优化：ElasticSearch性能优化详解")]),t._v(" "),v("ul",[v("li",[t._v("Elasticsearch 作为一个开箱即用的产品，在生产环境上线之后，我们其实不一定能确保其的性能和稳定性。如何根据实际情况提高服务的性能，其实有很多技巧。这章我们分享从实战经验中总结出来的 elasticsearch 性能优化，主要从硬件配置优化、索引优化设置、查询方面优化、数据结构优化、集群架构优化等方面讲解。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-z-tencent.html"}},[t._v("ES详解 - 大厂实践：腾讯万亿级 Elasticsearch 技术实践")]),t._v(" "),v("ul",[v("li",[t._v("腾讯在ES优化上非常具备参考价值，本文来源于腾讯相关团队的技术分享。Elasticsearch 在腾讯内部广泛应用于日志实时分析、结构化数据分析、全文检索等场景，目前单集群规模达到千级节点、万亿级吞吐，同时腾讯联合 Elastic 公司在腾讯云上提供了内核增强版 ES 云服务。海量规模、丰富的应用场景推动着腾讯对原生 ES 进行持续的高可用、高性能、低成本等全方位优化。本次分享主要剖析腾讯对 Elasticsearch 海量规模下的内核优化与实践，希望能和广大 ES 爱好者共同探讨推动 ES 技术的发展。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-awesome-es.html"}},[t._v("ES详解 - 资料：Awesome Elasticsearch")]),t._v(" "),v("ul",[v("li",[t._v("本文来自 "),v("a",{attrs:{href:"https://github.com/dzharii/awesome-elasticsearch",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Awesome Elasticsearch 项目"),v("OutboundLink")],1),t._v(", 搜集ElasticSearch相关的优秀资料。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-wrapper-query.html"}},[t._v("ElasticSearch - WrapperQuery")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/db/nosql-es/elasticsearch-backup.html"}},[t._v("ElasticSearch - 备份和迁移")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"开发与常用基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发与常用基础"}},[t._v("¶")]),t._v(" 开发与常用基础")]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/develop/dev.png",loading:"lazy"}})]),t._v(" "),v("h3",{attrs:{id:"开发之常用类库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发之常用类库"}},[t._v("¶")]),t._v(" 开发之常用类库")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 开发之常用类库")]),t._v("：区别于学习，在开发应用时正确使用一些开源第三方工具包可以极大的提升开发效率，本章主要介绍运用极为广泛的工具包，比如Apache Common，Google Guava，Hutool等。")])]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-apache-common.html"}},[t._v("常用类库 - Apache Common包")]),t._v(" "),v("ul",[v("li",[t._v("工具类第一选择1 - Apache common包不仅被成千上万开源工具使用，更是学习Java编程比较好的代码参考工具，效率工具。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-google-guava.html"}},[t._v("常用类库 - Google Guava包")]),t._v(" "),v("ul",[v("li",[t._v("工具类第一选择2- Google出品，必属精品。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-hu-tool.html"}},[t._v("常用类库 - Hutool包")]),t._v(" "),v("ul",[v("li",[t._v("国产的工具类库，有点是比较全，也比较实用；选它要注意下它的协议是中国第一个开源协议"),v("a",{attrs:{href:"http://license.coscl.org.cn/MulanPSL",target:"_blank",rel:"noopener noreferrer"}},[t._v("木兰宽松许可证, 第1版"),v("OutboundLink")],1),t._v("，商业型项目最好咨询下相关法务部门。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-spring-util.html"}},[t._v("常用类库 - Spring常用工具类")]),t._v(" "),v("ul",[v("li",[t._v("Spring作为常用的开发框架，在Spring框架应用中，排在ApacheCommon，Guava, Huool等通用库后，第二优先级可以考虑使用Spring-core-xxx.jar中的util包。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-log.html"}},[t._v("常用类库 - 日志相关类库详解")]),t._v(" "),v("ul",[v("li",[t._v("Java日志库是最能体现Java库在进化中的渊源关系的，在理解时重点理解日志框架本身和日志门面，以及比较好的实践等。要关注其历史渊源和设计（比如桥接），而具体在使用时查询接口即可。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-json.html"}},[t._v("常用类库 - JSON类库详解")]),t._v(" "),v("ul",[v("li",[t._v("JSON应用非常广泛，对常用对FastJson，Jackson和Gson作了具体阐述；其中考虑到FastJson代码质量，漏洞，坑等等，应该尽量避免使用。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-Lombok.html"}},[t._v("常用类库 - Lombok工具库详解")]),t._v(" "),v("ul",[v("li",[t._v("Lombok是一款非常实用Java工具，可用来帮助开发人员消除Java的冗长代码，尤其是对于简单的Java对象（POJO）。实际上我并不推荐使用Lombok（不主动使用它）, 但是因为它有着很大的使用量，我们仍然有必要掌握它，不仅知道如何使用和它解决的问题，还要知道它的坑。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-mapstruct.html"}},[t._v("常用类库 - MapStruct工具库详解")]),t._v(" "),v("ul",[v("li",[t._v("MapStruct是一款非常实用Java工具，主要用于解决对象之间的拷贝问题，比如PO/DTO/VO/QueryParam之间的转换问题。区别于BeanUtils这种通过反射，它通过编译器编译生成常规方法，将可以很大程度上提升效率。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/package/dev-package-x-others.html"}},[t._v("常用类库 - 其它常用类库")]),t._v(" "),v("ul",[v("li",[t._v("其它常用类库体系很庞大，但是工具类的原则是只需要查找会使用即可。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"开发之代码质量保障"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发之代码质量保障"}},[t._v("¶")]),t._v(" 开发之代码质量保障")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B1. 开发之单元测试")]),t._v("：单元测试是从开发侧保证软件质量的第一步，本章将具体介绍单元测试相关的内容和工具，比如Junit，Mockito等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-ut-unit-test.html"}},[t._v("单元测试：浅谈单元测试")]),t._v(" "),v("ul",[v("li",[t._v("单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-ut-x-junit.html"}},[t._v("单元测试：Junit4 详解")]),t._v(" "),v("ul",[v("li",[t._v("JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-ut-x-junit5.html"}},[t._v("单元测试：Junit5 详解")]),t._v(" "),v("ul",[v("li",[t._v("JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-ut-x-mockito.html"}},[t._v("单元测试：Mockito 详解")]),t._v(" "),v("ul",[v("li",[t._v("Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。而Mockito是最流行的Java mock框架之一。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-ut-x-junit-idea.html"}},[t._v("单元测试：IDEA下单元测试详解")]),t._v(" "),v("ul",[v("li",[t._v("工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-ut-springboot2.html"}},[t._v("单元测试 - SpringBoot2+Mockito实战")]),t._v(" "),v("ul",[v("li",[t._v("在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B2. 开发之代码质量")]),t._v("：项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，命名规范，静态代码检查等等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-qt-code-style.html"}},[t._v("代码质量 - 统一风格：统一代码格式化详解")]),t._v(" "),v("ul",[v("li",[t._v("项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，本文将介绍常用的统一风格的措施之"),v("strong",[t._v("统一代码格式化")]),t._v("。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-qt-code-style-2.html"}},[t._v("代码质量 - 统一风格：统一命名规范详解")]),t._v(" "),v("ul",[v("li",[t._v("好的代码本身就是注释, 所以我们需要统一命名风格，本文将介绍常用的统一风格的措施之"),v("strong",[t._v("统一命名规范")]),t._v("。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-qt-code-style-1.html"}},[t._v("代码质量 - 统一风格：静态样式检查详解")]),t._v(" "),v("ul",[v("li",[t._v("统一样式检查规范里，最为常用的统一样式工具是checkstyle插件，本文将介绍常用的统一风格的措施之"),v("strong",[t._v("静态样式检查")]),t._v("。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-qt-sonarlint.html"}},[t._v("代码质量 - 代码质量管理: Sonarlint插件详解")]),t._v(" "),v("ul",[v("li",[t._v("在提交代码前，为提升代码质量还需要使用一些静态代码工具检查代码质量，最为常用的是Sonar；在本地IDE中可以配置Sonarlint插件进行检查。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/ut/dev-qt-spotbugs.html"}},[t._v("代码质量 - 代码质量管理: SpotBugs插件详解")]),t._v(" "),v("ul",[v("li",[t._v("SpotBugs是Findbugs的继任者（Findbugs已经于2016年后不再维护），用于对代码进行静态分析，查找相关的漏洞；在本地IDE中可以配置SpotBugs插件进行检查。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"开发之正则表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发之正则表达式"}},[t._v("¶")]),t._v(" 开发之正则表达式")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. 开发之正则表达式")]),t._v("：正则表达式运用极为广泛，但是知识点又多；在学习时，总体上理解，对常用的知悉，开发时可以快速查询使用即可。")])]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/regex/dev-regex-all.html"}},[t._v("正则表达式 - 知识点学习")]),t._v(" "),v("ul",[v("li",[t._v("正则表达式的语法知识点")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/regex/dev-regex-usage.html"}},[t._v("正则表达式 - 常用正则表达式")]),t._v(" "),v("ul",[v("li",[t._v("常用的正则表达式，供使用时查询")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/regex/dev-regex-tools.html"}},[t._v("正则表达式 - 在线工具汇总")]),t._v(" "),v("ul",[v("li",[t._v("主要总结常用的在线正则表达式相关的工具，从而高效的写出正确的表达式。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"开发之cron表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发之cron表达式"}},[t._v("¶")]),t._v(" 开发之CRON表达式")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. 开发之CRON表达式")]),t._v("：定时任务和CRON表达式在开发中使用也非常广泛；在学习时，总体上理解，对常用的知悉，开发时可以快速查询使用即可。")])]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/cron/dev-cron-x-usage.html"}},[t._v("CRON表达式 - CRON表达式介绍和使用")]),t._v(" "),v("ul",[v("li",[t._v("定时任务和CRON表达式在开发中使用也非常广泛，本文整理了CRON表达式和常见使用例子")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/cron/dev-cron-x-tools.html"}},[t._v("CRON表达式 - CRON生成和校验工具")]),t._v(" "),v("ul",[v("li",[t._v("本文主要总结常用的在线CRON生成和校验工具，从而高效的写出正确的表达式")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"开发之网络协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发之网络协议"}},[t._v("¶")]),t._v(" 开发之网络协议")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("E. 开发之网络协议")]),t._v("：对Web开发而言，网络协议是必学项，本章主要对常见的网络协议进行梳理，并重点分析常用TCP/IP协议等，这篇"),v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-overview.html"}},[t._v("网络基础和协议 - Overview")]),t._v("将指导你如何学习这个系列。")],1)]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第一步：学习计算机网络基础")]),t._v("；构筑任何基础体系之前，需要学习这个专题的整体知识点（最好是一本完整的书），这里主要基于"),v("code",[t._v("《计算机网络(第五版)》")]),t._v("知识点梳理，不得不说这本书作者"),v("strong",[t._v("谢希仁")]),t._v("画的PPT还是挺棒的。网络基础分三部分内容，主要包含如下：")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-network-basic.html"}},[t._v("网络基础之一 - 计算机网络基础部分梳理")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("网络基础的第一篇")]),t._v("，主要来源于大学的课程《计算机网络(第五版)》知识点梳理，内容整理自"),v("a",{attrs:{href:"https://www.cnblogs.com/googny/p/3682280.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),v("OutboundLink")],1),t._v(", 但是作了调整和优化; 不得不说这本书作者谢希仁画的PPT还是挺棒的。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-osi7.html"}},[t._v("网络基础之二 - 网络7层协议，4层，5层")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("网络基础的第二篇")]),t._v("，我觉的一定要有全局框架观，构建全局观时建议分三步：第一步，理解全局的网络层次；第二步，理解每一层次中的常见的网络设备及功能；第三步，理解每一层中的常见协议。在此基础上，将其它知识点放置在相应的层次（很多网络上的零散知识点是没法帮你构筑完整的知识体系的，推荐你完整的看一本关于网络的书籍来构筑基础）")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-ip.html"}},[t._v("网络基础之三 - IP 协议相关详解")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("网络基础第三篇")]),t._v("，主要阐述： "),v("code",[t._v("IP协议")]),t._v("（在网络层）及其配套协议（在数据链路层的"),v("code",[t._v("ARP协议")]),t._v("，在网络层的"),v("code",[t._v("ICMP，IGMP协议")]),t._v("，IPV6详解，网络地址转换 NAT等。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第二步：学习传输层协议TCP/UDP")]),t._v("；TCP/UDP是后面应用层协议的基础。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-tcpip.html"}},[t._v("网络协议 - TCP 协议详解")]),t._v(" "),v("ul",[v("li",[t._v("TCP是一个巨复杂的协议，关于TCP这个协议的细节，我还是推荐你去看W.Richard Stevens的"),v("a",{attrs:{href:"https://book.douban.com/subject/1088054/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《TCP/IP 详解 卷1：协议》"),v("OutboundLink")],1),t._v("。全网上讲TCP/IP的文章众多，多数是皮毛；本文梳理自 左耳朵耗子的文章"),v("a",{attrs:{href:"https://coolshell.cn/articles/11564.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《TCP 的那些事儿》"),v("OutboundLink")],1),t._v("，来帮助大家理解TCP/IP, 其中引用的图片在"),v("a",{attrs:{href:"http://www.tcpipguide.com/buy.htm?free",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),v("OutboundLink")],1)])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-udp.html"}},[t._v("网络协议 - UDP 协议详解")]),t._v(" "),v("ul",[v("li",[t._v("基于TCP和UDP的协议非常广泛，所以也有必要对UDP协议进行详解")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第三步：学习应用层协议")]),t._v("；HTTP 基于TCP协议实现，web开发必学；DNS 基于UDP协议实现。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-http.html"}},[t._v("网络协议 - HTTP 协议详解")]),t._v(" "),v("ul",[v("li",[t._v("HTTP 协议详解，web开发必备")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-dns.html"}},[t._v("网络协议 - DNS 相关详解")]),t._v(" "),v("ul",[v("li",[t._v("DNS的核心工作就是将域名翻译成计算机IP地址, 它是基于UDP协议实现的，本文将具体阐述DNS相关的概念，解析，调度原理（负载均衡和区域调度）等DNS相关的所有知识点")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第四步：知识点贯穿理解")]),t._v("；")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-url.html"}},[t._v("知识点串联：输入URL 到页面加载过程详解")]),t._v(" "),v("ul",[v("li",[t._v("第一，将前面涉及网络协议特别是"),v("code",[t._v("TCP协议")]),t._v("和"),v("code",[t._v("HTTP协议")]),t._v("，"),v("code",[t._v("DNS解析")]),t._v("等等知识点贯穿；")]),t._v(" "),v("li",[t._v("第二，在此基础上介绍"),v("code",[t._v("浏览器渲染过程")]),t._v("，以及为"),v("code",[t._v("Web优化")]),t._v("提供基础。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第五步：相关工具等")]),t._v("；")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-tool-netstat.html"}},[t._v("工具: netstat查看服务及监听端口详解")]),t._v(" "),v("ul",[v("li",[t._v("在Linux使用过程中，需要了解当前系统开放了哪些端口，并且要查看开放这些端口的具体进程和用户，可以通过netstat命令进行简单查询。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-tool-tcpdump.html"}},[t._v("工具: 网络抓包神器 tcpdump 使用详解")]),t._v(" "),v("ul",[v("li",[t._v("tcpdump 是一款强大的网络抓包工具，它使用 libpcap 库来抓取网络数据包，这个库在几乎在所有的 Linux/Unix 中都有。熟悉 tcpdump 的使用能够帮助你分析调试网络数据，本文将通过一个个具体的示例来介绍它在不同场景下的使用方法。。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/protocol/dev-protocol-tool-wireshark.html"}},[t._v("工具: Wireshark介绍及抓包分析")]),t._v(" "),v("ul",[v("li",[t._v("Wireshark（前称Ethereal）是一个网络封包分析软件.网络管理员使用Wireshark来检测网络问题，网络安全工程师使用Wireshark来检查资讯安全相关问题，开发者使用Wireshark来为新的通讯协定除错，普通使用者使用Wireshark来学习网络协定的相关知识。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"开发之安全相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发之安全相关"}},[t._v("¶")]),t._v(" 开发之安全相关")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("F. 开发之安全相关")]),t._v("：保障开发出的软件安全是非常重要的，本章主要对开发知识体系，OWASP Top 10梳理，以及对常见的漏洞进行详解; 这篇"),v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-overview.html"}},[t._v("开发安全 - Overview")]),t._v("将指导你如何学习这个系列。")],1)]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第一步：业内趋势和常见漏洞")]),t._v("；在学习安全需要总体了解安全趋势和常见的Web漏洞，首推了解OWASP，因为它代表着业内Web安全漏洞的趋势")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-x-owasp.html"}},[t._v("开发安全 - OWASP Top 10")]),t._v(" "),v("ul",[v("li",[t._v('OWASP（开放式web应用程序安全项目）关注web应用程序的安全。OWASP这个项目最有名的，也许就是它的"十大安全隐患列表"。这个列表不但总结了web应用程序最可能、最常见、最危险的十大安全隐患，还包括了如何消除这些隐患的建议。（另外，OWASP还有一些辅助项目和指南来帮助IT公司和开发团队来规范应用程序开发流程和测试流程，提高web产品的安全性。）这个"十大"差不多每隔三年更新一次。。')])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第二步：重点知识点详解")]),t._v("；这里将具体对常见对几种攻击方式进行阐述，包括注入攻击，CSRF，XSS等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-x-injection.html"}},[t._v("开发安全 - 注入攻击详解")]),t._v(" "),v("ul",[v("li",[t._v("注入攻击最为常见的攻击方式，作为开发而言必须完全避免; 本文会介绍常见的几种注入方式，比如："),v("code",[t._v("SQL 注入")]),t._v(", "),v("code",[t._v("xPath 注入")]),t._v(", "),v("code",[t._v("命令注入")]),t._v(", "),v("code",[t._v("LDAP注入")]),t._v(", "),v("code",[t._v("CLRF注入")]),t._v(", "),v("code",[t._v("Host头注入")]),t._v(", "),v("code",[t._v("Email头注入")]),t._v("等等，总结来看其本质其实是一样的，且防御措施也大同小异。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-x-csrf.html"}},[t._v("开发安全 - CSRF 详解")]),t._v(" "),v("ul",[v("li",[t._v("CSRF(Cross-site request forgery跨站请求伪造，也被称成为“one click attack”或者session riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-x-xss.html"}},[t._v("开发安全 - XSS 详解")]),t._v(" "),v("ul",[v("li",[t._v("XSS是跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-x-ddos.html"}},[t._v("开发安全 - DDoS 详解")]),t._v(" "),v("ul",[v("li",[t._v("分布式拒绝服务攻击(英文意思是Distributed Denial of Service，简称DDoS)是指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击。由于攻击的发出点是分布在不同地方的，这类攻击称为分布式拒绝服务攻击，其中的攻击者可以有多个")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-x-click-hijack.html"}},[t._v("开发安全 - 点击劫持详解")]),t._v(" "),v("ul",[v("li",[t._v("点击劫持其实是一种视觉上的欺骗手段，攻击者将一个透明的、不可见的iframe覆盖在一个网页上，通过调整iframe页面位置，诱使用户在页面上进行操作，在不知情的情况下用户的点击恰好是点击在iframe页面的一些功能按钮上")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第三步：学习和实践")]),t._v("：一个比较好对学习常见web漏洞的平台 - Web安全测试平台(DVMA)")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-y-pratice.html"}},[t._v("开发安全实战 - Web安全测试平台(DVMA)")]),t._v(" "),v("ul",[v("li",[t._v("DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第四步：渗透测试")]),t._v("：用渗透测试的整个流程，帮你理解项目发布时安全团队如何做渗透测试来尽量避免漏洞")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/develop/security/dev-security-y-pentest-workflow.html"}},[t._v("开发安全实战 - 渗透测试流程示例")]),t._v(" "),v("ul",[v("li",[t._v("在应用程序上线之前，都会进行多次内部或者外部的渗透测试。对于开发而言，有必要了解下渗透测试的整体流程，从而知己知彼，避免一些开发中的问题")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"开发与中间件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发与中间件"}},[t._v("¶")]),t._v(" 开发与中间件")]),t._v(" "),v("h3",{attrs:{id:"spring基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring基础"}},[t._v("¶")]),t._v(" Spring基础")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/spring/spring.html"}},[t._v("Spring 资料汇总")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springmvc.html"}},[t._v("Spring MVC ")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/spring-bean-lifecycle.html"}},[t._v("Spring Bean 生命周期")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/spring-aop.html"}},[t._v("Spring AOP 实现原理")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"spring-boot入门"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot入门"}},[t._v("¶")]),t._v(" Spring Boot入门")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-helloworld.html"}},[t._v("Spring Boot - Helloworld")]),t._v(" "),v("ul",[v("li",[t._v("使用Intelli IDEA写一个SpringBoot的HelloWorld")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-swagger.html"}},[t._v("Spring Boot - Swagger UI")]),t._v(" "),v("ul",[v("li",[t._v("本例也是一个Spring Boot的Hello World 应用。包含, 对用户基本数据增删查改，JPA，H2，Swagger")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-logback.html"}},[t._v("Spring Boot - Logback配置日志")]),t._v(" "),v("ul",[v("li",[t._v("出于性能等原因，Logback 目前是springboot应用日志的标配； 当然有时候在生产环境中也会考虑和三方中间件采用统一处理方式")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-mybatis.html"}},[t._v("Spring Boot - ORM Mybatis")]),t._v(" "),v("ul",[v("li",[t._v("国内使用MyBatis还是挺多的，本例展示通过注解方式连接MyBatis")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-mongodb.html"}},[t._v("Spring Boot - MongoDB CRUD")]),t._v(" "),v("ul",[v("li",[t._v("本例展示一个Mongo CURD 的Demo, 由于我在"),v("RouterLink",{attrs:{to:"/md/outline/md/spring/springboot-data-multi.html"}},[t._v("springboot多数据源")]),t._v("示例中已经使用了JPA形式的MongoRepository，所以在这个例子中我将只展示使用MongoTemplate(MongoOptions)方式")],1)])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-es.html"}},[t._v("Spring Boot - Elatiscsearch CRUD")]),t._v(" "),v("ul",[v("li",[t._v("本例展示一个ElasticSearch CURD 的Demo")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-thymeleaf.html"}},[t._v("Spring Boot - Thymeleaf")]),t._v(" "),v("ul",[v("li",[t._v("在开发一个小项目的时候，使用的是Spring Boot，Spring Boot 官方推荐的前端模板是thymeleaf, 花了两天时间将官方的文档看完并总结了下知识体系结构")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-websocket.html"}},[t._v("Spring Boot - Websocket Demo")]),t._v(" "),v("ul",[v("li",[t._v("从网上找的Websocket Demo例子")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-interface.html"}},[t._v("Spring Boot - 访问外部接口")]),t._v(" "),v("ul",[v("li",[t._v("在Spring-Boot项目开发中，存在着本模块的代码需要访问外面模块接口，或外部url链接的需求, 比如调用外部的地图API或者天气API")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-ratelimit.html"}},[t._v("Spring Boot - 实现API限流")]),t._v(" "),v("ul",[v("li",[t._v("高并发的三板斧: 缓存，降级和限流。本文只是关于限流的一个Demo，限流可以有很多方式，具体可以看分布式限流的章节")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-quartz.html"}},[t._v("Spring Boot - 分布式quartz任务管理")]),t._v(" "),v("ul",[v("li",[t._v("通常我们使用quartz只是实现job单实例运行，本例将展示quartz实现基于数据库的分布式任务管理，和控制job生命周期")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"spring-boot进阶"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot进阶"}},[t._v("¶")]),t._v(" Spring Boot进阶")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-data-multi.html"}},[t._v("Spring Boot - 多个数据源Service层封装")]),t._v(" "),v("ul",[v("li",[t._v("mysql, es, mongodb 三个数据源用配置文件方式连接，JPA只是正对dao做了封装，本文主要介绍如何对service层进行封装")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-javaConfig.html"}},[t._v("Spring Boot - java 注解")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍一些SpringBoot中常用的注解")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-jar-3rd.html"}},[t._v("Spring Boot - 使用第三方Jar")]),t._v(" "),v("ul",[v("li",[t._v("在项目中我们经常需要使用第三方的Jar,出现这种情况的原因在于，即便我们有Nexus或者其他Artifactory，这里介绍两种方案")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-starter-demo.html"}},[t._v("Spring Boot - 自定义Starter封装")]),t._v(" "),v("ul",[v("li",[t._v("在Springboot封装一个自定义的Starter的一个Demo，从创建一个模块->封装starter->使用")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/spring/springboot-javafx-native.html"}},[t._v("Spring Boot - JavaFX 2.0应用")]),t._v(" "),v("ul",[v("li",[t._v("很多人对Java开发native程序第一反应还停留在暗灰色单一风格的Java GUI界面，开发方式还停留在AWT或者Swing。本文主要基于SpringBoot和JavaFX开发一个Demo给你展示Java Native应用可以做到什么样的程度。当然JavaFX 2.0没有流行起来也是有原因的，而且目前native的选择很多，前端是个框架都会搞个native")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"web容器---tomcat详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#web容器---tomcat详解"}},[t._v("¶")]),t._v(" Web容器 - Tomcat详解")]),t._v(" "),v("p",[v("em",[t._v("结构图")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/tomcat/tomcat-x-design-2-1.jpeg",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("初始化和启动流程")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/tomcat/tomcat-x-start-1.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-design-web-container.html"}},[t._v("Tomcat - 如何设计一个简单的web容器")]),t._v(" "),v("ul",[v("li",[t._v("在学习Tomcat前，很多人先入为主的对它的认知是巨复杂的；所以第一步，在学习它之前，要打破这种观念，我们通过学习如何设计一个最基本的web容器来看它需要考虑什么；进而在真正学习Tomcat时，多把重点放在它的顶层设计上，而不是某一块代码上, 思路永远比具体实现重要的多。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-arch.html"}},[t._v("Tomcat - 理解Tomcat架构设计")]),t._v(" "),v("ul",[v("li",[t._v("前文我们已经介绍了一个简单的Servlet容器是如何设计出来，我们就可以开始正式学习Tomcat了，在学习开始，我们有必要站在高点去看看Tomcat的架构设计。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-sourcecode.html"}},[t._v("Tomcat - 源码分析准备和分析入口")]),t._v(" "),v("ul",[v("li",[t._v("上文我们介绍了Tomcat的架构设计，接下来我们便可以下载源码以及寻找源码入口了。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-start.html"}},[t._v("Tomcat - 启动过程：初始化和启动流程")]),t._v(" "),v("ul",[v("li",[t._v("在有了Tomcat架构设计和源码入口以后，我们便可以开始真正读源码了。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-classloader.html"}},[t._v("Tomcat - 启动过程:类加载机制详解")]),t._v(" "),v("ul",[v("li",[t._v("上文我们讲了Tomcat在初始化时会初始化classLoader。本文将具体分析Tomcat的类加载机制，特别是区别于传统的"),v("code",[t._v("双亲委派模型")]),t._v("的加载机制。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-catalina.html"}},[t._v("Tomcat - 启动过程:Catalina的加载")]),t._v(" "),v("ul",[v("li",[t._v("通过前两篇文章，我们知道了"),v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-classloader.html"}},[t._v("Tomcat的类加载机制")]),t._v("和"),v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-start.html"}},[t._v("整体的组件加载流程")]),t._v("；我们也知道通过Bootstrap初始化的catalinaClassLoader加载了Catalina，那么进而引入了一个问题就是Catalina是如何加载的呢？加载了什么呢？本文将带你进一步分析。")],1)])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-lifecycle.html"}},[t._v("Tomcat - 组件生命周期管理:LifeCycle")]),t._v(" "),v("ul",[v("li",[t._v("上文中，我们已经知道Catalina初始化了Server（它调用了 Server 类的 init 和 start 方法来启动 Tomcat）；你会发现Server是Tomcat的配置文件server.xml的顶层元素，那这个阶段其实我们已经进入到Tomcat内部组件的详解；这时候有一个问题，这么多组件是如何管理它的生命周期的呢？")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-jmx.html"}},[t._v("Tomcat - 组件拓展管理:JMX和MBean")]),t._v(" "),v("ul",[v("li",[t._v("我们在前文中讲Lifecycle以及组件，怎么会突然讲JMX和MBean呢？本文通过承接上文Lifecycle讲Tomcat基于JMX的实现。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-listener.html"}},[t._v("Tomcat - 事件的监听机制：观察者模式")]),t._v(" "),v("ul",[v("li",[t._v("本文承接上文中Lifecycle中实现，引出Tomcat的监听机制。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-server.html"}},[t._v("Tomcat - Server的设计和实现: StandardServer")]),t._v(" "),v("ul",[v("li",[t._v("基于前面的几篇文章，我们终于可以总体上梳理Server的具体实现了，这里体现在StandardServer具体的功能实现上。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-service.html"}},[t._v("Tomcat - Service的设计和实现: StandardService")]),t._v(" "),v("ul",[v("li",[t._v("上文讲了Server的具体实现了，本文主要讲Service的设计和实现；我们从上文其实已经知道Server中包含多个service了。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-executor.html"}},[t._v("Tomcat - 线程池的设计与实现：StandardThreadExecutor")]),t._v(" "),v("ul",[v("li",[t._v("上文中我们研究了下Service的设计和实现，StandardService中包含Executor的调用；这个比较好理解，Tomcat需要并发处理用户的请求，自然而言就想到线程池，那么Tomcat中线程池（Executor）具体是如何实现的？本文带你继续深度解析。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-container.html"}},[t._v("Tomcat - Request请求处理: Container设计")]),t._v(" "),v("ul",[v("li",[t._v("在理解了Server，Service和Executor后，我们可以进入Request处理环节了。我们知道客户端是可以发起多个请求的，Tomcat也是可以支持多个webapp的，有多个上下文，且一个webapp中可以有多个Servlet...等等，那么Tomcat是如何设计组件来支撑请求处理的呢？本节文将介绍Tomcat的Container设计。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-container-engine.html"}},[t._v("Tomcat - Container容器之Engine：StandardEngine")]),t._v(" "),v("ul",[v("li",[t._v("上文已经知道Container的整体结构和设计，其中Engine其实就是Servlet Engine，负责处理request的顶层容器。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-container-pipline.html"}},[t._v("Tomcat - Container的管道机制：责任链模式")]),t._v(" "),v("ul",[v("li",[t._v("上文中介绍了Engine的设计，其中有Pipline相关内容没有介绍，本文将向你阐述Tomcat的管道机制以及它要解决的问题。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/tomcat/tomcat-x-connector.html"}},[t._v("Tomcat - Request请求处理过程：Connector")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍request请求的处理过程。")])])],1)]),t._v(" "),v("h3",{attrs:{id:"orm---mybatis详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#orm---mybatis详解"}},[t._v("¶")]),t._v(" ORM - MyBatis详解")]),t._v(" "),v("p",[v("em",[t._v("架构图")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/mybatis/mybatis-y-arch-1.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-arch.html"}},[t._v("MyBatis详解 - 总体框架设计")]),t._v(" "),v("ul",[v("li",[t._v("MyBatis整体架构包含哪些层呢？这些层次是如何设计的呢？")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-init.html"}},[t._v("MyBatis详解 - 初始化基本过程")]),t._v(" "),v("ul",[v("li",[t._v("从上文我们知道MyBatis和数据库的交互有两种方式有Java API和Mapper接口两种，所以MyBatis的初始化必然也有两种；那么MyBatis是如何初始化的呢？")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-config-load.html"}},[t._v("MyBatis详解 - 配置解析过程")]),t._v(" "),v("ul",[v("li",[t._v("【本文为中优先级】通过上文我们知道MyBatis初始化过程中会解析配置，那具体是如何解析的呢？")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-config-list.html"}},[t._v("MyBatis详解 - 官网配置清单")]),t._v(" "),v("ul",[v("li",[t._v("【本文为低优先级】通过上文我们知道配置是如何加载并初始化的，那MyBatis提供了哪些配置呢？通过MyBatis官网文档我们一探究竟。PS：对于清单型的，只需要大致浏览且在使用时能快速查找即可，所以是低优先级的。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-config-mapper.html"}},[t._v("MyBatis详解 - Mapper映射文件配置")]),t._v(" "),v("ul",[v("li",[t._v("在mapper文件中，以mapper作为根节点，其下面可以配置的元素节点有： select, insert, update, delete, cache, cache-ref, resultMap, sql; 本文将Mapper映射文件配置进行详解。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-sql-exec.html"}},[t._v("MyBatis详解 - sqlSession执行流程")]),t._v(" "),v("ul",[v("li",[t._v("前面的章节主要讲mybatis如何解析配置文件，这些都是一次性的过程。从本章开始讲解动态的过程，它们跟应用程序对mybatis的调用密切相关。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-dynamic-sql.html"}},[t._v("MyBatis详解 - 动态SQL使用与原理")]),t._v(" "),v("ul",[v("li",[t._v("动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-plugin.html"}},[t._v("MyBatis详解 - 插件机制")]),t._v(" "),v("ul",[v("li",[t._v("MyBatis提供了一种插件(plugin)的功能，虽然叫做插件，但其实这是拦截器功能。那么拦截器拦截MyBatis中的哪些内容呢？")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-plugin-page.html"}},[t._v("MyBatis详解 - 插件之分页机制")]),t._v(" "),v("ul",[v("li",[t._v("Mybatis的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-datasource.html"}},[t._v("MyBatis详解 - 数据源与连接池")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍MyBatis数据源和连接池相关的内容。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-trans.html"}},[t._v("MyBatis详解 - 事务管理机制")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍MyBatis事务管理相关的使用和机制。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-cache-level1.html"}},[t._v("MyBatis详解 - 一级缓存实现机制")]),t._v(" "),v("ul",[v("li",[t._v("减少资源的浪费，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/framework/orm-mybatis/mybatis-y-cache-level2.html"}},[t._v("MyBatis详解 - 二级缓存实现机制")]),t._v(" "),v("ul",[v("li",[t._v("MyBatis的二级缓存是Application级别的缓存，它可以提高对数据库查询的效率，以提高应用的性能。")])])],1)]),t._v(" "),v("h3",{attrs:{id:"其它"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("¶")]),t._v(" 其它")]),t._v(" "),v("ul",[v("li",[t._v("ORM - JPA")]),t._v(" "),v("li",[t._v("缓存")]),t._v(" "),v("li",[t._v("消息队列")]),t._v(" "),v("li",[t._v("流式处理")]),t._v(" "),v("li",[t._v("模板引擎")]),t._v(" "),v("li",[t._v("...")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"开发与项目学习"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发与项目学习"}},[t._v("¶")]),t._v(" 开发与项目学习  "),v("Badge",{attrs:{type:"warn",text:"TBD"}})],1),t._v(" "),v("ul",[v("li",[t._v("后端中小型项目")]),t._v(" "),v("li",[t._v("前后端分离项目")]),t._v(" "),v("li",[t._v("Spring Cloud项目")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"开发与工具"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发与工具"}},[t._v("¶")]),t._v(" 开发与工具"),v("Badge",{attrs:{text:"New"}})],1),t._v(" "),v("h3",{attrs:{id:"开发百宝箱常用资源"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发百宝箱常用资源"}},[t._v("¶")]),t._v(" 开发百宝箱（常用资源）")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/resource/tools.html"}},[t._v("开发百宝箱")])],1)]),t._v(" "),v("h3",{attrs:{id:"开发工具清单"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发工具清单"}},[t._v("¶")]),t._v(" 开发工具清单")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-overview.html"}},[t._v("工具清单 - Overview")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-project-management.html"}},[t._v("工具清单 - 项目管理")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-ide.html"}},[t._v("工具清单 - IDE工具")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-kanban.html"}},[t._v("工具清单 - 看板工具")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-bug-tracking.html"}},[t._v("工具清单 - Bug追踪管理")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-cicd.html"}},[t._v("工具清单 - CI & CD")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-api-management.html"}},[t._v("工具清单 - API管理")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-monitoring.html"}},[t._v("工具清单 - 监控工具")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-wiki-doc.html"}},[t._v("工具清单 - 文档/Wiki/Notes")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-list-file-management-share.html"}},[t._v("工具清单 - 文件管理和共享")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"开发工具详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发工具详解"}},[t._v("¶")]),t._v(" 开发工具详解")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool.html"}},[t._v("常用软件工具")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-git.html"}},[t._v("工具详解 - Git")]),t._v(" "),v("ul",[v("li",[t._v("Git是分布式代码托管的标杆，这里将提供如何学习Git，以及Git工作流的总结，和常用的操作命令")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-ide.html"}},[t._v("工具详解 - Eclipse,STS,IDEA")]),t._v(" "),v("ul",[v("li",[t._v("本文总结常用的IDE工具")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-maven.html"}},[t._v("工具详解 - Maven项目构建")]),t._v(" "),v("ul",[v("li",[t._v("在Java开发中，常用构建工具ant,maven和gradle, 其中maven相对主流；本文参考和总结自"),v("a",{attrs:{href:"http://blog.csdn.net/luanlouis/article/details/50492163",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),v("OutboundLink")],1),t._v(" , 对maven的理解看这一篇就够")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/tool/tool-jenkins-gitlab.html"}},[t._v("工具详解 - Jenkins+Gitlab")]),t._v(" "),v("ul",[v("li",[t._v("使用Jenkins+Gitlab搭建CI环境")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"linux相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#linux相关"}},[t._v("¶")]),t._v(" Linux相关")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/devops/linux/linux.html"}},[t._v("Linux - Linux基础知识")]),t._v(" "),v("ul",[v("li",[t._v("Linux基础知识学习梳理")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/linux/linux-usage.html"}},[t._v("Linux - Linux 常用")]),t._v(" "),v("ul",[v("li",[t._v("本文记录常用的Linux命令, 主要使用CentOS7")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/linux/linux-curl.html"}},[t._v("Linux - Curl使用")]),t._v(" "),v("ul",[v("li",[t._v("主要总结Linux Curl的一些常见用法")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/linux/linux-service.html"}},[t._v("Linux - Linux创建自建服务")]),t._v(" "),v("ul",[v("li",[t._v("以打包自己开发的Java应用到Linux服务器，作为一个服务启动，并开启自启。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"docker相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker相关"}},[t._v("¶")]),t._v(" Docker相关")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-00-overview.html"}},[t._v("Docker - Overview")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-01-docker-vm.html"}},[t._v("虚拟化技术 - Docker Vs. 虚拟机")]),t._v(" "),v("ul",[v("li",[t._v("人们为了提高系统及硬件资源的利用率而引入了"),v("strong",[t._v("虚拟化技术")]),t._v("。虚拟化是一种"),v("strong",[t._v("资源管理技术")]),t._v("，它可以各种实体资源抽像后再分隔，从而打破实体结构的限制，最大程度的提高资源的利用率。"),v("strong",[t._v("Docker属于软件虚拟化技术中的操作系统层虚拟化技术")]),t._v("，它是基于LXC实现的一个应用容器引擎，Docker让开发者可以打包他们的应用及依赖环境到一个可移植的容器中，然后可以将这个容器快速部署开发、测试或生产环境中。了解本文从三个问题着手，"),v("strong",[t._v("什么是虚拟化技术，docker和虚拟机区别，docker可以用来做什么？")])])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-02-basic.html"}},[t._v("Docker基础 - 入门基础和Helloworld")]),t._v(" "),v("ul",[v("li",[t._v("在了解了虚拟化技术和Docker之后，让我们上手Docker，看看Docker是怎么工作的。这里会介绍CentOS环境下Docker的安装和配置，以及会给你展示两个实例，给你一个直观的理解。再啰嗦下，有条件的情况下直接看"),v("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),v("OutboundLink")],1),t._v(", 网上资料鱼龙混杂，版本也更新不及时。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-03-basic2.html"}},[t._v("Docker基础 - 仓库，镜像，容器详解")]),t._v(" "),v("ul",[v("li",[t._v("本文将从仓库，镜像，容器三个方面讲解常用的docker命令和使用等，对于开发而言这块使用的")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-03-basic-web-app.html"}},[t._v("Docker基础 - 一个web应用运行实例")]),t._v(" "),v("ul",[v("li",[t._v("通过上文我们已经基本了解了docker的结构（仓库，镜像，容器）以及跑docker应用了；本文将通过介绍一个web应用：向你展示如何进行主机与web容器之间的通信，这是web开发者常用的；第二，贯穿上文中内容, 且为我们后续讲解网络提供基础")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-07-network.html"}},[t._v("Docker基础 - Docker网络使用和配置")]),t._v(" "),v("ul",[v("li",[t._v("上文已经向你介绍了，web容器创建和容器互联了，但是容器之间为什么可以直接通信？主机和容器之间为何可以通信？如何进行自定义的配置呢？所以这节就是我们要讲述的Docker网络。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/devops/docker/docker-06-data.html"}},[t._v("Docker基础 - Docker数据卷和数据管理")]),t._v(" "),v("ul",[v("li",[t._v("Docker 容器的数据放哪里呢？ 本文带你理解如何在 Docker 内部以及容器之间管理数据。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"开发与方法论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发与方法论"}},[t._v("¶")]),t._v(" 开发与方法论")]),t._v(" "),v("h3",{attrs:{id:"开发原则流程协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发原则流程协议"}},[t._v("¶")]),t._v(" 开发原则,流程,协议")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-th-solid.html"}},[t._v("软件开发中的原则 - SOLID")]),t._v(" "),v("ul",[v("li",[t._v("在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将总结这些常见的原则，和具体阐述意义。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-th-cap.html"}},[t._v("分布式理论 - CAP")]),t._v(" "),v("ul",[v("li",[t._v("CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-th-base.html"}},[t._v("分布式理论 - BASE")]),t._v(" "),v("ul",[v("li",[t._v("BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-th-acid.html"}},[t._v("事务理论 - ACID")]),t._v(" "),v("ul",[v("li",[t._v("事务的四个基本特性")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-microservice-kangwei.html"}},[t._v("康威定律 - 微服务基础")]),t._v(" "),v("ul",[v("li",[t._v("微服务这个概念很早就提出了， 真正火起来是在2016年左右，而康威定律(Conway's Law)就是微服务理论基础。本文整理自肥侠的文章, 帮助大家理解微服务理论体系")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-workflow.html"}},[t._v("开发流程详解")]),t._v(" "),v("ul",[v("li",[t._v("谈谈我常见的敏捷开发流程的理解")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-opensource.html"}},[t._v("开源协议详解")]),t._v(" "),v("ul",[v("li",[t._v("开源不等于免费！为了加速我们的开发，我们会使用开源的软件和源码； 为避免商业风险，需要在使用时了解第三方如软件协议，版本，和已知CVE风险等；本文旨在从开源软件再发布过程使用权限的角度入手，总结各个常见开源协议的异同，方便理解。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-knowledge.html"}},[t._v("知识共享协议CC 4.0")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍知识共享许可协议，及本站遵守的多数站点会采用的知识共享协议CC BY-NC-SA 4.0协议，即署名-非商业性使用-相同方式共享协议。")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"代码规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码规范"}},[t._v("¶")]),t._v(" 代码规范")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/code-style/code-style-alibaba.html"}},[t._v("阿里巴巴 Java 开发手册")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/code-style/code-style-twitter.html"}},[t._v("Twitter Java Style Guide")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("¶")]),t._v(" 设计模式")]),t._v(" "),v("blockquote",[v("p",[t._v("在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将对24种设计模式和7个设计原则进行总结，和具体阐述意义。你可以通过这篇文章"),v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/1_overview.html"}},[t._v("设计模式 - Overview")]),t._v(" 了解整体上的知识点。")],1)]),t._v(" "),v("p",[v("em",[t._v("知识体系系统性梳理")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/design-pattern.png",loading:"lazy"}})]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第一步：创建型设计模式")])])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/2_singleton.html"}},[t._v("创建型 - 单例模式(Singleton pattern)")]),t._v(" "),v("ul",[v("li",[t._v("单例模式(Singleton pattern): 确保一个类只有一个实例，并提供该实例的全局访问点, 本文介绍6中常用的实现方式")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/3_simple_factory.html"}},[t._v("创建型 - 简单工厂(Simple Factory)")]),t._v(" "),v("ul",[v("li",[t._v("简单工厂(Simple Factory)，它把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化，这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/4_factory_method.html"}},[t._v("创建型 - 工厂方法(Factory Method)")]),t._v(" "),v("ul",[v("li",[t._v("工厂方法(Factory Method)，它定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/5_abstract_factory.html"}},[t._v("创建型 - 抽象工厂(Abstract Factory)")]),t._v(" "),v("ul",[v("li",[t._v("抽象工厂(Abstract Factory)，抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/6_builder.html"}},[t._v("创建型 - 生成器(Builder)")]),t._v(" "),v("ul",[v("li",[t._v("生成器(Builder)，封装一个对象的构造过程，并允许按步骤构造")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/7_prototype.html"}},[t._v("创建型 - 原型模式(Prototype)")]),t._v(" "),v("ul",[v("li",[t._v("原型模式(Prototype)，使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第二步：结构型设计模式")])])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/8_facade.html"}},[t._v("结构型 - 外观(Facade)")]),t._v(" "),v("ul",[v("li",[t._v("外观模式(Facade pattern)，它提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/9_adapter.html"}},[t._v("结构型 - 适配器(Adapter)")]),t._v(" "),v("ul",[v("li",[t._v("适配器模式(Adapter pattern): 将一个类的接口, 转换成客户期望的另一个接口。 适配器让原本接口不兼容的类可以合作无间。 对象适配器使用组合, 类适配器使用多重继承")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/10_bridge.html"}},[t._v("结构型 - 桥接(Bridge)")]),t._v(" "),v("ul",[v("li",[t._v("桥接模式(Bridge pattern): 使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/11_compsite.html"}},[t._v("结构型 - 组合(Composite)")]),t._v(" "),v("ul",[v("li",[t._v('组合模式(composite pattern): 允许你将对象组合成树形结构来表现"整体/部分"层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合')])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/12_decorator.html"}},[t._v("结构型 - 装饰(Decorator)")]),t._v(" "),v("ul",[v("li",[t._v("装饰者模式(decorator pattern): 动态地将责任附加到对象上, 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/13_flyweight.html"}},[t._v("结构型 - 享元(Flyweight)")]),t._v(" "),v("ul",[v("li",[t._v('享元模式(Flyweight Pattern): 利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。 它让某个类的一个实例能用来提供许多"虚拟实例"')])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/14_proxy.html"}},[t._v("结构型 - 代理(Proxy)")]),t._v(" "),v("ul",[v("li",[t._v("代理模式(Proxy pattern): 为另一个对象提供一个替身或占位符以控制对这个对象的访问")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("第三步：行为型设计模式")])])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/15_chain.html"}},[t._v("行为型 - 责任链(Chain Of Responsibility)")]),t._v(" "),v("ul",[v("li",[t._v("责任链模式(Chain of responsibility pattern): 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/16_strategy.html"}},[t._v("行为型 - 策略(Strategy)")]),t._v(" "),v("ul",[v("li",[t._v("策略模式(strategy pattern): 定义了算法族, 分别封闭起来, 让它们之间可以互相替换, 此模式让算法的变化独立于使用算法的客户")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/17_template.html"}},[t._v("行为型 - 模板方法(Template Method)")]),t._v(" "),v("ul",[v("li",[t._v("模板方法模式(Template pattern): 在一个方法中定义一个算法的骨架, 而将一些步骤延迟到子类中. 模板方法使得子类可以在不改变算法结构的情况下, 重新定义算法中的某些步骤")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/18_command.html"}},[t._v("行为型 - 命令模式(Command)")]),t._v(" "),v("ul",[v("li",[t._v('命令模式(Command pattern): 将"请求"封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作')])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/19_observer.html"}},[t._v("行为型 - 观察者(Observer)")]),t._v(" "),v("ul",[v("li",[t._v("观察者模式(observer pattern): 在对象之间定义一对多的依赖, 这样一来, 当一个对象改变状态, 依赖它的对象都会收到通知, 并自动更新")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/20_visitor.html"}},[t._v("行为型 - 访问者(Visitor)")]),t._v(" "),v("ul",[v("li",[t._v("访问者模式(visitor pattern): 当你想要为一个对象的组合增加新的能力, 且封装并不重要时, 就使用访问者模式")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/21_state.html"}},[t._v("行为型 - 状态(State)")]),t._v(" "),v("ul",[v("li",[t._v("状态模式(State pattern): 允许对象在内部状态改变时改变它的行为, 对象看起来好象改了它的类")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/22_interpreter.html"}},[t._v("行为型 - 解释器(Interpreter)")]),t._v(" "),v("ul",[v("li",[t._v("解释器模式(Interpreter pattern): 使用解释器模式为语言创建解释器，通常由语言的语法和语法分析来定义")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/23_iterator.html"}},[t._v("行为型 - 迭代器(Iterator)")]),t._v(" "),v("ul",[v("li",[t._v("迭代器模式(iterator pattern): 提供一种方法顺序访问一个聚合对象中的各个元素, 而又不暴露其内部的表示")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/24_mediator.html"}},[t._v("行为型 - 中介者(Mediator)")]),t._v(" "),v("ul",[v("li",[t._v("中介者模式(Mediator pattern) : 使用中介者模式来集中相关对象之间复杂的沟通和控制方式")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/dev-spec/pattern/25_memento.html"}},[t._v("行为型 - 备忘录(Memento)")]),t._v(" "),v("ul",[v("li",[t._v('备忘录模式(Memento pattern): 当你需要让对象返回之前的状态时(例如, 你的用户请求"撤销"), 你使用备忘录模式')])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"架构与系统设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构与系统设计"}},[t._v("¶")]),t._v(" 架构与系统设计")]),t._v(" "),v("p",[v("em",[t._v("学习思路")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/arch/arch-x-overview-learn2.png",loading:"lazy"}})]),t._v(" "),v("h3",{attrs:{id:"架构基础与方法论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构基础与方法论"}},[t._v("¶")]),t._v(" 架构基础与方法论")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 架构基础 - 基础知识")]),t._v("：首先带你梳理下架构中有哪些知识点，如何学习架构，并向你介绍架构相关基础知识。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-overview.html"}},[t._v("架构 - 知识体系")]),t._v(" "),v("ul",[v("li",[t._v("本系列将带你梳理下架构相关的知识体系，包括如何学习架构等。")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-basic.html"}},[t._v("架构 - 架构基础: 特点,本质...")]),t._v(" "),v("ul",[v("li",[t._v("本节总结下架构相关的基础知识：概述，特点，目标，本质...")])])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. 架构基础 - 理解架构")]),t._v("：然后带你从构架的视角，架构的演进，架构的服务演化等角度分析架构的维度； 而架构的模式即方法论总结，架构的核心要素是我们架构实现的目标。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-view.html"}},[t._v("架构 - 理解构架的视角")]),t._v(" "),v("ul",[v("li",[t._v("在学习架构时，我认为首先要理清楚架构的视角，"),v("strong",[t._v("因为你所认知的架构和别人所说的架构可能是两码事")]),t._v("。对于不同职位的视角是不一样的，比如开发而言他更多的看到的是开发架构；对售前人员，他可能更多的看到的是业务架构；对于运维人员，他看到的可能是运维架构；而对于技术支持和部署人员，他更多的看到的网络和物理架构")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-evolution.html"}},[t._v("架构 - 理解架构的演进")]),t._v(" "),v("ul",[v("li",[t._v("在学习架构时，"),v("strong",[t._v("第一步不要去学习框架，而是要学习架构的演进")]),t._v("。强烈推荐李智慧老师的《大型网站技术架构》，这本书翻起来很快，对构筑你自己的体系很有帮助，本文的内容来源于它，在此基础上拓展了下")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-service.html"}},[t._v("架构 - 理解架构的服务演化")]),t._v(" "),v("ul",[v("li",[t._v("Kubernetes、Service Mesh 和 Serverless应该是最近比较火的了，而上文主要从"),v("strong",[t._v("逻辑架构角度")]),t._v("分析了架构演进，本文将从"),v("strong",[t._v("服务演化")]),t._v("和"),v("strong",[t._v("容器编排化")]),t._v("的角度帮你增强对架构演进的认识")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-pattern.html"}},[t._v("架构 - 理解架构的模式")]),t._v(" "),v("ul",[v("li",[t._v("架构演进中有很多知识点，总体上可以归结为以下模式，"),v("strong",[t._v("这里说的模式本质是架构中技术点的抽象")]),t._v("。强烈推荐李智慧老师的《大型网站技术架构》，本文的内容也是来源于它，在此基础上拓展了下")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-core-metrics.html"}},[t._v("架构 - 理解架构的核心要素")]),t._v(" "),v("ul",[v("li",[t._v("一般来说软件架构需要关注"),v("strong",[t._v("性能、可用性、伸缩性、扩展性和安全性这5个架构要素")])])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"架构技术点详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构技术点详解"}},[t._v("¶")]),t._v(" 架构技术点详解")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("C. 架构技术点详解")]),t._v("：紧接着对于高并发和高可用，高性能，具体阐述其中涉及的知识点，比如：缓存，限流，降级和熔断，负载均衡，容灾备份,故障转移。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-y-cache.html"}},[t._v("架构之高并发：缓存")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("高并发实现的三板斧：缓存，限流和降级")]),t._v("。缓存在高并发系统中有者极其广阔的应用，需要重点掌握，本文重点介绍下缓存及其实现")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-y-ratelimit.html"}},[t._v("架构之高并发：限流")]),t._v(" "),v("ul",[v("li",[t._v("每个系统都有服务的上线，所以当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。限流其实就是：当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-y-reduce.html"}},[t._v("架构之高并发：降级和熔断")]),t._v(" "),v("ul",[v("li",[t._v("在高并发环境下，"),v("strong",[t._v("服务之间的依赖关系导致调用失败，解决的方式通常是: 限流->熔断->隔离->降级, 其目的是防止雪崩效应")])])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-y-loadbalance.html"}},[t._v("架构之高可用：负载均衡")]),t._v(" "),v("ul",[v("li",[t._v("负载均衡（Load Balance），意思是将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能，单点故障（高可用），扩展性（水平伸缩）的终极解决方案")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-y-backup.html"}},[t._v("架构之高可用：容灾备份,故障转移")]),t._v(" "),v("ul",[v("li",[t._v("TODO")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-x-security.html"}},[t._v("架构 - 保障架构安全")]),t._v(" "),v("ul",[v("li",[t._v("本文对架构安全知识点梳理")])])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"互联网架构案例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#互联网架构案例"}},[t._v("¶")]),t._v(" 互联网架构案例")]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("D. 架构案例")]),t._v("：从系统设计的角度，将上述的知识点融入进来，比如：秒杀系统设计等。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-seckill.html"}},[t._v("架构案例 - 秒杀系统设计")])],1)]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("E. 互联网架构案例")]),t._v("：最后我们再看下互联网架构案例，帮助自己理解和学习架构。")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-goods-detail.html"}},[t._v("京东: 亿级商品详情页设计")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-xianyu-goods.html"}},[t._v("闲鱼: 亿级商品结构化背后的思考和演进")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-xianyu-jiaoyi.html"}},[t._v("闲鱼: 多状态多操作的交易链路架构演进")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-xianyu-laxintoufang.html"}},[t._v("闲鱼: 拉新投放系统如何设计")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-xianyu-search.html"}},[t._v("闲鱼: 复杂搜索系统的可靠性优化之路")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-meituan-peisong.html"}},[t._v("美团: 配送系统架构演进实践")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-meituan-jishiwuliu.html"}},[t._v("美团: 即时物流的分布式系统架构设计")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-meituan-waimai.html"}},[t._v("美团: 外卖客户端高可用建设体系")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-meituan-db-hp.html"}},[t._v("美团: 数据库高可用架构的演进与设想")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/arch/arch-example-meituan-db-binlog.html"}},[t._v("美团: 数据同步到仓库的架构实践")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"架构参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#架构参考资料"}},[t._v("¶")]),t._v(" 架构参考资料")]),t._v(" "),v("p",[v("em",[t._v("书籍推荐")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("F. 架构参考资料")]),t._v("：此外还会总结下架构里面比较好的学习资料。")])]),t._v(" "),v("p",[v("strong",[t._v("1. 《大型网站技术架构：核心原理与案例分析》")])]),t._v(" "),v("p",[t._v("这是比较早，比较系统介绍大型网站技术架构的书，通俗易懂又充满智慧，即便你之前完全没接触过网站开发，通读前几章，也能快速获取到常见的网站技术架构及其应用场景。非常赞。")]),t._v(" "),v("p",[v("strong",[t._v("2. 《亿级流量网站架构核心技术》")])]),t._v(" "),v("p",[t._v("相比《大型网站技术架构》的高屋建瓴，开涛的这本《亿级流量网站架构核心技术》则落实到细节，网站架构中常见的各种技术，比如缓存、队列、线程池、代理……，统统都讲到了，而且配有核心代码。甚至连 Nginx 的配置都有！")]),t._v(" "),v("p",[t._v("如果你想在实现大流量网站时找参考技术和代码，这本书最合适啦。")]),t._v(" "),v("p",[v("strong",[t._v("3. 《架构即未来》")])]),t._v(" "),v("p",[t._v("这是一本“神书”啦，超越具体技术层面，着重剖析架构问题的根源，帮助我们弄清楚应该以何种方式管理、领导、组织和配置团队。")]),t._v(" "),v("p",[v("strong",[t._v("4. 《分布式服务架构：原理、设计与实战》")])]),t._v(" "),v("p",[t._v("这本书全面介绍了分布式服务架构的原理与设计，并结合作者在实施微服务架构过程中的实践经验，总结了保障线上服务健康、可靠的最佳方案，是一本架构级、实战型的重量级著作。")]),t._v(" "),v("p",[v("strong",[t._v("5. 《聊聊架构》")])]),t._v(" "),v("p",[t._v("这算是架构方面的一本神书了，从架构的原初谈起，从业务的拆分谈起，谈到架构的目的，架构师的角色，架构师如何将架构落地……强烈推荐。")]),t._v(" "),v("p",[t._v("不过，对于没有架构实践经验的小伙伴来讲，可能会觉得这本书比较虚，概念多，实战少。但如果你有过一两个项目的架构经验，就会深深认同书中追本溯源探讨的架构理念。")]),t._v(" "),v("p",[v("strong",[t._v("6. 《软件架构师的12项修炼》")])]),t._v(" "),v("p",[t._v("大多数时候所谓的“技术之玻璃天花板”其实只是缺乏软技能而已。这些技能可以学到，缺乏的知识可以通过决定改变的努力来弥补。")]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"微服务与服务网格"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务与服务网格"}},[t._v("¶")]),t._v(" 微服务与服务网格"),v("Badge",{attrs:{type:"warn",text:"TBD"}})],1),t._v(" "),v("h3",{attrs:{id:"微服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[t._v("¶")]),t._v(" 微服务")]),t._v(" "),v("h3",{attrs:{id:"spring-cloud"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud"}},[t._v("¶")]),t._v(" Spring Cloud")]),t._v(" "),v("h3",{attrs:{id:"kubernetes"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[t._v("¶")]),t._v(" Kubernetes")]),t._v(" "),v("h3",{attrs:{id:"service-mesh"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh"}},[t._v("¶")]),t._v(" Service Mesh")]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"产品与团队"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#产品与团队"}},[t._v("¶")]),t._v(" 产品与团队")]),t._v(" "),v("blockquote",[v("p",[t._v("作为一个技术人，你还有必要了解下产品设计，和团队组织管理等。@pdai")])]),t._v(" "),v("h3",{attrs:{id:"产品相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#产品相关"}},[t._v("¶")]),t._v(" 产品相关")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/team/team-z-wechat.html"}},[t._v("张小龙：微信背后的产品观")])],1)]),t._v(" "),v("h3",{attrs:{id:"团队与组织相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#团队与组织相关"}},[t._v("¶")]),t._v(" 团队与组织相关")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/team/team-z-task-emergency.html"}},[t._v("华为：软件开发团队如何管理琐碎、突发性任务")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/team/team-z-arch-future.html"}},[t._v("陈春花、赵海然：共生型组织四个特征和四重境界")])],1)]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"关于本站点和我"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于本站点和我"}},[t._v("¶")]),t._v(" 关于本站点和我")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("感恩")]),t._v(" "),v("p",[t._v("感恩活着，感谢岁月静好。@pdai")])]),t._v(" "),v("h3",{attrs:{id:"关于我"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于我"}},[t._v("¶")]),t._v(" 关于我")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("A. 关于我")]),t._v("：如果你我本人以及我是如何构建知识体系等，可以在如下章节中了解。")])]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/about/me/about-me.html"}},[t._v("关于 - 我")]),t._v(" "),v("ul",[v("li",[t._v("你的时间花在哪里，你的收获就在哪里。技术只是技术，生活中的一小部分，仅此而已")]),t._v(" "),v("li",[t._v("等在合适的时机会放出我的微信，并且会建学习讨论圈，尽请期待")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/me/about-arch.html"}},[t._v("关于 - 如何构建知识体系")]),t._v(" "),v("ul",[v("li",[t._v("本文主要小结下我在构建一个知识体系时的思考")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/me/about-motivation.html"}},[t._v("关于 - 如何自我驱动")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍我总结这个知识体系所用的工具栈和自我驱动（类似于公司里敏捷开发）")])])],1)]),t._v(" "),v("h3",{attrs:{id:"关于本站点：内容构建和部署"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于本站点：内容构建和部署"}},[t._v("¶")]),t._v(" 关于本站点：内容，构建和部署")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("B. 关于本站点")]),t._v("：如果你对这个站点感兴趣，可以在如下章节了解，包含排版，搭建，编译，部署，域名，https以及备案等。")])]),t._v(" "),v("p",[v("em",[t._v("相关文章")])]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/md/about/me/about-content.html"}},[t._v("关于文档 - 文档的内容")]),t._v(" "),v("ul",[v("li",[t._v("你觉的《Java 全栈知识体系》还应该有哪些内容，或者现有的章节中你发现有好的资源也可以推荐，请在这里留言区向我推荐吧")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/me/about-content-style.html"}},[t._v("关于文档 - 文档的排版")]),t._v(" "),v("ul",[v("li",[t._v("统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。本文来源于 "),v("a",{attrs:{href:"https://github.com/mzlogin/chinese-copywriting-guidelines/blob/Simplified/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文文案排版指北"),v("OutboundLink")],1),t._v("，以此规范来约束本站的所有文档")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/blog/blog-build-vuepress.html"}},[t._v("关于文档 - 文档的搭建")]),t._v(" "),v("ul",[v("li",[t._v("搭建博客有很多选择，平台性的比如: 知名的CSDN, 博客园, 知乎，简书等；自己搭建比如 Hexo, Gitbook, Docisify等等。我有一颗不安分的心，每种我都用过...但是最后的最后我还是选择了将博客逐移至自己搭建的vuepress")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/blog/blog-build-ci.html"}},[t._v("关于文档 - 文档的自动编译")]),t._v(" "),v("ul",[v("li",[t._v("文档托管在Github，有几种选择: Github自带的Github Actions，或者插件Travis CI， 或者插件Circle CI；本文简述本站是如何实现自动化编译的")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/blog/blog-build-cd.html"}},[t._v("关于文档 - 文档的自动部署")]),t._v(" "),v("ul",[v("li",[t._v("本文主要介绍 当前文档是如何在我自己的服务器自动编译部署的")])])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/md/about/blog/blog-build-ssl.html"}},[t._v("关于文档 - 文档的域名，HTTPS，备案")]),t._v(" "),v("ul",[v("li",[t._v("本文主要记录 本文档的域名，HTTPS，备案。 文档的域名，HTTPS，备案 这三个步骤不能反，因为存在依赖关系。")])])],1)]),t._v(" "),v("h3",{attrs:{id:"关于内容版权"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于内容版权"}},[t._v("¶")]),t._v(" 关于内容版权")]),t._v(" "),v("blockquote",[v("p",[t._v("本站点申明如下：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("我的初衷？")]),t._v("：希望我的总结可以帮助到在后端开发迷茫的IT从业者, "),v("strong",[t._v("永远相信助人者自助")]),t._v("；")]),t._v(" "),v("li",[v("strong",[t._v("非商业用途？")]),t._v("：纯个人学习站点，不会用于商业用途；")]),t._v(" "),v("li",[v("strong",[t._v("内容来源？")]),t._v("：目前站点内容大约50%内容为原创，50%内容系整合或者转载，我在每篇文章中尽量注明了出处；针对转载或引用的内容，侵删；")]),t._v(" "),v("li",[v("strong",[t._v("可以转载？")]),t._v("：遵循行业内"),v("RouterLink",{attrs:{to:"/md/dev-spec/spec/dev-knowledge.html"}},[t._v("知识共享协议CC 4.0")]),t._v("下可以注明出处转载；")],1)])]),t._v(" "),v("h3",{attrs:{id:"关于我的读书"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于我的读书"}},[t._v("¶")]),t._v(" 关于我的读书")]),t._v(" "),v("p",[t._v("TODO，这里会总结以下我读过的觉得有意义的书")]),t._v(" "),v("h3",{attrs:{id:"关于我的技术观"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于我的技术观"}},[t._v("¶")]),t._v(" 关于我的技术观")]),t._v(" "),v("p",[t._v("TODO，这里会写一些我的技术观")]),t._v(" "),v("h3",{attrs:{id:"关于我的小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于我的小结"}},[t._v("¶")]),t._v(" 关于我的小结")]),t._v(" "),v("p",[t._v("TODO， 这里会写一些我的阶段性总结")]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"后面还有哪些内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#后面还有哪些内容"}},[t._v("¶")]),t._v(" 后面还有哪些内容")]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),v("p",[t._v("本知识体系导读的后续的章节还在紧锣密鼓的添加中, 还有大量的内容即将添加进来，尽请期待...@pdai")])]),t._v(" "),v("div",{staticClass:"custom-block danger"},[v("p",{staticClass:"custom-block-title"},[t._v("感谢您的关注!")]),t._v(" "),v("p",[t._v("有些章节其实我已经梳理或者写过了(可以看其它章节部分，这里我暂时没给链接；还有一部分我隐藏掉了)，暂时还没放到这里是因为我觉的还不成体系，我会再次梳理和丰富下并且将BAT大厂的题目融合进来。请多给我一些时间，尽请期待！@pdai")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"给我留言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#给我留言"}},[t._v("¶")]),t._v(" 给我留言")]),t._v(" "),v("Vssue",{attrs:{title:"给我留言"}})],1)}),[],!1,null,null,null);a.default=r.exports}}]);