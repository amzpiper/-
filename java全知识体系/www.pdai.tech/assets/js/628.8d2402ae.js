(window.webpackJsonp=window.webpackJsonp||[]).push([[628],{1093:function(r,t,i){"use strict";i.r(t);var a=i(11),n=Object(a.a)({},(function(){var r=this,t=r.$createElement,i=r._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[i("h1",{attrs:{id:"springboot入门---springboot简介"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springboot入门---springboot简介"}},[r._v("¶")]),r._v(" SpringBoot入门 - SpringBoot简介")]),r._v(" "),i("blockquote",[i("p",[r._v("为什么有了SpringFramework还会诞生SpringBoot？简单而言，因为虽然Spring的组件代码是轻量级的，但它的配置却是重量级的；所以SpringBoot的设计策略是通过"),i("strong",[r._v("开箱即用")]),r._v("和"),i("strong",[r._v("约定大于配置")]),r._v(" 来解决配置重的问题的。@pdai")])]),r._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#springboot%E5%85%A5%E9%97%A8---springboot%E7%AE%80%E4%BB%8B"}},[r._v("SpringBoot入门 - SpringBoot简介")]),r._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#springframework%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E6%B2%A1%E6%9C%89%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98"}},[r._v("SpringFramework解决了什么问题，没有解决什么问题？")]),r._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#springframework%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98"}},[r._v("SpringFramework解决了什么问题？")])]),r._v(" "),i("li",[i("a",{attrs:{href:"#springframework%E6%B2%A1%E6%9C%89%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98"}},[r._v("SpringFramework没有解决了什么问题？")])])])]),r._v(" "),i("li",[i("a",{attrs:{href:"#sringboot%E7%9A%84%E6%A6%82%E8%BF%B0"}},[r._v("SringBoot的概述")]),r._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#springboot%E8%A7%A3%E5%86%B3%E4%B8%8A%E8%BF%B0spring%E7%9A%84%E7%BC%BA%E7%82%B9"}},[r._v("SpringBoot解决上述Spring的缺点")])]),r._v(" "),i("li",[i("a",{attrs:{href:"#springboot%E7%9A%84%E7%89%B9%E7%82%B9"}},[r._v("SpringBoot的特点")])]),r._v(" "),i("li",[i("a",{attrs:{href:"#springboot%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"}},[r._v("SpringBoot的核心功能")])])])]),r._v(" "),i("li",[i("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[r._v("参考文章")])])])])]),r._v(" "),i("h2",{attrs:{id:"springframework解决了什么问题没有解决什么问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springframework解决了什么问题没有解决什么问题"}},[r._v("¶")]),r._v(" SpringFramework解决了什么问题，没有解决什么问题？")]),r._v(" "),i("h3",{attrs:{id:"springframework解决了什么问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springframework解决了什么问题"}},[r._v("¶")]),r._v(" SpringFramework解决了什么问题？")]),r._v(" "),i("p",[r._v("Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的EnterpriseJavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。")]),r._v(" "),i("p",[r._v("1.使用Spring的IOC容器,将对象之间的依赖关系交给Spring,降低组件之间的耦合性,让我们更专注于应用逻辑\n2.可以提供众多服务,事务管理,WS等。\n3.AOP的很好支持,方便面向切面编程。\n4.对主流的框架提供了很好的集成支持,如Hibernate,Struts2,JPA等\n5.Spring DI机制降低了业务对象替换的复杂性。\n6.Spring属于低侵入,代码污染极低。\n7.Spring的高度可开放性,并不强制依赖于Spring,开发者可以自由选择Spring部分或全部")]),r._v(" "),i("h3",{attrs:{id:"springframework没有解决了什么问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springframework没有解决了什么问题"}},[r._v("¶")]),r._v(" SpringFramework没有解决了什么问题？")]),r._v(" "),i("p",[r._v("虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。")]),r._v(" "),i("p",[r._v("所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。")]),r._v(" "),i("p",[r._v("除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。")]),r._v(" "),i("p",[r._v("1.jsp中要写很多代码、控制器过于灵活,缺少一个公用控制器\n2.Spring不支持分布式,这也是EJB仍然在用的原因之一。")]),r._v(" "),i("h2",{attrs:{id:"sringboot的概述"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#sringboot的概述"}},[r._v("¶")]),r._v(" SringBoot的概述")]),r._v(" "),i("h3",{attrs:{id:"springboot解决上述spring的缺点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springboot解决上述spring的缺点"}},[r._v("¶")]),r._v(" SpringBoot解决上述Spring的缺点")]),r._v(" "),i("p",[r._v("SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。")]),r._v(" "),i("h3",{attrs:{id:"springboot的特点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springboot的特点"}},[r._v("¶")]),r._v(" SpringBoot的特点")]),r._v(" "),i("ol",[i("li",[r._v("为基于Spring的开发提供更快的入门体验")]),r._v(" "),i("li",[r._v("开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求")]),r._v(" "),i("li",[r._v("提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等")])]),r._v(" "),i("p",[r._v("SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式")]),r._v(" "),i("h3",{attrs:{id:"springboot的核心功能"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#springboot的核心功能"}},[r._v("¶")]),r._v(" SpringBoot的核心功能")]),r._v(" "),i("ul",[i("li",[i("strong",[r._v("起步依赖")]),r._v("\n起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。")])]),r._v(" "),i("p",[r._v("简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。")]),r._v(" "),i("ul",[i("li",[i("strong",[r._v("自动配置")])])]),r._v(" "),i("p",[r._v("Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。")]),r._v(" "),i("h2",{attrs:{id:"参考文章"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[r._v("¶")]),r._v(" 参考文章")]),r._v(" "),i("p",[r._v("https://spring.io/projects/spring-boot")]),r._v(" "),i("p",[r._v("https://baike.baidu.com/item/Spring%20Boot/20249767?fr=aladdin")]),r._v(" "),i("p",[r._v("https://www.jianshu.com/p/24add3c5fedb")]),r._v(" "),i("p",[r._v("https://www.cnblogs.com/luzhanshi/p/10592209.html")])])}),[],!1,null,null,null);t.default=n.exports}}]);