(window.webpackJsonp=window.webpackJsonp||[]).push([[647],{1112:function(t,o,i){"use strict";i.r(o);var r=i(11),n=Object(r.a)({},(function(){var t=this,o=t.$createElement,i=t._self._c||o;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"♥springboot-知识体系详解♥"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#♥springboot-知识体系详解♥"}},[t._v("¶")]),t._v(" ♥SpringBoot 知识体系详解♥")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),i("p",[t._v("Spring，Spring Boot系列的章节在整理中... @pdai")])]),t._v(" "),i("blockquote",[i("p",[t._v("首先，在开始SpringBoot开发时，我们了解一些技术栈背景并通过Hello World级别应用程序开始延伸出SpringBoot入门应用的开发。")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-overview.html"}},[t._v("SpringBoot入门 - SpringBoot 简介")]),t._v(" "),i("ul",[i("li",[t._v("为什么有了SpringFramework还会诞生SpringBoot？简单而言，因为虽然Spring的组件代码是轻量级的，但它的配置却是重量级的；所以SpringBoot的设计策略是通过开箱即用和约定大于配置 来解决配置重的问题的。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-world.html"}},[t._v("SpringBoot入门 - 创建第一个Hello world工程")]),t._v(" "),i("ul",[i("li",[t._v("我们了解了SpringBoot和SpringFramework的关系之后，我们可以开始创建一个Hello World级别的项目了。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-world-mvc.html"}},[t._v("SpringBoot入门 - 对Hello world进行MVC分层")]),t._v(" "),i("ul",[i("li",[t._v("上文中我们创建一个简单的Hello Wold级别的web应用程序，但是存在一个问题，我们将所有代码都放在一个类中的, 这显然是不合理的，那么一个经典的CRUD项目如何分包呢？本文结合常见的MVC分层思路带你学习常见的包结构划分。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-h2-jpa.html"}},[t._v("SpringBoot入门 - 添加内存数据库H2")]),t._v(" "),i("ul",[i("li",[t._v("上文我们展示了通过学习经典的MVC分包结构展示了一个用户的增删查改项目，但是我们没有接入数据库；本文将在上文的基础上，增加一个H2内存数据库，并且通过Spring 提供的数据访问包JPA进行数据查询。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-banner.html"}},[t._v("SpringBoot入门 - 定制自己的Banner")]),t._v(" "),i("ul",[i("li",[t._v("我们在启动Spring Boot程序时，有SpringBoot的Banner信息，那么如何自定义成自己项目的信息呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-logback.html"}},[t._v("SpringBoot入门 - 添加Logback日志")]),t._v(" "),i("ul",[i("li",[t._v("SpringBoot开发中如何选用日志框架呢？ 出于性能等原因，Logback 目前是springboot应用日志的标配； 当然有时候在生产环境中也会考虑和三方中间件采用统一处理方式。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-devtool.html"}},[t._v("SpringBoot入门 - 配置热部署devtools工具")]),t._v(" "),i("ul",[i("li",[t._v("在SpringBoot开发调试中，如果我每行代码的修改都需要重启启动再调试，可能比较费时间；SpringBoot团队针对此问题提供了spring-boot-devtools（简称devtools）插件，它试图提升开发调试的效率。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-hello-anno.html"}},[t._v("SpringBoot入门 - 开发中还有哪些常用注解")]),t._v(" "),i("ul",[i("li",[t._v("SpringBoot中常用的注解")])])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("接着， 站在接口设计和实现的角度，从实战开发中梳理出，关于接口开发的技术要点。")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-response.html"}},[t._v("SpringBoot接口 - 如何统一接口封装")]),t._v(" "),i("ul",[i("li",[t._v("在以SpringBoot开发Restful接口时，统一返回方便前端进行开发和封装，以及出现时给出响应编码和信息。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-param.html"}},[t._v("SpringBoot接口 - 如何对参数进行校验")]),t._v(" "),i("ul",[i("li",[t._v("在以SpringBoot开发Restful接口时, 对于接口的查询参数后台也是要进行校验的，同时还需要给出校验的返回信息放到上文我们统一封装的结构中。那么如何优雅的进行参数的统一校验呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-param-i18n.html"}},[t._v("SpringBoot接口 - 如何参数校验国际化")]),t._v(" "),i("ul",[i("li",[t._v("上文我们学习了如何对SpringBoot接口进行参数校验，但是如果需要有国际化的信息，应该如何优雅处理呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-exception.html"}},[t._v("SpringBoot接口 - 如何统一异常处理")]),t._v(" "),i("ul",[i("li",[t._v("SpringBoot接口如何对异常进行统一封装，并统一返回呢？以上文的参数校验为例，如何优雅的将参数校验的错误信息统一处理并封装返回呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-version.html"}},[t._v("SpringBoot接口 - 如何提供多个版本接口")]),t._v(" "),i("ul",[i("li",[t._v("在以SpringBoot开发Restful接口时，由于模块，系统等业务的变化，需要对同一接口提供不同版本的参数实现（老的接口还有模块或者系统在用，不能直接改，所以需要不同版本）。如何更加优雅的实现多版本接口呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-doc.html"}},[t._v("SpringBoot接口 - 如何生成接口文档")]),t._v(" "),i("ul",[i("li",[t._v("SpringBoot开发Restful接口，有什么API规范吗？如何快速生成API文档呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-3rd.html"}},[t._v("SpringBoot接口 - 如何访问外部接口")]),t._v(" "),i("ul",[i("li",[t._v("在SpringBoot接口开发中，存在着本模块的代码需要访问外面模块接口或外部url链接的需求, 比如调用外部的地图API或者天气API。那么有哪些方式可以调用外部接口呢？")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-jiami.html"}},[t._v("SpringBoot接口 - 如何对接口进行加密")]),t._v(" "),i("ul",[i("li",[t._v("在以SpringBoot开发后台API接口时，会存在哪些接口不安全的因素呢？通常如何去解决的呢？本文主要介绍API"),i("strong",[t._v("接口有不安全的因素")]),t._v("以及"),i("strong",[t._v("常见的保证接口安全的方式")]),t._v("，重点"),i("strong",[t._v("实践如何对接口进行签名")]),t._v("。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-mideng.html"}},[t._v("SpringBoot接口 - 如何保证接口幂等")]),t._v(" "),i("ul",[i("li",[t._v("在以SpringBoot开发Restful接口时，如何防止接口的重复提交呢？ 本文主要介绍接口幂等相关的知识点，并实践常见基于Token实现接口幂等。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-xianliu.html"}},[t._v("SpringBoot接口 - 如何实现接口限流之单实例")]),t._v(" "),i("ul",[i("li",[t._v("在以SpringBoot开发Restful接口时，当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。在接口层如何做限流呢？ 本文主要回顾限流的知识点，并实践单实例限流的一种思路。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-interface-xianliu-dist.html"}},[t._v("SpringBoot接口 - 如何实现接口限流之分布式")]),t._v(" "),i("ul",[i("li",[t._v("上文中介绍了单实例下如何在业务接口层做限流，本文主要介绍分布式场景下限流的方案，以及什么样的分布式场景下需要在业务层加限流而不是接入层; 并且结合kailing开源的"),i("a",{attrs:{href:"https://gitee.com/kailing/ratelimiter-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[t._v("ratelimiter-spring-boot-starter"),i("OutboundLink")],1),t._v("为例， 学习"),i("strong",[t._v("思路+代码封装+starter封装")]),t._v("。")])])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("接下来，我们学习SpringBoot如何集成数据库，比如MySQL数据库，常用的方式有JPA和MyBatis。")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-jpa.html"}},[t._v("SpringBoot集成MySQL - 基于JPA的封装")]),t._v(" "),i("ul",[i("li",[t._v("在实际开发中，最为常见的是基于数据库的CRUD封装等，比如SpringBoot集成MySQL数据库，常用的方式有JPA和MyBatis； 本文主要介绍基于JPA方式的基础封装思路。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-xml.html"}},[t._v("SpringBoot集成MySQL - MyBatis XML方式")]),t._v(" "),i("ul",[i("li",[t._v("上文介绍了用JPA方式的集成MySQL数据库，JPA方式在中国以外地区开发而言基本是标配，在国内MyBatis及其延伸框架较为主流。本文主要介绍"),i("strong",[t._v("MyBatis技栈的演化")]),t._v("以及"),i("strong",[t._v("SpringBoot集成基础的MyBatis XML实现方式")]),t._v("的实例。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-anno.html"}},[t._v("SpringBoot集成MySQL - MyBatis 注解方式")]),t._v(" "),i("ul",[i("li",[t._v("上文主要介绍了Spring集成MyBatis访问MySQL，采用的是XML配置方式；我们知道除了XML配置方式，MyBatis还支持注解方式。本文主要介绍SpringBoot+MyBatis注解方式。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-page.html"}},[t._v("SpringBoot集成MySQL - MyBatis PageHelper分页")]),t._v(" "),i("ul",[i("li",[t._v("前文中，我们展示了Spring Boot与MyBatis的集成，但是没有展示分页实现。本文专门介绍分页相关知识体系和基于MyBatis的物理分页PageHelper。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-multi-ds.html"}},[t._v("SpringBoot集成MySQL - MyBatis 多个数据源")]),t._v(" "),i("ul",[i("li",[t._v("前文介绍的SpringBoot集成单个MySQL数据库的情形，那么什么场景会使用多个数据源以及什么场景会需要多个数据源的动态切换呢？本文主要介绍上述场景及SpringBoot+MyBatis实现多个数据源的方案和示例。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-plus.html"}},[t._v("SpringBoot集成MySQL - MyBatis-Plus方式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-plus-gen.html"}},[t._v("SpringBoot集成MySQL - MyBatis-Plus代码自动生成")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-mybatis-plus-multi-tenant.html"}},[t._v("SpringBoot集成MySQL - MyBatis-Plus基于字段隔离的多租户")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-shardingjdbc.html"}},[t._v("SpringBoot集成MySQL - 分库分表ShardingJDBC")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-HikariCP.html"}},[t._v("SpringBoot集成连接池 - 数据库连接池和默认连接池HikariCP")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-druid.html"}},[t._v("SpringBoot集成连接池 - 集成数据库Druid连接池")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-liquibase.html"}},[t._v("SpringBoot数据库管理 - 用Liquibase对数据库管理和迁移")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mysql-flyway.html"}},[t._v("SpringBoot数据库管理 - 用flyway对数据库管理和迁移")])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("学习完SpringBoot和SQL数据库集成后，我们再学习下NoSQL数据库的开发和集成。")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-redis-jedis.html"}},[t._v("SpringBoot集成集成Redis - 基于RedisTemplate+Jedis的数据操作")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-postgre-jpa.html"}},[t._v("SpringBoot集成Postgre - 基于JPA封装基础数据操作")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-postgre-jpa-jsonb.html"}},[t._v("SpringBoot集成Postgre - NoSQL特性JSONB的封装")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-mongodb-template.html"}},[t._v("SpringBoot集成MongoDB - 基于MongoTemplate的数据操作")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-elastic-template.html"}},[t._v("SpringBoot集成ElasticSearch - 基于ElasticSearchTemplate的数据操作")])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("进一步，我们看下SpringBoot集成Socket")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-socket-websocket.html"}},[t._v("SpringBoot集成Socket - 基础的Websocket实现")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-socket-netty.html"}},[t._v("SpringBoot集成Socket - 用Netty实现socket")])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("开发中常用的还有定时任务，我们看下SpringBoot集成定时任务")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-timer.html"}},[t._v("SpringBoot定时任务 - Timer实现方式")]),t._v(" "),i("ul",[i("li",[t._v("定时任务在实际开发中有着广泛的用途，本文主要帮助你构建定时任务的知识体系，同时展示Timer 的schedule和scheduleAtFixedRate例子；后续的文章中我们将逐一介绍其它常见的与SpringBoot的集成。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-executor-timer.html"}},[t._v("SpringBoot定时任务 - ScheduleExecutorService实现方式")]),t._v(" "),i("ul",[i("li",[t._v("上文介绍的Timer在实际开发中很少被使用， 因为Timer底层是使用一个单线来实现多个Timer任务处理的，所有任务都是由同一个线程来调度，所有任务都是串行执行。而ScheduledExecutorService是基于线程池的，可以开启多个线程进行执行多个任务，每个任务开启一个线程； 这样任务的延迟和未处理异常就不会影响其它任务的执行了。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-spring-task-timer.html"}},[t._v("SpringBoot定时任务 - Spring tasks实现方式")]),t._v(" "),i("ul",[i("li",[t._v("Timer和ScheduledExecutorService是JDK内置的定时任务方案，而主流的SpringBoot集成方案有两种，一种是Spring Sechedule, 另一种是Spring集成Quartz； 本文主要介绍Spring Schedule实现方式。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-hashwheeltimer-timer.html"}},[t._v("SpringBoot定时任务 - Netty HashedWheelTimer方式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-quartz-timer.html"}},[t._v("SpringBoot定时任务 - 基础quartz实现方式")]),t._v(" "),i("ul",[i("li",[t._v("除了SpringTask，最为常用的Quartz，并且Spring也集成了Quartz的框架。本文主要介绍Quartz和基础的Quartz的集成案例。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-quartz-cluster-timer.html"}},[t._v("SpringBoot定时任务 - 分布式quartz cluster方式")]),t._v(" "),i("ul",[i("li",[t._v("通常我们使用quartz只是实现job单实例运行，本例将展示quartz实现基于数据库的分布式任务管理，和控制job生命周期。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-elastic-job-timer.html"}},[t._v("SpringBoot定时任务 - 分布式elastic-job方式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-task-xxl-job-timer.html"}},[t._v("SpringBoot定时任务 - 分布式xxl-job方式")])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("SpringBoot集成后端视图")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-view-thymeleaf.html"}},[t._v("SpringBoot后端视图 - 基于Thymeleaf视图解析")])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("SpringBoot集成监控")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-monitor-actuartor.html"}},[t._v("SpringBoot监控 - 集成acturator监控工具")]),t._v(" "),i("ul",[i("li",[t._v("当SpringBoot的应用部署到生产环境中后，如何监控和管理呢？比如审计日志，监控状态，指标收集等。为了解决这个问题，SpringBoot提供了Actuator。本文主要介绍Spring Boot Actuator及实现案例。")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-x-monitor-boot-admin.html"}},[t._v("SpringBoot监控 - 集成springboot admin监控工具")]),t._v(" "),i("ul",[i("li",[t._v("上文中展示了SpringBoot提供了Actuator对应用进行监控和管理， 而Spring Boot Admin能够将 Actuator 中的信息进行界面化的展示，也可以监控所有 Spring Boot 应用的健康状况，提供实时警报功能。 本文主要介绍springboot admin以及SpringBoot和springboot admin的集成。")])])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("SpringBoot进阶")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-y-auo-config.html"}},[t._v("SpringBoot进阶 - 实现自动装配原理")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-y-starter.html"}},[t._v("SpringBoot进阶 - 自定义starter")]),t._v(" "),i("ul",[i("li",[t._v("如何将自己的模块封装成starter， 并给其它springBoot项目使用呢？ 本文主要介绍在Springboot封装一个自定义的Starter的一个Demo，从创建一个模块->封装starter->使用")])])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-y-wrap-tomcat.html"}},[t._v("SpringBoot进阶 - 嵌入web容器Tomcat原理")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/md/spring/springboot/springboot-y-th-actuartor.html"}},[t._v("SpringBoot进阶 - 健康检查Acturator原理")])],1)]),t._v(" "),i("blockquote",[i("p",[t._v("待加入体系")])]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://blog.csdn.net/tianyaleixiaowu/article/details/89916891",target:"_blank",rel:"noopener noreferrer"}},[t._v("Springboot集成sentinel实现接口限流入门"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("SpringBoot集成文件系统\n"),i("ul",[i("li",[t._v("SpringBoot + MinIO")]),t._v(" "),i("li",[t._v("SpringBoot + aliyun")]),t._v(" "),i("li",[t._v("SpringBoot + TecentCloud")]),t._v(" "),i("li",[t._v("SpringBoot + FastDFS")])])]),t._v(" "),i("li",[t._v("SpringBoot集成认证授权\n"),i("ul",[i("li",[t._v("SpringBoot + Shiro")]),t._v(" "),i("li",[t._v("SpringBoot + Spring Security\n"),i("ul",[i("li",[t._v("常规实现")]),t._v(" "),i("li",[t._v("Oauth2")])])]),t._v(" "),i("li",[t._v("SpringBoot + SA-Token")]),t._v(" "),i("li",[t._v("SpringBoot + Keycloak")]),t._v(" "),i("li",[t._v("SpringBoot + 登录验证码\n"),i("ul",[i("li",[t._v("AJ_Captcha")])])])])]),t._v(" "),i("li",[t._v("SpringBoot集成接口（拓展）\n"),i("ul",[i("li",[t._v("SmartDoc")]),t._v(" "),i("li",[t._v("magic-api\n"),i("ul",[i("li",[t._v("https://juejin.cn/post/6968632716434604068")])])]),t._v(" "),i("li",[t._v("接口设计和交互工具\n"),i("ul",[i("li",[t._v("APIFox")]),t._v(" "),i("li",[t._v("PostMan")]),t._v(" "),i("li",[t._v("Apizza")])])])])]),t._v(" "),i("li",[t._v("SpringBoot集成数据库连接池\n"),i("ul",[i("li",[t._v("HikariCP")]),t._v(" "),i("li",[t._v("Druid")])])]),t._v(" "),i("li",[t._v("SpringBoot集成缓存\n"),i("ul",[i("li",[t._v("Spring Cache")]),t._v(" "),i("li",[t._v("EHCache")])])]),t._v(" "),i("li",[t._v("SpringBoot集成后端视图\n"),i("ul",[i("li",[t._v("Thymeleaf")]),t._v(" "),i("li",[t._v("FreeMarker")]),t._v(" "),i("li",[t._v("Velocity")]),t._v(" "),i("li",[t._v("Mustache")]),t._v(" "),i("li",[t._v("JSP")])])]),t._v(" "),i("li",[t._v("SpringBoot集成消息队列\n"),i("ul",[i("li",[t._v("ActiveMQ")]),t._v(" "),i("li",[t._v("RabbitMQ")]),t._v(" "),i("li",[t._v("ZeroMQ")]),t._v(" "),i("li",[t._v("Kafka")])])]),t._v(" "),i("li",[t._v("SpringBoot集成日志\n"),i("ul",[i("li",[t._v("SpringBoot+ELK\n"),i("ul",[i("li",[t._v("https://juejin.cn/post/6844904196672585741")])])])])]),t._v(" "),i("li",[t._v("SpringBoot集成文档\n"),i("ul",[i("li",[t._v("文件上传")]),t._v(" "),i("li",[t._v("Excel导入导出 - POI")]),t._v(" "),i("li",[t._v("Excel导入导出 - EasyExcel")]),t._v(" "),i("li",[t._v("PDF导出 - Itext")]),t._v(" "),i("li",[t._v("Word导出")])])]),t._v(" "),i("li",[t._v("SpringBoot集成通知\n"),i("ul",[i("li",[t._v("邮件")]),t._v(" "),i("li",[t._v("钉钉")]),t._v(" "),i("li",[t._v("微信")]),t._v(" "),i("li",[t._v("短信")])])]),t._v(" "),i("li",[t._v("SpringBoot应用部署\n"),i("ul",[i("li",[t._v("打包成Jar+拓展")]),t._v(" "),i("li",[t._v("打包成war")]),t._v(" "),i("li",[t._v("替换为Jetty")]),t._v(" "),i("li",[t._v("Linux VM")]),t._v(" "),i("li",[t._v("Windows")]),t._v(" "),i("li",[t._v("Docker")]),t._v(" "),i("li",[t._v("Docker Compose")]),t._v(" "),i("li",[t._v("Jenkins")])])]),t._v(" "),i("li",[t._v("SpringBoot应用安全\n"),i("ul",[i("li",[t._v("SpringBoot 配置文件密码\n"),i("ul",[i("li",[t._v("https://www.cnblogs.com/kexianting/p/11689289.html")]),t._v(" "),i("li",[t._v("https://www.cnblogs.com/ruhuanxingyun/p/12152579.html")])])]),t._v(" "),i("li",[t._v("Druid 密码配置")])])]),t._v(" "),i("li",[t._v("SpringBoot集成其它\n"),i("ul",[i("li",[t._v("支付")]),t._v(" "),i("li",[t._v("OPC-UA milo")])])]),t._v(" "),i("li",[t._v("SpringBoot Intergration\n"),i("ul",[i("li",[t._v("https://spring.io/projects/spring-integration")])])])])])}),[],!1,null,null,null);o.default=n.exports}}]);