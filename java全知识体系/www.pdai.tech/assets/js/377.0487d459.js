(window.webpackJsonp=window.webpackJsonp||[]).push([[377],{842:function(a,t,s){"use strict";s.r(t);var e=s(11),i=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis详解---总体框架设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解---总体框架设计"}},[a._v("¶")]),a._v(" MyBatis详解 - 总体框架设计")]),a._v(" "),s("blockquote",[s("p",[a._v("MyBatis整体架构包含哪些层呢？这些层次是如何设计的呢？@pdai")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---%E6%80%BB%E4%BD%93%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1"}},[a._v("MyBatis详解 - 总体框架设计")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E6%9E%B6%E6%9E%84%E6%A6%82%E8%A7%88"}},[a._v("MyBatis架构概览")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E6%8E%A5%E5%8F%A3%E5%B1%82-%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F"}},[a._v("接口层-和数据库交互的方式")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8%E4%BC%A0%E7%BB%9F%E7%9A%84mybatis%E6%8F%90%E4%BE%9B%E7%9A%84api"}},[a._v("使用传统的MyBatis提供的API")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8mapper%E6%8E%A5%E5%8F%A3"}},[a._v("使用Mapper接口")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%B1%82"}},[a._v("数据处理层")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%8F%82%E6%95%B0%E6%98%A0%E5%B0%84%E5%92%8C%E5%8A%A8%E6%80%81sql%E8%AF%AD%E5%8F%A5%E7%94%9F%E6%88%90"}},[a._v("参数映射和动态SQL语句生成")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E4%BB%A5%E5%8F%8A%E5%B0%81%E8%A3%85%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E9%9B%86%E6%88%90list"}},[a._v("SQL语句的执行以及封装查询结果集成List")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E6%A1%86%E6%9E%B6%E6%94%AF%E6%92%91%E5%B1%82"}},[a._v("框架支撑层")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BC%95%E5%AF%BC%E5%B1%82"}},[a._v("引导层")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%BB%E8%A6%81%E6%9E%84%E4%BB%B6%E5%8F%8A%E5%85%B6%E7%9B%B8%E4%BA%92%E5%85%B3%E7%B3%BB"}},[a._v("主要构件及其相互关系")])])])])]),a._v(" "),s("h2",{attrs:{id:"mybatis架构概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis架构概览"}},[a._v("¶")]),a._v(" MyBatis架构概览")]),a._v(" "),s("p",[a._v("MyBatis框架整体设计如下:")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/mybatis/mybatis-y-arch-1.png",loading:"lazy"}})]),a._v(" "),s("h3",{attrs:{id:"接口层-和数据库交互的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口层-和数据库交互的方式"}},[a._v("¶")]),a._v(" 接口层-和数据库交互的方式")]),a._v(" "),s("p",[a._v("MyBatis和数据库的交互有两种方式：")]),a._v(" "),s("ul",[s("li",[a._v("使用传统的MyBatis提供的API；")]),a._v(" "),s("li",[a._v("使用Mapper接口；")])]),a._v(" "),s("h4",{attrs:{id:"使用传统的mybatis提供的api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用传统的mybatis提供的api"}},[a._v("¶")]),a._v(" 使用传统的MyBatis提供的API")]),a._v(" "),s("p",[a._v("这是传统的传递Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession对象完成和数据库的交互；MyBatis 提供了非常方便和简单的API，供用户实现对数据库的增删改查数据操作，以及对数据库连接信息和MyBatis 自身配置信息的维护操作。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/mybatis/mybatis-y-arch-2.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("上述使用MyBatis 的方法，是创建一个和数据库打交道的SqlSession对象，然后根据Statement Id 和参数来操作数据库，这种方式固然很简单和实用，但是它不符合面向对象语言的概念和面向接口编程的编程习惯。由于面向接口的编程是面向对象的大趋势，MyBatis 为了适应这一趋势，增加了第二种使用MyBatis 支持接口（Interface）调用方式。")]),a._v(" "),s("h4",{attrs:{id:"使用mapper接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用mapper接口"}},[a._v("¶")]),a._v(" 使用Mapper接口")]),a._v(" "),s("p",[a._v("MyBatis 将配置文件中的每一个"),s("code",[a._v("<mapper>")]),a._v(" 节点抽象为一个 Mapper 接口，而这个接口中声明的方法和跟"),s("code",[a._v("<mapper>")]),a._v(" 节点中的"),s("code",[a._v("<select|update|delete|insert>")]),a._v(" 节点项对应，即"),s("code",[a._v("<select|update|delete|insert>")]),a._v(" 节点的id值为Mapper 接口中的方法名称，parameterType 值表示Mapper 对应方法的入参类型，而resultMap 值则对应了Mapper 接口表示的返回值类型或者返回结果集的元素类型。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/mybatis/mybatis-y-arch-3.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v('根据MyBatis 的配置规范配置好后，通过SqlSession.getMapper(XXXMapper.class)方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理机制生成一个Mapper 实例，我们使用Mapper 接口的某一个方法时，MyBatis 会根据这个方法的方法名和参数类型，确定Statement Id，底层还是通过SqlSession.select("statementId",parameterObject);或者SqlSession.update("statementId",parameterObject); 等等来实现对数据库的操作， MyBatis 引用Mapper 接口这种调用方式，纯粹是为了满足面向接口编程的需要。（其实还有一个原因是在于，面向接口的编程，使得用户在接口上可以使用注解来配置SQL语句，这样就可以脱离XML配置文件，实现“0配置”）。')]),a._v(" "),s("h3",{attrs:{id:"数据处理层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据处理层"}},[a._v("¶")]),a._v(" 数据处理层")]),a._v(" "),s("p",[a._v("数据处理层可以说是MyBatis 的核心，从大的方面上讲，它要完成两个功能：")]),a._v(" "),s("ul",[s("li",[a._v("通过传入参数构建动态SQL语句；")]),a._v(" "),s("li",[a._v("SQL语句的执行以及封装查询结果集成"),s("code",[a._v("List<E>")])])]),a._v(" "),s("h4",{attrs:{id:"参数映射和动态sql语句生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数映射和动态sql语句生成"}},[a._v("¶")]),a._v(" 参数映射和动态SQL语句生成")]),a._v(" "),s("p",[a._v("动态语句生成可以说是MyBatis框架非常优雅的一个设计，MyBatis 通过传入的参数值，使用 Ognl 来动态地构造SQL语句，使得MyBatis 有很强的灵活性和扩展性。")]),a._v(" "),s("p",[a._v("参数映射指的是对于java 数据类型和jdbc数据类型之间的转换：这里有包括两个过程：查询阶段，我们要将java类型的数据，转换成jdbc类型的数据，通过 preparedStatement.setXXX() 来设值；另一个就是对resultset查询结果集的jdbcType 数据转换成java 数据类型。")]),a._v(" "),s("h4",{attrs:{id:"sql语句的执行以及封装查询结果集成list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql语句的执行以及封装查询结果集成list"}},[a._v("¶")]),a._v(" SQL语句的执行以及封装查询结果集成List")]),a._v(" "),s("p",[a._v("动态SQL语句生成之后，MyBatis 将执行SQL语句，并将可能返回的结果集转换成"),s("code",[a._v("List<E>")]),a._v(" 列表。MyBatis 在对结果集的处理中，支持结果集关系一对多和多对一的转换，并且有两种支持方式，一种为嵌套查询语句的查询，还有一种是嵌套结果集的查询。")]),a._v(" "),s("h3",{attrs:{id:"框架支撑层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架支撑层"}},[a._v("¶")]),a._v(" 框架支撑层")]),a._v(" "),s("ul",[s("li",[a._v("事务管理机制")])]),a._v(" "),s("p",[a._v("事务管理机制对于ORM框架而言是不可缺少的一部分，事务管理机制的质量也是考量一个ORM框架是否优秀的一个标准。")]),a._v(" "),s("ul",[s("li",[a._v("连接池管理机制")])]),a._v(" "),s("p",[a._v("由于创建一个数据库连接所占用的资源比较大， 对于数据吞吐量大和访问量非常大的应用而言，连接池的设计就显得非常重要。")]),a._v(" "),s("ul",[s("li",[a._v("缓存机制")])]),a._v(" "),s("p",[a._v("为了提高数据利用率和减小服务器和数据库的压力，MyBatis 会对于一些查询提供会话级别的数据缓存，会将对某一次查询，放置到SqlSession 中，在允许的时间间隔内，对于完全相同的查询，MyBatis 会直接将缓存结果返回给用户，而不用再到数据库中查找。")]),a._v(" "),s("ul",[s("li",[a._v("SQL语句的配置方式")])]),a._v(" "),s("p",[a._v("传统的MyBatis 配置SQL 语句方式就是使用XML文件进行配置的，但是这种方式不能很好地支持面向接口编程的理念，为了支持面向接口的编程，MyBatis 引入了Mapper接口的概念，面向接口的引入，对使用注解来配置SQL 语句成为可能，用户只需要在接口上添加必要的注解即可，不用再去配置XML文件了，但是，目前的MyBatis 只是对注解配置SQL 语句提供了有限的支持，某些高级功能还是要依赖XML配置文件配置SQL 语句。")]),a._v(" "),s("h3",{attrs:{id:"引导层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引导层"}},[a._v("¶")]),a._v(" 引导层")]),a._v(" "),s("p",[a._v("引导层是配置和启动MyBatis配置信息的方式。MyBatis 提供两种方式来引导MyBatis ：基于XML配置文件的方式和基于Java API 的方式。")]),a._v(" "),s("h2",{attrs:{id:"主要构件及其相互关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要构件及其相互关系"}},[a._v("¶")]),a._v(" 主要构件及其相互关系")]),a._v(" "),s("p",[a._v("从MyBatis代码实现的角度来看，主体构件和关系如下：")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pdai-1257820000.cos.ap-beijing.myqcloud.com/pdai.tech/public/_images/mybatis/mybatis-y-arch-4.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("主要的核心部件解释如下：")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("SqlSession")]),a._v(" 作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Executor")]),a._v(" MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("StatementHandler")]),a._v(" 封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集合。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("ParameterHandler")]),a._v(" 负责对用户传递的参数转换成JDBC Statement 所需要的参数，")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("ResultSetHandler")]),a._v(" 负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("TypeHandler")]),a._v(" 负责java数据类型和jdbc数据类型之间的映射和转换")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("MappedStatement")]),a._v(" MappedStatement维护了一条"),s("code",[a._v("<select|update|delete|insert>")]),a._v("节点的封装，")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("SqlSource")]),a._v(" 负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("BoundSql")]),a._v(" 表示动态生成的SQL语句以及相应的参数信息")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Configuration")]),a._v(" MyBatis所有的配置信息都维持在Configuration对象之中。")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);